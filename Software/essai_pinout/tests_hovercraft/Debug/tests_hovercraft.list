
tests_hovercraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a0  080039a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a8  080039a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000139a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080039b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  080039bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080039bc  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f11c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be6  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00030d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00031b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001960c  00000000  00000000  00032878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f42d  00000000  00000000  0004be84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4eb9  00000000  00000000  0005b2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010016a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  001001bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003940 	.word	0x08003940

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003940 	.word	0x08003940

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb6b 	bl	8000bae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f809 	bl	80004ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f9a2 	bl	8000824 <MX_GPIO_Init>
  MX_TIM1_Init();/*PA8 moteur élévation*/
 80004e0:	f000 f84c 	bl	800057c <MX_TIM1_Init>
  MX_TIM16_Init();/*PA6 moteur avance*/
 80004e4:	f000 f8f6 	bl	80006d4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f96c 	bl	80007c4 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x1c>

080004ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b096      	sub	sp, #88	; 0x58
 80004f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f4:	f107 0314 	add.w	r3, r7, #20
 80004f8:	2244      	movs	r2, #68	; 0x44
 80004fa:	2100      	movs	r1, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f003 fa17 	bl	8003930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000502:	463b      	mov	r3, r7
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000510:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000514:	f000 fe3e 	bl	8001194 <HAL_PWREx_ControlVoltageScaling>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051e:	f000 f9cf 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000522:	2310      	movs	r3, #16
 8000524:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000526:	2301      	movs	r3, #1
 8000528:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800052e:	2360      	movs	r3, #96	; 0x60
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000532:	2300      	movs	r3, #0
 8000534:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	4618      	mov	r0, r3
 800053c:	f000 fe80 	bl	8001240 <HAL_RCC_OscConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000546:	f000 f9bb 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054a:	230f      	movs	r3, #15
 800054c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800055e:	463b      	mov	r3, r7
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 face 	bl	8001b04 <HAL_RCC_ClockConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800056e:	f000 f9a7 	bl	80008c0 <Error_Handler>
  }
}
 8000572:	bf00      	nop
 8000574:	3758      	adds	r7, #88	; 0x58
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09a      	sub	sp, #104	; 0x68
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
 80005ac:	615a      	str	r2, [r3, #20]
 80005ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	222c      	movs	r2, #44	; 0x2c
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 f9ba 	bl	8003930 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005bc:	4b43      	ldr	r3, [pc, #268]	; (80006cc <MX_TIM1_Init+0x150>)
 80005be:	4a44      	ldr	r2, [pc, #272]	; (80006d0 <MX_TIM1_Init+0x154>)
 80005c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80005c2:	4b42      	ldr	r3, [pc, #264]	; (80006cc <MX_TIM1_Init+0x150>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c8:	4b40      	ldr	r3, [pc, #256]	; (80006cc <MX_TIM1_Init+0x150>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80005ce:	4b3f      	ldr	r3, [pc, #252]	; (80006cc <MX_TIM1_Init+0x150>)
 80005d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d6:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <MX_TIM1_Init+0x150>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005dc:	4b3b      	ldr	r3, [pc, #236]	; (80006cc <MX_TIM1_Init+0x150>)
 80005de:	2200      	movs	r2, #0
 80005e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e2:	4b3a      	ldr	r3, [pc, #232]	; (80006cc <MX_TIM1_Init+0x150>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005e8:	4838      	ldr	r0, [pc, #224]	; (80006cc <MX_TIM1_Init+0x150>)
 80005ea:	f001 fe35 	bl	8002258 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80005f4:	f000 f964 	bl	80008c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000602:	4619      	mov	r1, r3
 8000604:	4831      	ldr	r0, [pc, #196]	; (80006cc <MX_TIM1_Init+0x150>)
 8000606:	f001 fff3 	bl	80025f0 <HAL_TIM_ConfigClockSource>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000610:	f000 f956 	bl	80008c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000614:	482d      	ldr	r0, [pc, #180]	; (80006cc <MX_TIM1_Init+0x150>)
 8000616:	f001 fe76 	bl	8002306 <HAL_TIM_PWM_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000620:	f000 f94e 	bl	80008c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000624:	2300      	movs	r3, #0
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000634:	4619      	mov	r1, r3
 8000636:	4825      	ldr	r0, [pc, #148]	; (80006cc <MX_TIM1_Init+0x150>)
 8000638:	f002 fc20 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000642:	f000 f93d 	bl	80008c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000646:	2360      	movs	r3, #96	; 0x60
 8000648:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800064e:	2300      	movs	r3, #0
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000652:	2300      	movs	r3, #0
 8000654:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800065a:	2300      	movs	r3, #0
 800065c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <MX_TIM1_Init+0x150>)
 800066c:	f001 feac 	bl	80023c8 <HAL_TIM_PWM_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000676:	f000 f923 	bl	80008c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800067a:	2300      	movs	r3, #0
 800067c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800068e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000692:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800069c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	4807      	ldr	r0, [pc, #28]	; (80006cc <MX_TIM1_Init+0x150>)
 80006b0:	f002 fc4a 	bl	8002f48 <HAL_TIMEx_ConfigBreakDeadTime>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80006ba:	f000 f901 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006be:	4803      	ldr	r0, [pc, #12]	; (80006cc <MX_TIM1_Init+0x150>)
 80006c0:	f000 f95c 	bl	800097c <HAL_TIM_MspPostInit>

}
 80006c4:	bf00      	nop
 80006c6:	3768      	adds	r7, #104	; 0x68
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000028 	.word	0x20000028
 80006d0:	40012c00 	.word	0x40012c00

080006d4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b092      	sub	sp, #72	; 0x48
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]
 80006ea:	615a      	str	r2, [r3, #20]
 80006ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	222c      	movs	r2, #44	; 0x2c
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 f91b 	bl	8003930 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_TIM16_Init+0xe8>)
 80006fc:	4a30      	ldr	r2, [pc, #192]	; (80007c0 <MX_TIM16_Init+0xec>)
 80006fe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <MX_TIM16_Init+0xe8>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_TIM16_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800070c:	4b2b      	ldr	r3, [pc, #172]	; (80007bc <MX_TIM16_Init+0xe8>)
 800070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000712:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_TIM16_Init+0xe8>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800071a:	4b28      	ldr	r3, [pc, #160]	; (80007bc <MX_TIM16_Init+0xe8>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_TIM16_Init+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000726:	4825      	ldr	r0, [pc, #148]	; (80007bc <MX_TIM16_Init+0xe8>)
 8000728:	f001 fd96 	bl	8002258 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000732:	f000 f8c5 	bl	80008c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000736:	4821      	ldr	r0, [pc, #132]	; (80007bc <MX_TIM16_Init+0xe8>)
 8000738:	f001 fde5 	bl	8002306 <HAL_TIM_PWM_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000742:	f000 f8bd 	bl	80008c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000746:	2360      	movs	r3, #96	; 0x60
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074e:	2300      	movs	r3, #0
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000752:	2300      	movs	r3, #0
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000766:	2200      	movs	r2, #0
 8000768:	4619      	mov	r1, r3
 800076a:	4814      	ldr	r0, [pc, #80]	; (80007bc <MX_TIM16_Init+0xe8>)
 800076c:	f001 fe2c 	bl	80023c8 <HAL_TIM_PWM_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000776:	f000 f8a3 	bl	80008c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4807      	ldr	r0, [pc, #28]	; (80007bc <MX_TIM16_Init+0xe8>)
 800079e:	f002 fbd3 	bl	8002f48 <HAL_TIMEx_ConfigBreakDeadTime>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80007a8:	f000 f88a 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <MX_TIM16_Init+0xe8>)
 80007ae:	f000 f8e5 	bl	800097c <HAL_TIM_MspPostInit>

}
 80007b2:	bf00      	nop
 80007b4:	3748      	adds	r7, #72	; 0x48
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000074 	.word	0x20000074
 80007c0:	40014400 	.word	0x40014400

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART2_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000808:	f002 fc16 	bl	8003038 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f855 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000c0 	.word	0x200000c0
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0x94>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <MX_GPIO_Init+0x94>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_GPIO_Init+0x94>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_GPIO_Init+0x94>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_GPIO_Init+0x94>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <MX_GPIO_Init+0x94>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 fc68 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000878:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f000 fae6 	bl	8000e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000898:	2340      	movs	r3, #64	; 0x40
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_GPIO_Init+0x98>)
 80008ac:	f000 fada 	bl	8000e64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b0:	bf00      	nop
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000400 	.word	0x48000400

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>
	...

080008cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x44>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6613      	str	r3, [r2, #96]	; 0x60
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_MspInit+0x44>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_MspInit+0x44>)
 80008f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_TIM_Base_MspInit+0x5c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d10c      	bne.n	8000940 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_TIM_Base_MspInit+0x60>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <HAL_TIM_Base_MspInit+0x60>)
 800092c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_TIM_Base_MspInit+0x60>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800093e:	e010      	b.n	8000962 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <HAL_TIM_Base_MspInit+0x64>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10b      	bne.n	8000962 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_TIM_Base_MspInit+0x60>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	4a09      	ldr	r2, [pc, #36]	; (8000974 <HAL_TIM_Base_MspInit+0x60>)
 8000950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000954:	6613      	str	r3, [r2, #96]	; 0x60
 8000956:	4b07      	ldr	r3, [pc, #28]	; (8000974 <HAL_TIM_Base_MspInit+0x60>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40012c00 	.word	0x40012c00
 8000974:	40021000 	.word	0x40021000
 8000978:	40014400 	.word	0x40014400

0800097c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <HAL_TIM_MspPostInit+0xac>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d11e      	bne.n	80009dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b23      	ldr	r3, [pc, #140]	; (8000a2c <HAL_TIM_MspPostInit+0xb0>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a22      	ldr	r2, [pc, #136]	; (8000a2c <HAL_TIM_MspPostInit+0xb0>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <HAL_TIM_MspPostInit+0xb0>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d6:	f000 fa45 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80009da:	e021      	b.n	8000a20 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <HAL_TIM_MspPostInit+0xb4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d11c      	bne.n	8000a20 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <HAL_TIM_MspPostInit+0xb0>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a10      	ldr	r2, [pc, #64]	; (8000a2c <HAL_TIM_MspPostInit+0xb0>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_TIM_MspPostInit+0xb0>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000a0e:	230e      	movs	r3, #14
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fa22 	bl	8000e64 <HAL_GPIO_Init>
}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40012c00 	.word	0x40012c00
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40014400 	.word	0x40014400

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b096      	sub	sp, #88	; 0x58
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2234      	movs	r2, #52	; 0x34
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f002 ff6b 	bl	8003930 <memset>
  if(huart->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_UART_MspInit+0xa8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d136      	bne.n	8000ad2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fa6b 	bl	8001f4c <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a7c:	f7ff ff20 	bl	80008c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f000 f9c9 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3758      	adds	r7, #88	; 0x58
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f892 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b60:	f7ff ffea 	bl	8000b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480c      	ldr	r0, [pc, #48]	; (8000b98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490d      	ldr	r1, [pc, #52]	; (8000b9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0d      	ldr	r2, [pc, #52]	; (8000ba0 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ba8 <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f002 fead 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b8e:	f7ff fc9f 	bl	80004d0 <main>

08000b92 <LoopForever>:

LoopForever:
    b LoopForever
 8000b92:	e7fe      	b.n	8000b92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba0:	080039b0 	.word	0x080039b0
  ldr r2, =_sbss
 8000ba4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ba8:	20000148 	.word	0x20000148

08000bac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC1_2_IRQHandler>

08000bae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f91f 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f80e 	bl	8000be0 <HAL_InitTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d002      	beq.n	8000bd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	e001      	b.n	8000bd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd0:	f7ff fe7c 	bl	80008cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <HAL_InitTick+0x6c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d023      	beq.n	8000c3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_InitTick+0x70>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_InitTick+0x6c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f91d 	bl	8000e4a <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10f      	bne.n	8000c36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d809      	bhi.n	8000c30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f8f5 	bl	8000e12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0x74>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	e007      	b.n	8000c40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e004      	b.n	8000c40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e001      	b.n	8000c40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000144 	.word	0x20000144

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000144 	.word	0x20000144

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5c 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb0 	bl	8000db8 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e72:	e14e      	b.n	8001112 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	2101      	movs	r1, #1
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e80:	4013      	ands	r3, r2
 8000e82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 8140 	beq.w	800110c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d005      	beq.n	8000ea4 <HAL_GPIO_Init+0x40>
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 0201 	and.w	r2, r3, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d017      	beq.n	8000f42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d123      	bne.n	8000f96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	08da      	lsrs	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3208      	adds	r2, #8
 8000f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0307 	and.w	r3, r3, #7
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	08da      	lsrs	r2, r3, #3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3208      	adds	r2, #8
 8000f90:	6939      	ldr	r1, [r7, #16]
 8000f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0203 	and.w	r2, r3, #3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 809a 	beq.w	800110c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd8:	4b55      	ldr	r3, [pc, #340]	; (8001130 <HAL_GPIO_Init+0x2cc>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fdc:	4a54      	ldr	r2, [pc, #336]	; (8001130 <HAL_GPIO_Init+0x2cc>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6613      	str	r3, [r2, #96]	; 0x60
 8000fe4:	4b52      	ldr	r3, [pc, #328]	; (8001130 <HAL_GPIO_Init+0x2cc>)
 8000fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff0:	4a50      	ldr	r2, [pc, #320]	; (8001134 <HAL_GPIO_Init+0x2d0>)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	220f      	movs	r2, #15
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800101a:	d013      	beq.n	8001044 <HAL_GPIO_Init+0x1e0>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a46      	ldr	r2, [pc, #280]	; (8001138 <HAL_GPIO_Init+0x2d4>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00d      	beq.n	8001040 <HAL_GPIO_Init+0x1dc>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a45      	ldr	r2, [pc, #276]	; (800113c <HAL_GPIO_Init+0x2d8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x1d8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a44      	ldr	r2, [pc, #272]	; (8001140 <HAL_GPIO_Init+0x2dc>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <HAL_GPIO_Init+0x1d4>
 8001034:	2303      	movs	r3, #3
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x1e2>
 8001038:	2307      	movs	r3, #7
 800103a:	e004      	b.n	8001046 <HAL_GPIO_Init+0x1e2>
 800103c:	2302      	movs	r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x1e2>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_GPIO_Init+0x1e2>
 8001044:	2300      	movs	r3, #0
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4093      	lsls	r3, r2
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001056:	4937      	ldr	r1, [pc, #220]	; (8001134 <HAL_GPIO_Init+0x2d0>)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001064:	4b37      	ldr	r3, [pc, #220]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001088:	4a2e      	ldr	r2, [pc, #184]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010b2:	4a24      	ldr	r2, [pc, #144]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010dc:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa22 f303 	lsr.w	r3, r2, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	f47f aea9 	bne.w	8000e74 <HAL_GPIO_Init+0x10>
  }
}
 8001122:	bf00      	nop
 8001124:	bf00      	nop
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	40021000 	.word	0x40021000
 8001134:	40010000 	.word	0x40010000
 8001138:	48000400 	.word	0x48000400
 800113c:	48000800 	.word	0x48000800
 8001140:	48000c00 	.word	0x48000c00
 8001144:	40010400 	.word	0x40010400

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001164:	e002      	b.n	800116c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_PWREx_GetVoltageRange+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40007000 	.word	0x40007000

08001194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011a2:	d130      	bne.n	8001206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011b0:	d038      	beq.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011ba:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2232      	movs	r2, #50	; 0x32
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	0c9b      	lsrs	r3, r3, #18
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	e002      	b.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3b01      	subs	r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	d102      	bne.n	80011f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f2      	bne.n	80011da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001200:	d110      	bne.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e00f      	b.n	8001226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d007      	beq.n	8001224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800121c:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40007000 	.word	0x40007000
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83

08001240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f000 bc4f 	b.w	8001af2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001254:	4b97      	ldr	r3, [pc, #604]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125e:	4b95      	ldr	r3, [pc, #596]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80e6 	beq.w	8001442 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d007      	beq.n	800128c <HAL_RCC_OscConfig+0x4c>
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	f040 808d 	bne.w	800139e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b01      	cmp	r3, #1
 8001288:	f040 8089 	bne.w	800139e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800128c:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d006      	beq.n	80012a6 <HAL_RCC_OscConfig+0x66>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f000 bc26 	b.w	8001af2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_RCC_OscConfig+0x80>
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012be:	e005      	b.n	80012cc <HAL_RCC_OscConfig+0x8c>
 80012c0:	4b7c      	ldr	r3, [pc, #496]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d224      	bcs.n	800131a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fdd9 	bl	8001e8c <RCC_SetFlashLatencyFromMSIRange>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f000 bc06 	b.w	8001af2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e6:	4b73      	ldr	r3, [pc, #460]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a72      	ldr	r2, [pc, #456]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	496d      	ldr	r1, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001300:	4313      	orrs	r3, r2
 8001302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001304:	4b6b      	ldr	r3, [pc, #428]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	4968      	ldr	r1, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e025      	b.n	8001366 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131a:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001320:	f043 0308 	orr.w	r3, r3, #8
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	4960      	ldr	r1, [pc, #384]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	495b      	ldr	r1, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d109      	bne.n	8001366 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fd98 	bl	8001e8c <RCC_SetFlashLatencyFromMSIRange>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e3c5      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001366:	f000 fccd 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 800136a:	4602      	mov	r2, r0
 800136c:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4950      	ldr	r1, [pc, #320]	; (80014b8 <HAL_RCC_OscConfig+0x278>)
 8001378:	5ccb      	ldrb	r3, [r1, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <HAL_RCC_OscConfig+0x27c>)
 8001384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001386:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <HAL_RCC_OscConfig+0x280>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fc28 	bl	8000be0 <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d052      	beq.n	8001440 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	e3a9      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d032      	beq.n	800140c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013a6:	4b43      	ldr	r3, [pc, #268]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a42      	ldr	r2, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fc65 	bl	8000c80 <HAL_GetTick>
 80013b6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc61 	bl	8000c80 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e392      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013cc:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013d8:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a35      	ldr	r2, [pc, #212]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013de:	f043 0308 	orr.w	r3, r3, #8
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	4b33      	ldr	r3, [pc, #204]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	4930      	ldr	r1, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013f6:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	492b      	ldr	r1, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
 800140a:	e01a      	b.n	8001442 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800140c:	4b29      	ldr	r3, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a28      	ldr	r2, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001418:	f7ff fc32 	bl	8000c80 <HAL_GetTick>
 800141c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001420:	f7ff fc2e 	bl	8000c80 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e35f      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1e0>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b00      	cmp	r3, #0
 800144c:	d073      	beq.n	8001536 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x220>
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d10e      	bne.n	8001478 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d10b      	bne.n	8001478 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d063      	beq.n	8001534 <HAL_RCC_OscConfig+0x2f4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d15f      	bne.n	8001534 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e33c      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d106      	bne.n	8001490 <HAL_RCC_OscConfig+0x250>
 8001482:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e025      	b.n	80014dc <HAL_RCC_OscConfig+0x29c>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001498:	d114      	bne.n	80014c4 <HAL_RCC_OscConfig+0x284>
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a02      	ldr	r2, [pc, #8]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 80014ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e013      	b.n	80014dc <HAL_RCC_OscConfig+0x29c>
 80014b4:	40021000 	.word	0x40021000
 80014b8:	08003958 	.word	0x08003958
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004
 80014c4:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a8e      	ldr	r2, [pc, #568]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a8b      	ldr	r2, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e4:	f7ff fbcc 	bl	8000c80 <HAL_GetTick>
 80014e8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fbc8 	bl	8000c80 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e2f9      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014fe:	4b81      	ldr	r3, [pc, #516]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x2ac>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fbb8 	bl	8000c80 <HAL_GetTick>
 8001510:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fbb4 	bl	8000c80 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e2e5      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001526:	4b77      	ldr	r3, [pc, #476]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d4>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d060      	beq.n	8001604 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x314>
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d119      	bne.n	8001582 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d116      	bne.n	8001582 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_RCC_OscConfig+0x32c>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e2c2      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b65      	ldr	r3, [pc, #404]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4962      	ldr	r1, [pc, #392]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e040      	b.n	8001604 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d023      	beq.n	80015d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800158a:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a5d      	ldr	r2, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb73 	bl	8000c80 <HAL_GetTick>
 800159a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fb6f 	bl	8000c80 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e2a0      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b51      	ldr	r3, [pc, #324]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	494e      	ldr	r1, [pc, #312]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
 80015d0:	e018      	b.n	8001604 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015de:	f7ff fb4f 	bl	8000c80 <HAL_GetTick>
 80015e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb4b 	bl	8000c80 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e27c      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1f0      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 8082 	beq.w	8001716 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d05f      	beq.n	80016da <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001620:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	429a      	cmp	r2, r3
 800162e:	d037      	beq.n	80016a0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e254      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01b      	beq.n	800168a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001652:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001658:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001662:	f7ff fb0d 	bl	8000c80 <HAL_GetTick>
 8001666:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166a:	f7ff fb09 	bl	8000c80 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b11      	cmp	r3, #17
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e23a      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800167c:	4b21      	ldr	r3, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ef      	bne.n	800166a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800168a:	4b1e      	ldr	r3, [pc, #120]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001690:	f023 0210 	bic.w	r2, r3, #16
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	491a      	ldr	r1, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800169a:	4313      	orrs	r3, r2
 800169c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fae6 	bl	8000c80 <HAL_GetTick>
 80016b4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fae2 	bl	8000c80 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b11      	cmp	r3, #17
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e213      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ef      	beq.n	80016b8 <HAL_RCC_OscConfig+0x478>
 80016d8:	e01d      	b.n	8001716 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff fac9 	bl	8000c80 <HAL_GetTick>
 80016ee:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f2:	f7ff fac5 	bl	8000c80 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b11      	cmp	r3, #17
 80016fe:	d903      	bls.n	8001708 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e1f6      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
 8001704:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001708:	4ba9      	ldr	r3, [pc, #676]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800170a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1ed      	bne.n	80016f2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80bd 	beq.w	800189e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800172a:	4ba1      	ldr	r3, [pc, #644]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10e      	bne.n	8001754 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b9e      	ldr	r3, [pc, #632]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	4a9d      	ldr	r2, [pc, #628]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	; 0x58
 8001742:	4b9b      	ldr	r3, [pc, #620]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b97      	ldr	r3, [pc, #604]	; (80019b4 <HAL_RCC_OscConfig+0x774>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d118      	bne.n	8001792 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001760:	4b94      	ldr	r3, [pc, #592]	; (80019b4 <HAL_RCC_OscConfig+0x774>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a93      	ldr	r2, [pc, #588]	; (80019b4 <HAL_RCC_OscConfig+0x774>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176c:	f7ff fa88 	bl	8000c80 <HAL_GetTick>
 8001770:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001774:	f7ff fa84 	bl	8000c80 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1b5      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001786:	4b8b      	ldr	r3, [pc, #556]	; (80019b4 <HAL_RCC_OscConfig+0x774>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	d02c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800179e:	4b84      	ldr	r3, [pc, #528]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b0:	497f      	ldr	r1, [pc, #508]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d010      	beq.n	80017e6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017c4:	4b7a      	ldr	r3, [pc, #488]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a79      	ldr	r2, [pc, #484]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017d4:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017da:	4a75      	ldr	r2, [pc, #468]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e4:	e018      	b.n	8001818 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a70      	ldr	r2, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f6:	e00f      	b.n	8001818 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017f8:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	4a6c      	ldr	r2, [pc, #432]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001808:	4b69      	ldr	r3, [pc, #420]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	4a68      	ldr	r2, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d016      	beq.n	800184e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff fa2e 	bl	8000c80 <HAL_GetTick>
 8001824:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fa2a 	bl	8000c80 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e159      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ed      	beq.n	8001828 <HAL_RCC_OscConfig+0x5e8>
 800184c:	e01d      	b.n	800188a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff fa17 	bl	8000c80 <HAL_GetTick>
 8001852:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fa13 	bl	8000c80 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e142      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ed      	bne.n	8001856 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800187a:	4b4d      	ldr	r3, [pc, #308]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a4b      	ldr	r2, [pc, #300]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a46      	ldr	r2, [pc, #280]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d03c      	beq.n	8001924 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01c      	beq.n	80018ec <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80018b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b8:	4a3d      	ldr	r2, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c2:	f7ff f9dd 	bl	8000c80 <HAL_GetTick>
 80018c6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ca:	f7ff f9d9 	bl	8000c80 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e10a      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018dc:	4b34      	ldr	r3, [pc, #208]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80018de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0ef      	beq.n	80018ca <HAL_RCC_OscConfig+0x68a>
 80018ea:	e01b      	b.n	8001924 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ec:	4b30      	ldr	r3, [pc, #192]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80018ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f2:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018fc:	f7ff f9c0 	bl	8000c80 <HAL_GetTick>
 8001900:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001904:	f7ff f9bc 	bl	8000c80 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e0ed      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001916:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 8001918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ef      	bne.n	8001904 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80e1 	beq.w	8001af0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	2b02      	cmp	r3, #2
 8001934:	f040 80b5 	bne.w	8001aa2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	429a      	cmp	r2, r3
 800194a:	d124      	bne.n	8001996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	3b01      	subs	r3, #1
 8001958:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d11b      	bne.n	8001996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d113      	bne.n	8001996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d109      	bne.n	8001996 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	3b01      	subs	r3, #1
 8001990:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d05f      	beq.n	8001a56 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	2b0c      	cmp	r3, #12
 800199a:	d05a      	beq.n	8001a52 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a03      	ldr	r2, [pc, #12]	; (80019b0 <HAL_RCC_OscConfig+0x770>)
 80019a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019a8:	f7ff f96a 	bl	8000c80 <HAL_GetTick>
 80019ac:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ae:	e00c      	b.n	80019ca <HAL_RCC_OscConfig+0x78a>
 80019b0:	40021000 	.word	0x40021000
 80019b4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f962 	bl	8000c80 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e093      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ca:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <HAL_RCC_OscConfig+0x8c0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019e6:	3a01      	subs	r2, #1
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019f0:	0212      	lsls	r2, r2, #8
 80019f2:	4311      	orrs	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019f8:	0852      	lsrs	r2, r2, #1
 80019fa:	3a01      	subs	r2, #1
 80019fc:	0552      	lsls	r2, r2, #21
 80019fe:	4311      	orrs	r1, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a04:	0852      	lsrs	r2, r2, #1
 8001a06:	3a01      	subs	r2, #1
 8001a08:	0652      	lsls	r2, r2, #25
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	493b      	ldr	r1, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a12:	4b3a      	ldr	r3, [pc, #232]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a39      	ldr	r2, [pc, #228]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	4a36      	ldr	r2, [pc, #216]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a28:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a2a:	f7ff f929 	bl	8000c80 <HAL_GetTick>
 8001a2e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f925 	bl	8000c80 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e056      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a50:	e04e      	b.n	8001af0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e04d      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d146      	bne.n	8001af0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a62:	4b26      	ldr	r3, [pc, #152]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a25      	ldr	r2, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a6c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a78:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a7a:	f7ff f901 	bl	8000c80 <HAL_GetTick>
 8001a7e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f8fd 	bl	8000c80 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e02e      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0f0      	beq.n	8001a82 <HAL_RCC_OscConfig+0x842>
 8001aa0:	e026      	b.n	8001af0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	2b0c      	cmp	r3, #12
 8001aa6:	d021      	beq.n	8001aec <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001aae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f8e4 	bl	8000c80 <HAL_GetTick>
 8001ab8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff f8e0 	bl	8000c80 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e011      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <HAL_RCC_OscConfig+0x8bc>)
 8001ae0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ae4:	f023 0303 	bic.w	r3, r3, #3
 8001ae8:	60d3      	str	r3, [r2, #12]
 8001aea:	e001      	b.n	8001af0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3728      	adds	r7, #40	; 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	f99f808c 	.word	0xf99f808c

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0e7      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b75      	ldr	r3, [pc, #468]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d910      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b72      	ldr	r3, [pc, #456]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 0207 	bic.w	r2, r3, #7
 8001b2e:	4970      	ldr	r1, [pc, #448]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b6e      	ldr	r3, [pc, #440]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0cf      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d908      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4960      	ldr	r1, [pc, #384]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d04c      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d121      	bne.n	8001bda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e0a6      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba2:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d115      	bne.n	8001bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e09a      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bba:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d109      	bne.n	8001bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e08e      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bca:	4b4a      	ldr	r3, [pc, #296]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e086      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bda:	4b46      	ldr	r3, [pc, #280]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f023 0203 	bic.w	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	4943      	ldr	r1, [pc, #268]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bec:	f7ff f848 	bl	8000c80 <HAL_GetTick>
 8001bf0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff f844 	bl	8000c80 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e06e      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 020c 	and.w	r2, r3, #12
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d1eb      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d208      	bcs.n	8001c4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	492b      	ldr	r1, [pc, #172]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d210      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 0207 	bic.w	r2, r3, #7
 8001c60:	4923      	ldr	r1, [pc, #140]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c68:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e036      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d008      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c86:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4918      	ldr	r1, [pc, #96]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca4:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4910      	ldr	r1, [pc, #64]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb8:	f000 f824 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b0d      	ldr	r3, [pc, #52]	; (8001cf4 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f4>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1f8>)
 8001cd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1fc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe ff7f 	bl	8000be0 <HAL_InitTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ce6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40022000 	.word	0x40022000
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08003958 	.word	0x08003958
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d1c:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x34>
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d121      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d11e      	bne.n	8001d76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	e005      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d60:	4a2b      	ldr	r2, [pc, #172]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d102      	bne.n	8001d82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	e004      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	2b08      	cmp	r3, #8
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d88:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d134      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0xa6>
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d003      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0xac>
 8001da8:	e005      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dac:	617b      	str	r3, [r7, #20]
      break;
 8001dae:	e005      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x114>)
 8001db2:	617b      	str	r3, [r7, #20]
      break;
 8001db4:	e002      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	617b      	str	r3, [r7, #20]
      break;
 8001dba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	fb03 f202 	mul.w	r2, r3, r2
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x108>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	0e5b      	lsrs	r3, r3, #25
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	3301      	adds	r3, #1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3724      	adds	r7, #36	; 0x24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003970 	.word	0x08003970
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	007a1200 	.word	0x007a1200

08001e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000000 	.word	0x20000000

08001e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e38:	f7ff fff0 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	f003 0307 	and.w	r3, r3, #7
 8001e48:	4904      	ldr	r1, [pc, #16]	; (8001e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	08003968 	.word	0x08003968

08001e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e64:	f7ff ffda 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0adb      	lsrs	r3, r3, #11
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	4904      	ldr	r1, [pc, #16]	; (8001e88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e76:	5ccb      	ldrb	r3, [r1, r3]
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08003968 	.word	0x08003968

08001e8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e98:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ea4:	f7ff f968 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 8001ea8:	6178      	str	r0, [r7, #20]
 8001eaa:	e014      	b.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ec4:	f7ff f958 	bl	8001178 <HAL_PWREx_GetVoltageRange>
 8001ec8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001edc:	d10b      	bne.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d919      	bls.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ee8:	d902      	bls.n	8001ef0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eea:	2302      	movs	r3, #2
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	e013      	b.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	e010      	b.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b80      	cmp	r3, #128	; 0x80
 8001efa:	d902      	bls.n	8001f02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001efc:	2303      	movs	r3, #3
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e00a      	b.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d102      	bne.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	e004      	b.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b70      	cmp	r3, #112	; 0x70
 8001f12:	d101      	bne.n	8001f18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f14:	2301      	movs	r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 0207 	bic.w	r2, r3, #7
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f28:	4b07      	ldr	r3, [pc, #28]	; (8001f48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40022000 	.word	0x40022000

08001f4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f54:	2300      	movs	r3, #0
 8001f56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 809e 	beq.w	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f6e:	4b46      	ldr	r3, [pc, #280]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	4a3f      	ldr	r2, [pc, #252]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f90:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a39      	ldr	r2, [pc, #228]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fac:	f7fe fe68 	bl	8000c80 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7fe fe64 	bl	8000c80 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d902      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc6:	e005      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d15a      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01e      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d019      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002000:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002002:	4b21      	ldr	r3, [pc, #132]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	4a1f      	ldr	r2, [pc, #124]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002012:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002022:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d016      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe fe24 	bl	8000c80 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203a:	e00b      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7fe fe20 	bl	8000c80 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d902      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	74fb      	strb	r3, [r7, #19]
            break;
 8002052:	e006      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0ec      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4904      	ldr	r1, [pc, #16]	; (8002088 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800207e:	e009      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
 8002084:	e006      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002094:	7c7b      	ldrb	r3, [r7, #17]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d105      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b6e      	ldr	r3, [pc, #440]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209e:	4a6d      	ldr	r2, [pc, #436]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b2:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b8:	f023 0203 	bic.w	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	4964      	ldr	r1, [pc, #400]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d4:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	f023 020c 	bic.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	495c      	ldr	r1, [pc, #368]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020f6:	4b57      	ldr	r3, [pc, #348]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4953      	ldr	r1, [pc, #332]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002106:	4313      	orrs	r3, r2
 8002108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002118:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	494b      	ldr	r1, [pc, #300]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800213c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4942      	ldr	r1, [pc, #264]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00a      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	493a      	ldr	r1, [pc, #232]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00a      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217e:	4b35      	ldr	r3, [pc, #212]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002184:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	4931      	ldr	r1, [pc, #196]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a0:	4b2c      	ldr	r3, [pc, #176]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	4929      	ldr	r1, [pc, #164]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69db      	ldr	r3, [r3, #28]
 80021d0:	4920      	ldr	r1, [pc, #128]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d015      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f2:	4918      	ldr	r1, [pc, #96]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002202:	d105      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800220a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800220e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222a:	490a      	ldr	r1, [pc, #40]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800223a:	d105      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002248:	7cbb      	ldrb	r3, [r7, #18]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e049      	b.n	80022fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe fb48 	bl	8000914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	4619      	mov	r1, r3
 8002296:	4610      	mov	r0, r2
 8002298:	f000 fa74 	bl	8002784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e049      	b.n	80023ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f841 	bl	80023b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f000 fa1d 	bl	8002784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0ff      	b.n	80025e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b14      	cmp	r3, #20
 80023f2:	f200 80f0 	bhi.w	80025d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80023f6:	a201      	add	r2, pc, #4	; (adr r2, 80023fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	08002451 	.word	0x08002451
 8002400:	080025d7 	.word	0x080025d7
 8002404:	080025d7 	.word	0x080025d7
 8002408:	080025d7 	.word	0x080025d7
 800240c:	08002491 	.word	0x08002491
 8002410:	080025d7 	.word	0x080025d7
 8002414:	080025d7 	.word	0x080025d7
 8002418:	080025d7 	.word	0x080025d7
 800241c:	080024d3 	.word	0x080024d3
 8002420:	080025d7 	.word	0x080025d7
 8002424:	080025d7 	.word	0x080025d7
 8002428:	080025d7 	.word	0x080025d7
 800242c:	08002513 	.word	0x08002513
 8002430:	080025d7 	.word	0x080025d7
 8002434:	080025d7 	.word	0x080025d7
 8002438:	080025d7 	.word	0x080025d7
 800243c:	08002555 	.word	0x08002555
 8002440:	080025d7 	.word	0x080025d7
 8002444:	080025d7 	.word	0x080025d7
 8002448:	080025d7 	.word	0x080025d7
 800244c:	08002595 	.word	0x08002595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f9f8 	bl	800284c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0208 	orr.w	r2, r2, #8
 800246a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0204 	bic.w	r2, r2, #4
 800247a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6999      	ldr	r1, [r3, #24]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	691a      	ldr	r2, [r3, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	619a      	str	r2, [r3, #24]
      break;
 800248e:	e0a5      	b.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68b9      	ldr	r1, [r7, #8]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fa54 	bl	8002944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6999      	ldr	r1, [r3, #24]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	021a      	lsls	r2, r3, #8
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	619a      	str	r2, [r3, #24]
      break;
 80024d0:	e084      	b.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 faad 	bl	8002a38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0208 	orr.w	r2, r2, #8
 80024ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0204 	bic.w	r2, r2, #4
 80024fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69d9      	ldr	r1, [r3, #28]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	61da      	str	r2, [r3, #28]
      break;
 8002510:	e064      	b.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fb05 	bl	8002b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800252c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69da      	ldr	r2, [r3, #28]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69d9      	ldr	r1, [r3, #28]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	61da      	str	r2, [r3, #28]
      break;
 8002552:	e043      	b.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fb42 	bl	8002be4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f042 0208 	orr.w	r2, r2, #8
 800256e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002592:	e023      	b.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 fb7a 	bl	8002c94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	021a      	lsls	r2, r3, #8
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80025d4:	e002      	b.n	80025dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
      break;
 80025da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop

080025f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <HAL_TIM_ConfigClockSource+0x1c>
 8002608:	2302      	movs	r3, #2
 800260a:	e0b6      	b.n	800277a <HAL_TIM_ConfigClockSource+0x18a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800262e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002648:	d03e      	beq.n	80026c8 <HAL_TIM_ConfigClockSource+0xd8>
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264e:	f200 8087 	bhi.w	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002656:	f000 8086 	beq.w	8002766 <HAL_TIM_ConfigClockSource+0x176>
 800265a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265e:	d87f      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d01a      	beq.n	800269a <HAL_TIM_ConfigClockSource+0xaa>
 8002664:	2b70      	cmp	r3, #112	; 0x70
 8002666:	d87b      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002668:	2b60      	cmp	r3, #96	; 0x60
 800266a:	d050      	beq.n	800270e <HAL_TIM_ConfigClockSource+0x11e>
 800266c:	2b60      	cmp	r3, #96	; 0x60
 800266e:	d877      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002670:	2b50      	cmp	r3, #80	; 0x50
 8002672:	d03c      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0xfe>
 8002674:	2b50      	cmp	r3, #80	; 0x50
 8002676:	d873      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002678:	2b40      	cmp	r3, #64	; 0x40
 800267a:	d058      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x13e>
 800267c:	2b40      	cmp	r3, #64	; 0x40
 800267e:	d86f      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002680:	2b30      	cmp	r3, #48	; 0x30
 8002682:	d064      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x15e>
 8002684:	2b30      	cmp	r3, #48	; 0x30
 8002686:	d86b      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002688:	2b20      	cmp	r3, #32
 800268a:	d060      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x15e>
 800268c:	2b20      	cmp	r3, #32
 800268e:	d867      	bhi.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
 8002690:	2b00      	cmp	r3, #0
 8002692:	d05c      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x15e>
 8002694:	2b10      	cmp	r3, #16
 8002696:	d05a      	beq.n	800274e <HAL_TIM_ConfigClockSource+0x15e>
 8002698:	e062      	b.n	8002760 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6899      	ldr	r1, [r3, #8]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f000 fbc7 	bl	8002e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	609a      	str	r2, [r3, #8]
      break;
 80026c6:	e04f      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	6899      	ldr	r1, [r3, #8]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f000 fbb0 	bl	8002e3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ea:	609a      	str	r2, [r3, #8]
      break;
 80026ec:	e03c      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f000 fb24 	bl	8002d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2150      	movs	r1, #80	; 0x50
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fb7d 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 800270c:	e02c      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	f000 fb43 	bl	8002da6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2160      	movs	r1, #96	; 0x60
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fb6d 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 800272c:	e01c      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	461a      	mov	r2, r3
 800273c:	f000 fb04 	bl	8002d48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fb5d 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 800274c:	e00c      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f000 fb54 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 800275e:	e003      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
      break;
 8002764:	e000      	b.n	8002768 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002766:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <TIM_Base_SetConfig+0xbc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x20>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a2:	d108      	bne.n	80027b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <TIM_Base_SetConfig+0xbc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_Base_SetConfig+0x52>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0x52>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a1e      	ldr	r2, [pc, #120]	; (8002844 <TIM_Base_SetConfig+0xc0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0x52>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <TIM_Base_SetConfig+0xc4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <TIM_Base_SetConfig+0xbc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d007      	beq.n	8002824 <TIM_Base_SetConfig+0xa0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <TIM_Base_SetConfig+0xc0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d003      	beq.n	8002824 <TIM_Base_SetConfig+0xa0>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <TIM_Base_SetConfig+0xc4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d103      	bne.n	800282c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	615a      	str	r2, [r3, #20]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40014000 	.word	0x40014000
 8002848:	40014400 	.word	0x40014400

0800284c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0201 	bic.w	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f023 0303 	bic.w	r3, r3, #3
 8002886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4313      	orrs	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f023 0302 	bic.w	r3, r3, #2
 8002898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a24      	ldr	r2, [pc, #144]	; (8002938 <TIM_OC1_SetConfig+0xec>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d007      	beq.n	80028bc <TIM_OC1_SetConfig+0x70>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a23      	ldr	r2, [pc, #140]	; (800293c <TIM_OC1_SetConfig+0xf0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d003      	beq.n	80028bc <TIM_OC1_SetConfig+0x70>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a22      	ldr	r2, [pc, #136]	; (8002940 <TIM_OC1_SetConfig+0xf4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d10c      	bne.n	80028d6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f023 0308 	bic.w	r3, r3, #8
 80028c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a17      	ldr	r2, [pc, #92]	; (8002938 <TIM_OC1_SetConfig+0xec>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_OC1_SetConfig+0xa2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a16      	ldr	r2, [pc, #88]	; (800293c <TIM_OC1_SetConfig+0xf0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d003      	beq.n	80028ee <TIM_OC1_SetConfig+0xa2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a15      	ldr	r2, [pc, #84]	; (8002940 <TIM_OC1_SetConfig+0xf4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d111      	bne.n	8002912 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	621a      	str	r2, [r3, #32]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	40012c00 	.word	0x40012c00
 800293c:	40014000 	.word	0x40014000
 8002940:	40014400 	.word	0x40014400

08002944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f023 0210 	bic.w	r2, r3, #16
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f023 0320 	bic.w	r3, r3, #32
 8002992:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a22      	ldr	r2, [pc, #136]	; (8002a2c <TIM_OC2_SetConfig+0xe8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10d      	bne.n	80029c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <TIM_OC2_SetConfig+0xe8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <TIM_OC2_SetConfig+0x98>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <TIM_OC2_SetConfig+0xec>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d003      	beq.n	80029dc <TIM_OC2_SetConfig+0x98>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <TIM_OC2_SetConfig+0xf0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d113      	bne.n	8002a04 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40012c00 	.word	0x40012c00
 8002a30:	40014000 	.word	0x40014000
 8002a34:	40014400 	.word	0x40014400

08002a38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <TIM_OC3_SetConfig+0xe4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <TIM_OC3_SetConfig+0xe4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_OC3_SetConfig+0x96>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a17      	ldr	r2, [pc, #92]	; (8002b20 <TIM_OC3_SetConfig+0xe8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_OC3_SetConfig+0x96>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <TIM_OC3_SetConfig+0xec>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d113      	bne.n	8002af6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	621a      	str	r2, [r3, #32]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40012c00 	.word	0x40012c00
 8002b20:	40014000 	.word	0x40014000
 8002b24:	40014400 	.word	0x40014400

08002b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	031b      	lsls	r3, r3, #12
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <TIM_OC4_SetConfig+0xb0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_OC4_SetConfig+0x74>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <TIM_OC4_SetConfig+0xb4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_OC4_SetConfig+0x74>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <TIM_OC4_SetConfig+0xb8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d109      	bne.n	8002bb0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	621a      	str	r2, [r3, #32]
}
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40014400 	.word	0x40014400

08002be4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <TIM_OC5_SetConfig+0xa4>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d007      	beq.n	8002c4e <TIM_OC5_SetConfig+0x6a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <TIM_OC5_SetConfig+0xa8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_OC5_SetConfig+0x6a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a11      	ldr	r2, [pc, #68]	; (8002c90 <TIM_OC5_SetConfig+0xac>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d109      	bne.n	8002c62 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	40014400 	.word	0x40014400

08002c94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	051b      	lsls	r3, r3, #20
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <TIM_OC6_SetConfig+0xa8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d007      	beq.n	8002d00 <TIM_OC6_SetConfig+0x6c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <TIM_OC6_SetConfig+0xac>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_OC6_SetConfig+0x6c>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <TIM_OC6_SetConfig+0xb0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d109      	bne.n	8002d14 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	029b      	lsls	r3, r3, #10
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	621a      	str	r2, [r3, #32]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40012c00 	.word	0x40012c00
 8002d40:	40014000 	.word	0x40014000
 8002d44:	40014400 	.word	0x40014400

08002d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 030a 	bic.w	r3, r3, #10
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b087      	sub	sp, #28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f023 0210 	bic.w	r2, r3, #16
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e04f      	b.n	8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d108      	bne.n	8002ed0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ec4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efc:	d004      	beq.n	8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d10c      	bne.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	40012c00 	.word	0x40012c00
 8002f44:	40014000 	.word	0x40014000

08002f48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e060      	b.n	8003026 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	041b      	lsls	r3, r3, #16
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	; (8003034 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d115      	bne.n	8003014 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	051b      	lsls	r3, r3, #20
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4313      	orrs	r3, r2
 8003012:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00

08003038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e040      	b.n	80030cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fcea 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0201 	bic.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f82c 	bl	80030d4 <UART_SetConfig>
 800307c:	4603      	mov	r3, r0
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e022      	b.n	80030cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 fa7a 	bl	8003588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fb01 	bl	80036cc <UART_CheckIdleState>
 80030ca:	4603      	mov	r3, r0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b08a      	sub	sp, #40	; 0x28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b9e      	ldr	r3, [pc, #632]	; (800337c <UART_SetConfig+0x2a8>)
 8003104:	4013      	ands	r3, r2
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800310c:	430b      	orrs	r3, r1
 800310e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a93      	ldr	r2, [pc, #588]	; (8003380 <UART_SetConfig+0x2ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313c:	4313      	orrs	r3, r2
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a8a      	ldr	r2, [pc, #552]	; (8003384 <UART_SetConfig+0x2b0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d126      	bne.n	80031ac <UART_SetConfig+0xd8>
 800315e:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <UART_SetConfig+0x2b4>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b03      	cmp	r3, #3
 800316a:	d81b      	bhi.n	80031a4 <UART_SetConfig+0xd0>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <UART_SetConfig+0xa0>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	08003185 	.word	0x08003185
 8003178:	08003195 	.word	0x08003195
 800317c:	0800318d 	.word	0x0800318d
 8003180:	0800319d 	.word	0x0800319d
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800318a:	e0ab      	b.n	80032e4 <UART_SetConfig+0x210>
 800318c:	2302      	movs	r3, #2
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003192:	e0a7      	b.n	80032e4 <UART_SetConfig+0x210>
 8003194:	2304      	movs	r3, #4
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e0a3      	b.n	80032e4 <UART_SetConfig+0x210>
 800319c:	2308      	movs	r3, #8
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e09f      	b.n	80032e4 <UART_SetConfig+0x210>
 80031a4:	2310      	movs	r3, #16
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e09b      	b.n	80032e4 <UART_SetConfig+0x210>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a76      	ldr	r2, [pc, #472]	; (800338c <UART_SetConfig+0x2b8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d138      	bne.n	8003228 <UART_SetConfig+0x154>
 80031b6:	4b74      	ldr	r3, [pc, #464]	; (8003388 <UART_SetConfig+0x2b4>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d82d      	bhi.n	8003220 <UART_SetConfig+0x14c>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <UART_SetConfig+0xf8>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003221 	.word	0x08003221
 80031d4:	08003221 	.word	0x08003221
 80031d8:	08003221 	.word	0x08003221
 80031dc:	08003211 	.word	0x08003211
 80031e0:	08003221 	.word	0x08003221
 80031e4:	08003221 	.word	0x08003221
 80031e8:	08003221 	.word	0x08003221
 80031ec:	08003209 	.word	0x08003209
 80031f0:	08003221 	.word	0x08003221
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003219 	.word	0x08003219
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003206:	e06d      	b.n	80032e4 <UART_SetConfig+0x210>
 8003208:	2302      	movs	r3, #2
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320e:	e069      	b.n	80032e4 <UART_SetConfig+0x210>
 8003210:	2304      	movs	r3, #4
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003216:	e065      	b.n	80032e4 <UART_SetConfig+0x210>
 8003218:	2308      	movs	r3, #8
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800321e:	e061      	b.n	80032e4 <UART_SetConfig+0x210>
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003226:	e05d      	b.n	80032e4 <UART_SetConfig+0x210>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <UART_SetConfig+0x2bc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d125      	bne.n	800327e <UART_SetConfig+0x1aa>
 8003232:	4b55      	ldr	r3, [pc, #340]	; (8003388 <UART_SetConfig+0x2b4>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800323c:	2b30      	cmp	r3, #48	; 0x30
 800323e:	d016      	beq.n	800326e <UART_SetConfig+0x19a>
 8003240:	2b30      	cmp	r3, #48	; 0x30
 8003242:	d818      	bhi.n	8003276 <UART_SetConfig+0x1a2>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d00a      	beq.n	800325e <UART_SetConfig+0x18a>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d814      	bhi.n	8003276 <UART_SetConfig+0x1a2>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <UART_SetConfig+0x182>
 8003250:	2b10      	cmp	r3, #16
 8003252:	d008      	beq.n	8003266 <UART_SetConfig+0x192>
 8003254:	e00f      	b.n	8003276 <UART_SetConfig+0x1a2>
 8003256:	2300      	movs	r3, #0
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325c:	e042      	b.n	80032e4 <UART_SetConfig+0x210>
 800325e:	2302      	movs	r3, #2
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003264:	e03e      	b.n	80032e4 <UART_SetConfig+0x210>
 8003266:	2304      	movs	r3, #4
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326c:	e03a      	b.n	80032e4 <UART_SetConfig+0x210>
 800326e:	2308      	movs	r3, #8
 8003270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003274:	e036      	b.n	80032e4 <UART_SetConfig+0x210>
 8003276:	2310      	movs	r3, #16
 8003278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327c:	e032      	b.n	80032e4 <UART_SetConfig+0x210>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3f      	ldr	r2, [pc, #252]	; (8003380 <UART_SetConfig+0x2ac>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d12a      	bne.n	80032de <UART_SetConfig+0x20a>
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <UART_SetConfig+0x2b4>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003292:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003296:	d01a      	beq.n	80032ce <UART_SetConfig+0x1fa>
 8003298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800329c:	d81b      	bhi.n	80032d6 <UART_SetConfig+0x202>
 800329e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a2:	d00c      	beq.n	80032be <UART_SetConfig+0x1ea>
 80032a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032a8:	d815      	bhi.n	80032d6 <UART_SetConfig+0x202>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <UART_SetConfig+0x1e2>
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b2:	d008      	beq.n	80032c6 <UART_SetConfig+0x1f2>
 80032b4:	e00f      	b.n	80032d6 <UART_SetConfig+0x202>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032bc:	e012      	b.n	80032e4 <UART_SetConfig+0x210>
 80032be:	2302      	movs	r3, #2
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c4:	e00e      	b.n	80032e4 <UART_SetConfig+0x210>
 80032c6:	2304      	movs	r3, #4
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032cc:	e00a      	b.n	80032e4 <UART_SetConfig+0x210>
 80032ce:	2308      	movs	r3, #8
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d4:	e006      	b.n	80032e4 <UART_SetConfig+0x210>
 80032d6:	2310      	movs	r3, #16
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032dc:	e002      	b.n	80032e4 <UART_SetConfig+0x210>
 80032de:	2310      	movs	r3, #16
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	; (8003380 <UART_SetConfig+0x2ac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	f040 808a 	bne.w	8003404 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d824      	bhi.n	8003342 <UART_SetConfig+0x26e>
 80032f8:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <UART_SetConfig+0x22c>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003325 	.word	0x08003325
 8003304:	08003343 	.word	0x08003343
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003343 	.word	0x08003343
 8003310:	08003333 	.word	0x08003333
 8003314:	08003343 	.word	0x08003343
 8003318:	08003343 	.word	0x08003343
 800331c:	08003343 	.word	0x08003343
 8003320:	0800333b 	.word	0x0800333b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe fd86 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8003328:	61f8      	str	r0, [r7, #28]
        break;
 800332a:	e010      	b.n	800334e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <UART_SetConfig+0x2c0>)
 800332e:	61fb      	str	r3, [r7, #28]
        break;
 8003330:	e00d      	b.n	800334e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003332:	f7fe fce7 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8003336:	61f8      	str	r0, [r7, #28]
        break;
 8003338:	e009      	b.n	800334e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800333e:	61fb      	str	r3, [r7, #28]
        break;
 8003340:	e005      	b.n	800334e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800334c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8109 	beq.w	8003568 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	429a      	cmp	r2, r3
 8003364:	d305      	bcc.n	8003372 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	429a      	cmp	r2, r3
 8003370:	d912      	bls.n	8003398 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003378:	e0f6      	b.n	8003568 <UART_SetConfig+0x494>
 800337a:	bf00      	nop
 800337c:	efff69f3 	.word	0xefff69f3
 8003380:	40008000 	.word	0x40008000
 8003384:	40013800 	.word	0x40013800
 8003388:	40021000 	.word	0x40021000
 800338c:	40004400 	.word	0x40004400
 8003390:	40004800 	.word	0x40004800
 8003394:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2200      	movs	r2, #0
 800339c:	461c      	mov	r4, r3
 800339e:	4615      	mov	r5, r2
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	022b      	lsls	r3, r5, #8
 80033aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033ae:	0222      	lsls	r2, r4, #8
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	6849      	ldr	r1, [r1, #4]
 80033b4:	0849      	lsrs	r1, r1, #1
 80033b6:	2000      	movs	r0, #0
 80033b8:	4688      	mov	r8, r1
 80033ba:	4681      	mov	r9, r0
 80033bc:	eb12 0a08 	adds.w	sl, r2, r8
 80033c0:	eb43 0b09 	adc.w	fp, r3, r9
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d2:	4650      	mov	r0, sl
 80033d4:	4659      	mov	r1, fp
 80033d6:	f7fc fef9 	bl	80001cc <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4613      	mov	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e8:	d308      	bcc.n	80033fc <UART_SetConfig+0x328>
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f0:	d204      	bcs.n	80033fc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e0b5      	b.n	8003568 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003402:	e0b1      	b.n	8003568 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340c:	d15d      	bne.n	80034ca <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800340e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003412:	2b08      	cmp	r3, #8
 8003414:	d827      	bhi.n	8003466 <UART_SetConfig+0x392>
 8003416:	a201      	add	r2, pc, #4	; (adr r2, 800341c <UART_SetConfig+0x348>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7fe fcf8 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8003444:	61f8      	str	r0, [r7, #28]
        break;
 8003446:	e014      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7fe fd0a 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 800344c:	61f8      	str	r0, [r7, #28]
        break;
 800344e:	e010      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <UART_SetConfig+0x4b0>)
 8003452:	61fb      	str	r3, [r7, #28]
        break;
 8003454:	e00d      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7fe fc55 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 800345a:	61f8      	str	r0, [r7, #28]
        break;
 800345c:	e009      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003462:	61fb      	str	r3, [r7, #28]
        break;
 8003464:	e005      	b.n	8003472 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d077      	beq.n	8003568 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005a      	lsls	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	441a      	add	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d916      	bls.n	80034c2 <UART_SetConfig+0x3ee>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349a:	d212      	bcs.n	80034c2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f023 030f 	bic.w	r3, r3, #15
 80034a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	8afb      	ldrh	r3, [r7, #22]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	8afa      	ldrh	r2, [r7, #22]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	e052      	b.n	8003568 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034c8:	e04e      	b.n	8003568 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d827      	bhi.n	8003522 <UART_SetConfig+0x44e>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <UART_SetConfig+0x404>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	08003505 	.word	0x08003505
 80034e0:	0800350d 	.word	0x0800350d
 80034e4:	08003523 	.word	0x08003523
 80034e8:	08003513 	.word	0x08003513
 80034ec:	08003523 	.word	0x08003523
 80034f0:	08003523 	.word	0x08003523
 80034f4:	08003523 	.word	0x08003523
 80034f8:	0800351b 	.word	0x0800351b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7fe fc9a 	bl	8001e34 <HAL_RCC_GetPCLK1Freq>
 8003500:	61f8      	str	r0, [r7, #28]
        break;
 8003502:	e014      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003504:	f7fe fcac 	bl	8001e60 <HAL_RCC_GetPCLK2Freq>
 8003508:	61f8      	str	r0, [r7, #28]
        break;
 800350a:	e010      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800350c:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <UART_SetConfig+0x4b0>)
 800350e:	61fb      	str	r3, [r7, #28]
        break;
 8003510:	e00d      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003512:	f7fe fbf7 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8003516:	61f8      	str	r0, [r7, #28]
        break;
 8003518:	e009      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351e:	61fb      	str	r3, [r7, #28]
        break;
 8003520:	e005      	b.n	800352e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800352c:	bf00      	nop
    }

    if (pclk != 0U)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d019      	beq.n	8003568 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	085a      	lsrs	r2, r3, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	441a      	add	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d909      	bls.n	8003562 <UART_SetConfig+0x48e>
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d205      	bcs.n	8003562 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e002      	b.n	8003568 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003574:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	00f42400 	.word	0x00f42400

08003588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01a      	beq.n	800369e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003686:	d10a      	bne.n	800369e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036dc:	f7fd fad0 	bl	8000c80 <HAL_GetTick>
 80036e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d10e      	bne.n	800370e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f82d 	bl	800375e <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e023      	b.n	8003756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b04      	cmp	r3, #4
 800371a:	d10e      	bne.n	800373a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800371c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f817 	bl	800375e <UART_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e00d      	b.n	8003756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b09c      	sub	sp, #112	; 0x70
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	603b      	str	r3, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376e:	e0a5      	b.n	80038bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003770:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	f000 80a1 	beq.w	80038bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fd fa81 	bl	8000c80 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <UART_WaitOnFlagUntilTimeout+0x32>
 800378a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800378c:	2b00      	cmp	r3, #0
 800378e:	d13e      	bne.n	800380e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800379e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a4:	667b      	str	r3, [r7, #100]	; 0x64
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e6      	bne.n	8003790 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3308      	adds	r3, #8
 80037c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	663b      	str	r3, [r7, #96]	; 0x60
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3308      	adds	r3, #8
 80037e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80037e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e5      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2220      	movs	r2, #32
 80037fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e067      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d04f      	beq.n	80038bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382a:	d147      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003834:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800384a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
 8003856:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800385a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e6      	bne.n	8003836 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3308      	adds	r3, #8
 800386e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	613b      	str	r3, [r7, #16]
   return(result);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3308      	adds	r3, #8
 8003886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003888:	623a      	str	r2, [r7, #32]
 800388a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	69f9      	ldr	r1, [r7, #28]
 800388e:	6a3a      	ldr	r2, [r7, #32]
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	61bb      	str	r3, [r7, #24]
   return(result);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e5      	bne.n	8003868 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e010      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4013      	ands	r3, r2
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	461a      	mov	r2, r3
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	f43f af4a 	beq.w	8003770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3770      	adds	r7, #112	; 0x70
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <__libc_init_array>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	4d0d      	ldr	r5, [pc, #52]	; (8003920 <__libc_init_array+0x38>)
 80038ec:	4c0d      	ldr	r4, [pc, #52]	; (8003924 <__libc_init_array+0x3c>)
 80038ee:	1b64      	subs	r4, r4, r5
 80038f0:	10a4      	asrs	r4, r4, #2
 80038f2:	2600      	movs	r6, #0
 80038f4:	42a6      	cmp	r6, r4
 80038f6:	d109      	bne.n	800390c <__libc_init_array+0x24>
 80038f8:	4d0b      	ldr	r5, [pc, #44]	; (8003928 <__libc_init_array+0x40>)
 80038fa:	4c0c      	ldr	r4, [pc, #48]	; (800392c <__libc_init_array+0x44>)
 80038fc:	f000 f820 	bl	8003940 <_init>
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	2600      	movs	r6, #0
 8003906:	42a6      	cmp	r6, r4
 8003908:	d105      	bne.n	8003916 <__libc_init_array+0x2e>
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003910:	4798      	blx	r3
 8003912:	3601      	adds	r6, #1
 8003914:	e7ee      	b.n	80038f4 <__libc_init_array+0xc>
 8003916:	f855 3b04 	ldr.w	r3, [r5], #4
 800391a:	4798      	blx	r3
 800391c:	3601      	adds	r6, #1
 800391e:	e7f2      	b.n	8003906 <__libc_init_array+0x1e>
 8003920:	080039a8 	.word	0x080039a8
 8003924:	080039a8 	.word	0x080039a8
 8003928:	080039a8 	.word	0x080039a8
 800392c:	080039ac 	.word	0x080039ac

08003930 <memset>:
 8003930:	4402      	add	r2, r0
 8003932:	4603      	mov	r3, r0
 8003934:	4293      	cmp	r3, r2
 8003936:	d100      	bne.n	800393a <memset+0xa>
 8003938:	4770      	bx	lr
 800393a:	f803 1b01 	strb.w	r1, [r3], #1
 800393e:	e7f9      	b.n	8003934 <memset+0x4>

08003940 <_init>:
 8003940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003942:	bf00      	nop
 8003944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003946:	bc08      	pop	{r3}
 8003948:	469e      	mov	lr, r3
 800394a:	4770      	bx	lr

0800394c <_fini>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	bf00      	nop
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr
