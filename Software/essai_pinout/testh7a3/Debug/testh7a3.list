
testh7a3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e4  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  080036a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  24000010  080036b8  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000c8  080036b8  000200c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cac5  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001834  00000000  00000000  0002cb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000bd8  00000000  00000000  0002e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000b20  00000000  00000000  0002ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002eca6  00000000  00000000  0002fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000ce91  00000000  00000000  0005e6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001361a2  00000000  00000000  0006b567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001a1709  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003194  00000000  00000000  001a175c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08003678 	.word	0x08003678

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	08003678 	.word	0x08003678

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002f0:	f000 fa86 	bl	8000800 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fc3a 	bl	8000b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f86c 	bl	80003d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 fa1c 	bl	8000738 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000300:	f000 f8de 	bl	80004c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000304:	f000 f9a0 	bl	8000648 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000308:	482e      	ldr	r0, [pc, #184]	; (80003c4 <main+0xd8>)
 800030a:	f002 f83b 	bl	8002384 <HAL_TIM_Base_Start>
  //test moteur
  /*HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); 		//pas de signal observé sur oscillateur
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 900);*/
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);			//validé sur oscillateur
 800030e:	2104      	movs	r1, #4
 8000310:	482c      	ldr	r0, [pc, #176]	; (80003c4 <main+0xd8>)
 8000312:	f002 f909 	bl	8002528 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);//calibration
 8000316:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <main+0xd8>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800031e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(2000);
 8000320:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000324:	f000 fcb4 	bl	8000c90 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <main+0xd8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(1000);
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f000 fcac 	bl	8000c90 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 500);
 8000338:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <main+0xd8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000340:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);			//validé sur oscillateur
 8000342:	2108      	movs	r1, #8
 8000344:	481f      	ldr	r0, [pc, #124]	; (80003c4 <main+0xd8>)
 8000346:	f002 f8ef 	bl	8002528 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 800034a:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <main+0xd8>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000352:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(2000);
 8000354:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000358:	f000 fc9a 	bl	8000c90 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800035c:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <main+0xd8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_Delay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000368:	f000 fc92 	bl	8000c90 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 500);
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <main+0xd8>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000374:	63da      	str	r2, [r3, #60]	; 0x3c

  //test génération PWM sur LED
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000376:	2108      	movs	r1, #8
 8000378:	4813      	ldr	r0, [pc, #76]	; (80003c8 <main+0xdc>)
 800037a:	f002 f8d5 	bl	8002528 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 400);
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <main+0xdc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000386:	63da      	str	r2, [r3, #60]	; 0x3c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //test bouton
	  if(bouton == GPIO_PIN_SET){
 8000388:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038c:	480f      	ldr	r0, [pc, #60]	; (80003cc <main+0xe0>)
 800038e:	f000 ffb3 	bl	80012f8 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b01      	cmp	r3, #1
 8000396:	d109      	bne.n	80003ac <main+0xc0>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800039e:	480c      	ldr	r0, [pc, #48]	; (80003d0 <main+0xe4>)
 80003a0:	f000 ffc2 	bl	8001328 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 80003a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003a8:	f000 fc72 	bl	8000c90 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003b2:	4807      	ldr	r0, [pc, #28]	; (80003d0 <main+0xe4>)
 80003b4:	f000 ffb8 	bl	8001328 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80003b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003bc:	f000 fc68 	bl	8000c90 <HAL_Delay>
	  if(bouton == GPIO_PIN_SET){
 80003c0:	e7e2      	b.n	8000388 <main+0x9c>
 80003c2:	bf00      	nop
 80003c4:	2400002c 	.word	0x2400002c
 80003c8:	24000078 	.word	0x24000078
 80003cc:	58020800 	.word	0x58020800
 80003d0:	58020400 	.word	0x58020400

080003d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09c      	sub	sp, #112	; 0x70
 80003d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003de:	224c      	movs	r2, #76	; 0x4c
 80003e0:	2100      	movs	r1, #0
 80003e2:	4618      	mov	r0, r3
 80003e4:	f003 f940 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2220      	movs	r2, #32
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 f93a 	bl	8003668 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <SystemClock_Config+0xe4>)
 80003f6:	f04f 32ff 	mov.w	r2, #4294967295
 80003fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80003fe:	2004      	movs	r0, #4
 8000400:	f000 ffac 	bl	800135c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000404:	2300      	movs	r3, #0
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <SystemClock_Config+0xe8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a2b      	ldr	r2, [pc, #172]	; (80004bc <SystemClock_Config+0xe8>)
 800040e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b29      	ldr	r3, [pc, #164]	; (80004bc <SystemClock_Config+0xe8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800041c:	603b      	str	r3, [r7, #0]
 800041e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000420:	bf00      	nop
 8000422:	4b26      	ldr	r3, [pc, #152]	; (80004bc <SystemClock_Config+0xe8>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800042a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800042e:	d1f8      	bne.n	8000422 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000430:	2302      	movs	r3, #2
 8000432:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000434:	2301      	movs	r3, #1
 8000436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000438:	2340      	movs	r3, #64	; 0x40
 800043a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043c:	2302      	movs	r3, #2
 800043e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000440:	2300      	movs	r3, #0
 8000442:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000444:	2304      	movs	r3, #4
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000448:	230a      	movs	r3, #10
 800044a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800044c:	2302      	movs	r3, #2
 800044e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000450:	2302      	movs	r3, #2
 8000452:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000454:	2302      	movs	r3, #2
 8000456:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000458:	230c      	movs	r3, #12
 800045a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800045c:	2300      	movs	r3, #0
 800045e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000460:	2300      	movs	r3, #0
 8000462:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000468:	4618      	mov	r0, r3
 800046a:	f000 ffd1 	bl	8001410 <HAL_RCC_OscConfig>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000474:	f000 f9f0 	bl	8000858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000478:	233f      	movs	r3, #63	; 0x3f
 800047a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047c:	2303      	movs	r3, #3
 800047e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800048c:	2340      	movs	r3, #64	; 0x40
 800048e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000494:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000496:	2340      	movs	r3, #64	; 0x40
 8000498:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2103      	movs	r1, #3
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 fbe8 	bl	8001c74 <HAL_RCC_ClockConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xda>
  {
    Error_Handler();
 80004aa:	f000 f9d5 	bl	8000858 <Error_Handler>
  }
}
 80004ae:	bf00      	nop
 80004b0:	3770      	adds	r7, #112	; 0x70
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	58024400 	.word	0x58024400
 80004bc:	58024800 	.word	0x58024800

080004c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b09c      	sub	sp, #112	; 0x70
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
 80004f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2234      	movs	r2, #52	; 0x34
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 f8b4 	bl	8003668 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000500:	4b4f      	ldr	r3, [pc, #316]	; (8000640 <MX_TIM1_Init+0x180>)
 8000502:	4a50      	ldr	r2, [pc, #320]	; (8000644 <MX_TIM1_Init+0x184>)
 8000504:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8000506:	4b4e      	ldr	r3, [pc, #312]	; (8000640 <MX_TIM1_Init+0x180>)
 8000508:	2209      	movs	r2, #9
 800050a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050c:	4b4c      	ldr	r3, [pc, #304]	; (8000640 <MX_TIM1_Init+0x180>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000512:	4b4b      	ldr	r3, [pc, #300]	; (8000640 <MX_TIM1_Init+0x180>)
 8000514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000518:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051a:	4b49      	ldr	r3, [pc, #292]	; (8000640 <MX_TIM1_Init+0x180>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000520:	4b47      	ldr	r3, [pc, #284]	; (8000640 <MX_TIM1_Init+0x180>)
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000526:	4b46      	ldr	r3, [pc, #280]	; (8000640 <MX_TIM1_Init+0x180>)
 8000528:	2280      	movs	r2, #128	; 0x80
 800052a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800052c:	4844      	ldr	r0, [pc, #272]	; (8000640 <MX_TIM1_Init+0x180>)
 800052e:	f001 fed1 	bl	80022d4 <HAL_TIM_Base_Init>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000538:	f000 f98e 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000540:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000542:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000546:	4619      	mov	r1, r3
 8000548:	483d      	ldr	r0, [pc, #244]	; (8000640 <MX_TIM1_Init+0x180>)
 800054a:	f002 fa0f 	bl	800296c <HAL_TIM_ConfigClockSource>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000554:	f000 f980 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000558:	4839      	ldr	r0, [pc, #228]	; (8000640 <MX_TIM1_Init+0x180>)
 800055a:	f001 ff83 	bl	8002464 <HAL_TIM_PWM_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000564:	f000 f978 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000568:	2300      	movs	r3, #0
 800056a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800056c:	2300      	movs	r3, #0
 800056e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000574:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000578:	4619      	mov	r1, r3
 800057a:	4831      	ldr	r0, [pc, #196]	; (8000640 <MX_TIM1_Init+0x180>)
 800057c:	f002 ff22 	bl	80033c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000586:	f000 f967 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800058a:	2360      	movs	r3, #96	; 0x60
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000592:	2300      	movs	r3, #0
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000596:	2300      	movs	r3, #0
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059a:	2300      	movs	r3, #0
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800059e:	2300      	movs	r3, #0
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005a2:	2300      	movs	r3, #0
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005aa:	2200      	movs	r2, #0
 80005ac:	4619      	mov	r1, r3
 80005ae:	4824      	ldr	r0, [pc, #144]	; (8000640 <MX_TIM1_Init+0x180>)
 80005b0:	f002 f8c8 	bl	8002744 <HAL_TIM_PWM_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80005ba:	f000 f94d 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c2:	2204      	movs	r2, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <MX_TIM1_Init+0x180>)
 80005c8:	f002 f8bc 	bl	8002744 <HAL_TIM_PWM_ConfigChannel>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80005d2:	f000 f941 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005da:	2208      	movs	r2, #8
 80005dc:	4619      	mov	r1, r3
 80005de:	4818      	ldr	r0, [pc, #96]	; (8000640 <MX_TIM1_Init+0x180>)
 80005e0:	f002 f8b0 	bl	8002744 <HAL_TIM_PWM_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80005ea:	f000 f935 	bl	8000858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000614:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800061a:	2300      	movs	r3, #0
 800061c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4619      	mov	r1, r3
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <MX_TIM1_Init+0x180>)
 8000624:	f002 ff5c 	bl	80034e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800062e:	f000 f913 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <MX_TIM1_Init+0x180>)
 8000634:	f000 f96a 	bl	800090c <HAL_TIM_MspPostInit>

}
 8000638:	bf00      	nop
 800063a:	3770      	adds	r7, #112	; 0x70
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2400002c 	.word	0x2400002c
 8000644:	40010000 	.word	0x40010000

08000648 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08e      	sub	sp, #56	; 0x38
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800064e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <MX_TIM3_Init+0xe8>)
 800067c:	4a2d      	ldr	r2, [pc, #180]	; (8000734 <MX_TIM3_Init+0xec>)
 800067e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000680:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <MX_TIM3_Init+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <MX_TIM3_Init+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <MX_TIM3_Init+0xe8>)
 800068e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000692:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <MX_TIM3_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <MX_TIM3_Init+0xe8>)
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006a0:	4823      	ldr	r0, [pc, #140]	; (8000730 <MX_TIM3_Init+0xe8>)
 80006a2:	f001 fe17 	bl	80022d4 <HAL_TIM_Base_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80006ac:	f000 f8d4 	bl	8000858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ba:	4619      	mov	r1, r3
 80006bc:	481c      	ldr	r0, [pc, #112]	; (8000730 <MX_TIM3_Init+0xe8>)
 80006be:	f002 f955 	bl	800296c <HAL_TIM_ConfigClockSource>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80006c8:	f000 f8c6 	bl	8000858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006cc:	4818      	ldr	r0, [pc, #96]	; (8000730 <MX_TIM3_Init+0xe8>)
 80006ce:	f001 fec9 	bl	8002464 <HAL_TIM_PWM_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80006d8:	f000 f8be 	bl	8000858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4811      	ldr	r0, [pc, #68]	; (8000730 <MX_TIM3_Init+0xe8>)
 80006ec:	f002 fe6a 	bl	80033c4 <HAL_TIMEx_MasterConfigSynchronization>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80006f6:	f000 f8af 	bl	8000858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006fa:	2360      	movs	r3, #96	; 0x60
 80006fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	2208      	movs	r2, #8
 800070e:	4619      	mov	r1, r3
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <MX_TIM3_Init+0xe8>)
 8000712:	f002 f817 	bl	8002744 <HAL_TIM_PWM_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800071c:	f000 f89c 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <MX_TIM3_Init+0xe8>)
 8000722:	f000 f8f3 	bl	800090c <HAL_TIM_MspPostInit>

}
 8000726:	bf00      	nop
 8000728:	3738      	adds	r7, #56	; 0x38
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	24000078 	.word	0x24000078
 8000734:	40000400 	.word	0x40000400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xbc>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	4a27      	ldr	r2, [pc, #156]	; (80007f4 <MX_GPIO_Init+0xbc>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xbc>)
 8000760:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000764:	f003 0304 	and.w	r3, r3, #4
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <MX_GPIO_Init+0xbc>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	4a20      	ldr	r2, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xbc>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_GPIO_Init+0xbc>)
 800077e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_GPIO_Init+0xbc>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_GPIO_Init+0xbc>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800079a:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_GPIO_Init+0xbc>)
 800079c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4812      	ldr	r0, [pc, #72]	; (80007f8 <MX_GPIO_Init+0xc0>)
 80007b0:	f000 fdba 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <MX_GPIO_Init+0xc4>)
 80007ca:	f000 fbe5 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80007ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0xc0>)
 80007e8:	f000 fbd6 	bl	8000f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58024400 	.word	0x58024400
 80007f8:	58020400 	.word	0x58020400
 80007fc:	58020800 	.word	0x58020800

08000800 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000812:	f000 fb45 	bl	8000ea0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000816:	2301      	movs	r3, #1
 8000818:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800081a:	2300      	movs	r3, #0
 800081c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000822:	231f      	movs	r3, #31
 8000824:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000826:	2387      	movs	r3, #135	; 0x87
 8000828:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800082a:	2300      	movs	r3, #0
 800082c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800082e:	2300      	movs	r3, #0
 8000830:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000832:	2301      	movs	r3, #1
 8000834:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000836:	2301      	movs	r3, #1
 8000838:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000842:	463b      	mov	r3, r7
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fb63 	bl	8000f10 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800084a:	2004      	movs	r0, #4
 800084c:	f000 fb40 	bl	8000ed0 <HAL_MPU_Enable>

}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_MspInit+0x30>)
 800086c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x30>)
 8000872:	f043 0302 	orr.w	r3, r3, #2
 8000876:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x30>)
 800087c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	58024400 	.word	0x58024400

08000898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a16      	ldr	r2, [pc, #88]	; (8000900 <HAL_TIM_Base_MspInit+0x68>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10f      	bne.n	80008ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_TIM_Base_MspInit+0x6c>)
 80008ac:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <HAL_TIM_Base_MspInit+0x6c>)
 80008b2:	f043 0301 	orr.w	r3, r3, #1
 80008b6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_TIM_Base_MspInit+0x6c>)
 80008bc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80008c0:	f003 0301 	and.w	r3, r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80008c8:	e013      	b.n	80008f2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a0e      	ldr	r2, [pc, #56]	; (8000908 <HAL_TIM_Base_MspInit+0x70>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d10e      	bne.n	80008f2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_TIM_Base_MspInit+0x6c>)
 80008d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_TIM_Base_MspInit+0x6c>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_TIM_Base_MspInit+0x6c>)
 80008e6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
}
 80008f2:	bf00      	nop
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40010000 	.word	0x40010000
 8000904:	58024400 	.word	0x58024400
 8000908:	40000400 	.word	0x40000400

0800090c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a25      	ldr	r2, [pc, #148]	; (80009c0 <HAL_TIM_MspPostInit+0xb4>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d120      	bne.n	8000970 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800092e:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <HAL_TIM_MspPostInit+0xb8>)
 8000930:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <HAL_TIM_MspPostInit+0xb8>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_TIM_MspPostInit+0xb8>)
 8000940:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000944:	f003 0310 	and.w	r3, r3, #16
 8000948:	613b      	str	r3, [r7, #16]
 800094a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800094c:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800095e:	2301      	movs	r3, #1
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4817      	ldr	r0, [pc, #92]	; (80009c8 <HAL_TIM_MspPostInit+0xbc>)
 800096a:	f000 fb15 	bl	8000f98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800096e:	e023      	b.n	80009b8 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a15      	ldr	r2, [pc, #84]	; (80009cc <HAL_TIM_MspPostInit+0xc0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d11e      	bne.n	80009b8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_TIM_MspPostInit+0xb8>)
 800097c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000980:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_TIM_MspPostInit+0xb8>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_TIM_MspPostInit+0xb8>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000998:	2301      	movs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009a8:	2302      	movs	r3, #2
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <HAL_TIM_MspPostInit+0xc4>)
 80009b4:	f000 faf0 	bl	8000f98 <HAL_GPIO_Init>
}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40010000 	.word	0x40010000
 80009c4:	58024400 	.word	0x58024400
 80009c8:	58021000 	.word	0x58021000
 80009cc:	40000400 	.word	0x40000400
 80009d0:	58020400 	.word	0x58020400

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a20:	f000 f916 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <SystemInit+0xd0>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <SystemInit+0xd0>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a3c:	4b2f      	ldr	r3, [pc, #188]	; (8000afc <SystemInit+0xd4>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f003 030f 	and.w	r3, r3, #15
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d807      	bhi.n	8000a58 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a48:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <SystemInit+0xd4>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f023 030f 	bic.w	r3, r3, #15
 8000a50:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <SystemInit+0xd4>)
 8000a52:	f043 0303 	orr.w	r3, r3, #3
 8000a56:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a58:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <SystemInit+0xd8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <SystemInit+0xd8>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a64:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <SystemInit+0xd8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <SystemInit+0xd8>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	4924      	ldr	r1, [pc, #144]	; (8000b00 <SystemInit+0xd8>)
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <SystemInit+0xdc>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <SystemInit+0xd4>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 030c 	and.w	r3, r3, #12
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d007      	beq.n	8000a92 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <SystemInit+0xd4>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f023 030f 	bic.w	r3, r3, #15
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <SystemInit+0xd4>)
 8000a8c:	f043 0303 	orr.w	r3, r3, #3
 8000a90:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <SystemInit+0xd8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <SystemInit+0xd8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <SystemInit+0xd8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <SystemInit+0xd8>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	; (8000b08 <SystemInit+0xe0>)
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <SystemInit+0xd8>)
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <SystemInit+0xe4>)
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <SystemInit+0xd8>)
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <SystemInit+0xe8>)
 8000ab4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <SystemInit+0xd8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <SystemInit+0xd8>)
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <SystemInit+0xe8>)
 8000ac0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <SystemInit+0xd8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <SystemInit+0xd8>)
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <SystemInit+0xe8>)
 8000acc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <SystemInit+0xd8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <SystemInit+0xd8>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <SystemInit+0xd8>)
 8000ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ade:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <SystemInit+0xd8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <SystemInit+0xec>)
 8000ae8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000aec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00
 8000afc:	52002000 	.word	0x52002000
 8000b00:	58024400 	.word	0x58024400
 8000b04:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b08:	02020200 	.word	0x02020200
 8000b0c:	01ff0000 	.word	0x01ff0000
 8000b10:	01010280 	.word	0x01010280
 8000b14:	52004000 	.word	0x52004000

08000b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b1c:	f7ff ff84 	bl	8000a28 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b46:	f002 fd6b 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4a:	f7ff fbcf 	bl	80002ec <main>
  bx  lr
 8000b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b50:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000b54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b58:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b5c:	080036a8 	.word	0x080036a8
  ldr r2, =_sbss
 8000b60:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b64:	240000c8 	.word	0x240000c8

08000b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f000 f962 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000b78:	f001 fa32 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_Init+0x68>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <HAL_Init+0x6c>)
 8000b8a:	5ccb      	ldrb	r3, [r1, r3]
 8000b8c:	f003 031f 	and.w	r3, r3, #31
 8000b90:	fa22 f303 	lsr.w	r3, r2, r3
 8000b94:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_Init+0x68>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 030f 	and.w	r3, r3, #15
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_Init+0x6c>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	f003 031f 	and.w	r3, r3, #31
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bac:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <HAL_Init+0x70>)
 8000bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_Init+0x74>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f814 	bl	8000be4 <HAL_InitTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e002      	b.n	8000bcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc6:	f7ff fe4d 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	08003690 	.word	0x08003690
 8000bdc:	24000004 	.word	0x24000004
 8000be0:	24000000 	.word	0x24000000

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_InitTick+0x60>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d101      	bne.n	8000bf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e021      	b.n	8000c3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_InitTick+0x64>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_InitTick+0x60>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f939 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f911 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_InitTick+0x68>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	2400000c 	.word	0x2400000c
 8000c48:	24000000 	.word	0x24000000
 8000c4c:	24000008 	.word	0x24000008

08000c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x20>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x24>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <HAL_IncTick+0x24>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	2400000c 	.word	0x2400000c
 8000c74:	240000c4 	.word	0x240000c4

08000c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <HAL_GetTick+0x14>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	240000c4 	.word	0x240000c4

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff ffee 	bl	8000c78 <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffde 	bl	8000c78 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2400000c 	.word	0x2400000c

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <__NVIC_SetPriorityGrouping+0x40>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x40>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00
 8000d1c:	05fa0000 	.word	0x05fa0000

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff47 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff5e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff90 	bl	8000d90 <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5f 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffb2 	bl	8000df8 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ea4:	f3bf 8f5f 	dmb	sy
}
 8000ea8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <HAL_MPU_Disable+0x28>)
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <HAL_MPU_Disable+0x28>)
 8000eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_MPU_Disable+0x2c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00
 8000ecc:	e000ed90 	.word	0xe000ed90

08000ed0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_MPU_Enable+0x38>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_MPU_Enable+0x3c>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	4a09      	ldr	r2, [pc, #36]	; (8000f0c <HAL_MPU_Enable+0x3c>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eec:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000eee:	f3bf 8f4f 	dsb	sy
}
 8000ef2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ef4:	f3bf 8f6f 	isb	sy
}
 8000ef8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed90 	.word	0xe000ed90
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	785a      	ldrb	r2, [r3, #1]
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_MPU_ConfigRegion+0x84>)
 8000f1e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d029      	beq.n	8000f7c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000f28:	4a1a      	ldr	r2, [pc, #104]	; (8000f94 <HAL_MPU_ConfigRegion+0x84>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7b1b      	ldrb	r3, [r3, #12]
 8000f34:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7adb      	ldrb	r3, [r3, #11]
 8000f3a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a9b      	ldrb	r3, [r3, #10]
 8000f42:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7b5b      	ldrb	r3, [r3, #13]
 8000f4a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	7b9b      	ldrb	r3, [r3, #14]
 8000f52:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	7bdb      	ldrb	r3, [r3, #15]
 8000f5a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7a5b      	ldrb	r3, [r3, #9]
 8000f62:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	7a1b      	ldrb	r3, [r3, #8]
 8000f6a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f6c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f76:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f78:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000f7a:	e005      	b.n	8000f88 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_MPU_ConfigRegion+0x84>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_MPU_ConfigRegion+0x84>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000ed90 	.word	0xe000ed90

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fa6:	4b89      	ldr	r3, [pc, #548]	; (80011cc <HAL_GPIO_Init+0x234>)
 8000fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000faa:	e194      	b.n	80012d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8186 	beq.w	80012d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x44>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	69b9      	ldr	r1, [r7, #24]
 80010ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0203 	and.w	r2, r3, #3
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80e0 	beq.w	80012d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001112:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001116:	4a2e      	ldr	r2, [pc, #184]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001120:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <HAL_GPIO_Init+0x238>)
 8001122:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112e:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_GPIO_Init+0x23c>)
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	089b      	lsrs	r3, r3, #2
 8001134:	3302      	adds	r3, #2
 8001136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_GPIO_Init+0x240>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d052      	beq.n	8001200 <HAL_GPIO_Init+0x268>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a1f      	ldr	r2, [pc, #124]	; (80011dc <HAL_GPIO_Init+0x244>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d031      	beq.n	80011c6 <HAL_GPIO_Init+0x22e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_GPIO_Init+0x248>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d02b      	beq.n	80011c2 <HAL_GPIO_Init+0x22a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <HAL_GPIO_Init+0x24c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d025      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <HAL_GPIO_Init+0x250>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d01f      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_GPIO_Init+0x254>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d019      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <HAL_GPIO_Init+0x258>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d013      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <HAL_GPIO_Init+0x25c>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d00d      	beq.n	80011ae <HAL_GPIO_Init+0x216>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_GPIO_Init+0x260>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d007      	beq.n	80011aa <HAL_GPIO_Init+0x212>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <HAL_GPIO_Init+0x264>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <HAL_GPIO_Init+0x20e>
 80011a2:	2309      	movs	r3, #9
 80011a4:	e02d      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011a6:	230a      	movs	r3, #10
 80011a8:	e02b      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011aa:	2308      	movs	r3, #8
 80011ac:	e029      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e027      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e025      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011b6:	2305      	movs	r3, #5
 80011b8:	e023      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ba:	2304      	movs	r3, #4
 80011bc:	e021      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011be:	2303      	movs	r3, #3
 80011c0:	e01f      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e01d      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011c6:	2301      	movs	r3, #1
 80011c8:	e01b      	b.n	8001202 <HAL_GPIO_Init+0x26a>
 80011ca:	bf00      	nop
 80011cc:	58000080 	.word	0x58000080
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58000400 	.word	0x58000400
 80011d8:	58020000 	.word	0x58020000
 80011dc:	58020400 	.word	0x58020400
 80011e0:	58020800 	.word	0x58020800
 80011e4:	58020c00 	.word	0x58020c00
 80011e8:	58021000 	.word	0x58021000
 80011ec:	58021400 	.word	0x58021400
 80011f0:	58021800 	.word	0x58021800
 80011f4:	58021c00 	.word	0x58021c00
 80011f8:	58022000 	.word	0x58022000
 80011fc:	58022400 	.word	0x58022400
 8001200:	2300      	movs	r3, #0
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	f002 0203 	and.w	r2, r2, #3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	4093      	lsls	r3, r2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001212:	4938      	ldr	r1, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x35c>)
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	089b      	lsrs	r3, r3, #2
 8001218:	3302      	adds	r3, #2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	3301      	adds	r3, #1
 80012d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa22 f303 	lsr.w	r3, r2, r3
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f47f ae63 	bne.w	8000fac <HAL_GPIO_Init+0x14>
  }
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3724      	adds	r7, #36	; 0x24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	58000400 	.word	0x58000400

080012f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e001      	b.n	800131a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	2b06      	cmp	r3, #6
 800136e:	d00a      	beq.n	8001386 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001370:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	429a      	cmp	r2, r3
 800137c:	d001      	beq.n	8001382 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e040      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e03e      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001386:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800138e:	491f      	ldr	r1, [pc, #124]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4313      	orrs	r3, r2
 8001394:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001396:	f7ff fc6f 	bl	8000c78 <HAL_GetTick>
 800139a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800139c:	e009      	b.n	80013b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800139e:	f7ff fc6b 	bl	8000c78 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ac:	d901      	bls.n	80013b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e028      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013b2:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013be:	d1ee      	bne.n	800139e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b1e      	cmp	r3, #30
 80013c4:	d008      	beq.n	80013d8 <HAL_PWREx_ConfigSupply+0x7c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b2e      	cmp	r3, #46	; 0x2e
 80013ca:	d005      	beq.n	80013d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b1d      	cmp	r3, #29
 80013d0:	d002      	beq.n	80013d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b2d      	cmp	r3, #45	; 0x2d
 80013d6:	d114      	bne.n	8001402 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80013d8:	f7ff fc4e 	bl	8000c78 <HAL_GetTick>
 80013dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013de:	e009      	b.n	80013f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013e0:	f7ff fc4a 	bl	8000c78 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013ee:	d901      	bls.n	80013f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e007      	b.n	8001404 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_PWREx_ConfigSupply+0xb0>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001400:	d1ee      	bne.n	80013e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58024800 	.word	0x58024800

08001410 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	f000 bc1f 	b.w	8001c62 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80b3 	beq.w	8001598 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001432:	4b95      	ldr	r3, [pc, #596]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800143c:	4b92      	ldr	r3, [pc, #584]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001444:	2b10      	cmp	r3, #16
 8001446:	d007      	beq.n	8001458 <HAL_RCC_OscConfig+0x48>
 8001448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800144a:	2b18      	cmp	r3, #24
 800144c:	d112      	bne.n	8001474 <HAL_RCC_OscConfig+0x64>
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d10d      	bne.n	8001474 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001458:	4b8b      	ldr	r3, [pc, #556]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8098 	beq.w	8001596 <HAL_RCC_OscConfig+0x186>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 8093 	bne.w	8001596 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e3f6      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d106      	bne.n	800148c <HAL_RCC_OscConfig+0x7c>
 800147e:	4b82      	ldr	r3, [pc, #520]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a81      	ldr	r2, [pc, #516]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e058      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d112      	bne.n	80014ba <HAL_RCC_OscConfig+0xaa>
 8001494:	4b7c      	ldr	r3, [pc, #496]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a7b      	ldr	r2, [pc, #492]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800149a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b79      	ldr	r3, [pc, #484]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a78      	ldr	r2, [pc, #480]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b76      	ldr	r3, [pc, #472]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a75      	ldr	r2, [pc, #468]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e041      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c2:	d112      	bne.n	80014ea <HAL_RCC_OscConfig+0xda>
 80014c4:	4b70      	ldr	r3, [pc, #448]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a6f      	ldr	r2, [pc, #444]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b6d      	ldr	r3, [pc, #436]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a6c      	ldr	r2, [pc, #432]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b6a      	ldr	r3, [pc, #424]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a69      	ldr	r2, [pc, #420]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e029      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80014f2:	d112      	bne.n	800151a <HAL_RCC_OscConfig+0x10a>
 80014f4:	4b64      	ldr	r3, [pc, #400]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a63      	ldr	r2, [pc, #396]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80014fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b61      	ldr	r3, [pc, #388]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a60      	ldr	r2, [pc, #384]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a5d      	ldr	r2, [pc, #372]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e011      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
 800151a:	4b5b      	ldr	r3, [pc, #364]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b58      	ldr	r3, [pc, #352]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a57      	ldr	r2, [pc, #348]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b55      	ldr	r3, [pc, #340]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001538:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800153c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d013      	beq.n	800156e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fb97 	bl	8000c78 <HAL_GetTick>
 800154a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154e:	f7ff fb93 	bl	8000c78 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e380      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001560:	4b49      	ldr	r3, [pc, #292]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x13e>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156e:	f7ff fb83 	bl	8000c78 <HAL_GetTick>
 8001572:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001576:	f7ff fb7f 	bl	8000c78 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e36c      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001588:	4b3f      	ldr	r3, [pc, #252]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1f0      	bne.n	8001576 <HAL_RCC_OscConfig+0x166>
 8001594:	e000      	b.n	8001598 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001596:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 808c 	beq.w	80016be <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a6:	4b38      	ldr	r3, [pc, #224]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015ae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d007      	beq.n	80015cc <HAL_RCC_OscConfig+0x1bc>
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	2b18      	cmp	r3, #24
 80015c0:	d137      	bne.n	8001632 <HAL_RCC_OscConfig+0x222>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d132      	bne.n	8001632 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d005      	beq.n	80015e4 <HAL_RCC_OscConfig+0x1d4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e33e      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 0219 	bic.w	r2, r3, #25
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4925      	ldr	r1, [pc, #148]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb3f 	bl	8000c78 <HAL_GetTick>
 80015fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fb3b 	bl	8000c78 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e328      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	4917      	ldr	r1, [pc, #92]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001630:	e045      	b.n	80016be <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d028      	beq.n	800168c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 0219 	bic.w	r2, r3, #25
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	4910      	ldr	r1, [pc, #64]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fb14 	bl	8000c78 <HAL_GetTick>
 8001650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fb10 	bl	8000c78 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e2fd      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	061b      	lsls	r3, r3, #24
 8001680:	4901      	ldr	r1, [pc, #4]	; (8001688 <HAL_RCC_OscConfig+0x278>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
 8001686:	e01a      	b.n	80016be <HAL_RCC_OscConfig+0x2ae>
 8001688:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168c:	4b97      	ldr	r3, [pc, #604]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a96      	ldr	r2, [pc, #600]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff faee 	bl	8000c78 <HAL_GetTick>
 800169c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a0:	f7ff faea 	bl	8000c78 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e2d7      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016b2:	4b8e      	ldr	r3, [pc, #568]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d06a      	beq.n	80017a0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016d4:	4b85      	ldr	r3, [pc, #532]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d007      	beq.n	80016f0 <HAL_RCC_OscConfig+0x2e0>
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	2b18      	cmp	r3, #24
 80016e4:	d11b      	bne.n	800171e <HAL_RCC_OscConfig+0x30e>
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d116      	bne.n	800171e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016f0:	4b7e      	ldr	r3, [pc, #504]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x2f8>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b80      	cmp	r3, #128	; 0x80
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e2ac      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001708:	4b78      	ldr	r3, [pc, #480]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	4975      	ldr	r1, [pc, #468]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001718:	4313      	orrs	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800171c:	e040      	b.n	80017a0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d023      	beq.n	800176e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001726:	4b71      	ldr	r3, [pc, #452]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a70      	ldr	r2, [pc, #448]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800172c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001732:	f7ff faa1 	bl	8000c78 <HAL_GetTick>
 8001736:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800173a:	f7ff fa9d 	bl	8000c78 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e28a      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800174c:	4b67      	ldr	r3, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001758:	4b64      	ldr	r3, [pc, #400]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	4961      	ldr	r1, [pc, #388]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	60cb      	str	r3, [r1, #12]
 800176c:	e018      	b.n	80017a0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800176e:	4b5f      	ldr	r3, [pc, #380]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5e      	ldr	r2, [pc, #376]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177a:	f7ff fa7d 	bl	8000c78 <HAL_GetTick>
 800177e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001782:	f7ff fa79 	bl	8000c78 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e266      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001794:	4b55      	ldr	r3, [pc, #340]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f0      	bne.n	8001782 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0308 	and.w	r3, r3, #8
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d036      	beq.n	800181a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d019      	beq.n	80017e8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b4:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b8:	4a4c      	ldr	r2, [pc, #304]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fa5a 	bl	8000c78 <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fa56 	bl	8000c78 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e243      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x3b8>
 80017e6:	e018      	b.n	800181a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	4a3f      	ldr	r2, [pc, #252]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fa40 	bl	8000c78 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fa3c 	bl	8000c78 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e229      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0320 	and.w	r3, r3, #32
 8001822:	2b00      	cmp	r3, #0
 8001824:	d036      	beq.n	8001894 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d019      	beq.n	8001862 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182e:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001838:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800183a:	f7ff fa1d 	bl	8000c78 <HAL_GetTick>
 800183e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001842:	f7ff fa19 	bl	8000c78 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e206      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x432>
 8001860:	e018      	b.n	8001894 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a21      	ldr	r2, [pc, #132]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 8001868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800186c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800186e:	f7ff fa03 	bl	8000c78 <HAL_GetTick>
 8001872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001876:	f7ff f9ff 	bl	8000c78 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e1ec      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80af 	beq.w	8001a00 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <HAL_RCC_OscConfig+0x4e0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x4e0>)
 80018a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ae:	f7ff f9e3 	bl	8000c78 <HAL_GetTick>
 80018b2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b6:	f7ff f9df 	bl	8000c78 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	; 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1cc      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_OscConfig+0x4e0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x4e4>
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80018de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e0:	4a02      	ldr	r2, [pc, #8]	; (80018ec <HAL_RCC_OscConfig+0x4dc>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6713      	str	r3, [r2, #112]	; 0x70
 80018e8:	e05b      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 80018ea:	bf00      	nop
 80018ec:	58024400 	.word	0x58024400
 80018f0:	58024800 	.word	0x58024800
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d112      	bne.n	8001922 <HAL_RCC_OscConfig+0x512>
 80018fc:	4b9d      	ldr	r3, [pc, #628]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 80018fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001900:	4a9c      	ldr	r2, [pc, #624]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6713      	str	r3, [r2, #112]	; 0x70
 8001908:	4b9a      	ldr	r3, [pc, #616]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a99      	ldr	r2, [pc, #612]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800190e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
 8001914:	4b97      	ldr	r3, [pc, #604]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	4a96      	ldr	r2, [pc, #600]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800191a:	f023 0304 	bic.w	r3, r3, #4
 800191e:	6713      	str	r3, [r2, #112]	; 0x70
 8001920:	e03f      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b05      	cmp	r3, #5
 8001928:	d112      	bne.n	8001950 <HAL_RCC_OscConfig+0x540>
 800192a:	4b92      	ldr	r3, [pc, #584]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a91      	ldr	r2, [pc, #580]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	4b8f      	ldr	r3, [pc, #572]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	4a8e      	ldr	r2, [pc, #568]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800193c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001940:	6713      	str	r3, [r2, #112]	; 0x70
 8001942:	4b8c      	ldr	r3, [pc, #560]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a8b      	ldr	r2, [pc, #556]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	e028      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b85      	cmp	r3, #133	; 0x85
 8001956:	d112      	bne.n	800197e <HAL_RCC_OscConfig+0x56e>
 8001958:	4b86      	ldr	r3, [pc, #536]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a85      	ldr	r2, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a82      	ldr	r2, [pc, #520]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800196a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	4b80      	ldr	r3, [pc, #512]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001974:	4a7f      	ldr	r2, [pc, #508]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	; 0x70
 800197c:	e011      	b.n	80019a2 <HAL_RCC_OscConfig+0x592>
 800197e:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a7c      	ldr	r2, [pc, #496]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	4b7a      	ldr	r3, [pc, #488]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	4a79      	ldr	r2, [pc, #484]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6713      	str	r3, [r2, #112]	; 0x70
 8001996:	4b77      	ldr	r3, [pc, #476]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a76      	ldr	r2, [pc, #472]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 800199c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d015      	beq.n	80019d6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff f965 	bl	8000c78 <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f961 	bl	8000c78 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e14c      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c8:	4b6a      	ldr	r3, [pc, #424]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0ee      	beq.n	80019b2 <HAL_RCC_OscConfig+0x5a2>
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff f94f 	bl	8000c78 <HAL_GetTick>
 80019da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019dc:	e00a      	b.n	80019f4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019de:	f7ff f94b 	bl	8000c78 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e136      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019f4:	4b5f      	ldr	r3, [pc, #380]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ee      	bne.n	80019de <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 812b 	beq.w	8001c60 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a0a:	4b5a      	ldr	r3, [pc, #360]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a12:	2b18      	cmp	r3, #24
 8001a14:	f000 80bb 	beq.w	8001b8e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	f040 8095 	bne.w	8001b4c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a53      	ldr	r2, [pc, #332]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f923 	bl	8000c78 <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a36:	f7ff f91f 	bl	8000c78 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e10c      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a54:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a58:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x768>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a64:	0112      	lsls	r2, r2, #4
 8001a66:	430a      	orrs	r2, r1
 8001a68:	4942      	ldr	r1, [pc, #264]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	628b      	str	r3, [r1, #40]	; 0x28
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	025b      	lsls	r3, r3, #9
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	041b      	lsls	r3, r3, #16
 8001a8c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a96:	3b01      	subs	r3, #1
 8001a98:	061b      	lsls	r3, r3, #24
 8001a9a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a9e:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab4:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x76c>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001abc:	00d2      	lsls	r2, r2, #3
 8001abe:	492d      	ldr	r1, [pc, #180]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f023 020c 	bic.w	r2, r3, #12
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4928      	ldr	r1, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	f023 0202 	bic.w	r2, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4924      	ldr	r1, [pc, #144]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ae8:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f8a8 	bl	8000c78 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f8a4 	bl	8000c78 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e091      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x71c>
 8001b4a:	e089      	b.n	8001c60 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_RCC_OscConfig+0x764>)
 8001b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff f88e 	bl	8000c78 <HAL_GetTick>
 8001b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b5e:	e00f      	b.n	8001b80 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f88a 	bl	8000c78 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d908      	bls.n	8001b80 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e077      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
 8001b72:	bf00      	nop
 8001b74:	58024400 	.word	0x58024400
 8001b78:	fffffc0c 	.word	0xfffffc0c
 8001b7c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1e9      	bne.n	8001b60 <HAL_RCC_OscConfig+0x750>
 8001b8c:	e068      	b.n	8001c60 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b92:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d031      	beq.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d12a      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d122      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d11a      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	0a5b      	lsrs	r3, r3, #9
 8001bd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d111      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d108      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	0e1b      	lsrs	r3, r3, #24
 8001bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d001      	beq.n	8001c0a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e02b      	b.n	8001c62 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0e:	08db      	lsrs	r3, r3, #3
 8001c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c14:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d01f      	beq.n	8001c60 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c2c:	f7ff f824 	bl	8000c78 <HAL_GetTick>
 8001c30:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c32:	bf00      	nop
 8001c34:	f7ff f820 	bl	8000c78 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d0f9      	beq.n	8001c34 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c40:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <HAL_RCC_OscConfig+0x860>)
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c4c:	00d2      	lsls	r2, r2, #3
 8001c4e:	4907      	ldr	r1, [pc, #28]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_RCC_OscConfig+0x85c>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3730      	adds	r7, #48	; 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	58024400 	.word	0x58024400
 8001c70:	ffff0007 	.word	0xffff0007

08001c74 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e19c      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d910      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b87      	ldr	r3, [pc, #540]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 020f 	bic.w	r2, r3, #15
 8001c9e:	4985      	ldr	r1, [pc, #532]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ca6:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e184      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d010      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	4b7b      	ldr	r3, [pc, #492]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d908      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cd4:	4b78      	ldr	r3, [pc, #480]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	4975      	ldr	r1, [pc, #468]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	4b70      	ldr	r3, [pc, #448]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d908      	bls.n	8001d14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d02:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	496a      	ldr	r1, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	4b64      	ldr	r3, [pc, #400]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d908      	bls.n	8001d42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d30:	4b61      	ldr	r3, [pc, #388]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	495e      	ldr	r1, [pc, #376]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69da      	ldr	r2, [r3, #28]
 8001d52:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d908      	bls.n	8001d70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d5e:	4b56      	ldr	r3, [pc, #344]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	4953      	ldr	r1, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b4d      	ldr	r3, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 030f 	and.w	r3, r3, #15
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d908      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f023 020f 	bic.w	r2, r3, #15
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4947      	ldr	r1, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d055      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001daa:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4940      	ldr	r1, [pc, #256]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc4:	4b3c      	ldr	r3, [pc, #240]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d121      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0f6      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ddc:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d115      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0ea      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001df4:	4b30      	ldr	r3, [pc, #192]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0de      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0d6      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f023 0207 	bic.w	r2, r3, #7
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4925      	ldr	r1, [pc, #148]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e26:	f7fe ff27 	bl	8000c78 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2e:	f7fe ff23 	bl	8000c78 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0be      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d1eb      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d010      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d208      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f023 020f 	bic.w	r2, r3, #15
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x244>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d214      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 020f 	bic.w	r2, r3, #15
 8001e9a:	4906      	ldr	r1, [pc, #24]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCC_ClockConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e086      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x34e>
 8001eb4:	52002000 	.word	0x52002000
 8001eb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d010      	beq.n	8001eea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d208      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	4939      	ldr	r1, [pc, #228]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695a      	ldr	r2, [r3, #20]
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d208      	bcs.n	8001f18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	492e      	ldr	r1, [pc, #184]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d208      	bcs.n	8001f46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4922      	ldr	r1, [pc, #136]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0320 	and.w	r3, r3, #32
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d010      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d208      	bcs.n	8001f74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4917      	ldr	r1, [pc, #92]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001f74:	f000 f834 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	4912      	ldr	r1, [pc, #72]	; (8001fd0 <HAL_RCC_ClockConfig+0x35c>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001f92:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_RCC_ClockConfig+0x358>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <HAL_RCC_ClockConfig+0x35c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_RCC_ClockConfig+0x360>)
 8001faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x364>)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <HAL_RCC_ClockConfig+0x368>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fe14 	bl	8000be4 <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	58024400 	.word	0x58024400
 8001fd0:	08003690 	.word	0x08003690
 8001fd4:	24000004 	.word	0x24000004
 8001fd8:	24000000 	.word	0x24000000
 8001fdc:	24000008 	.word	0x24000008

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe6:	4bb3      	ldr	r3, [pc, #716]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fee:	2b18      	cmp	r3, #24
 8001ff0:	f200 8155 	bhi.w	800229e <HAL_RCC_GetSysClockFreq+0x2be>
 8001ff4:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002061 	.word	0x08002061
 8002000:	0800229f 	.word	0x0800229f
 8002004:	0800229f 	.word	0x0800229f
 8002008:	0800229f 	.word	0x0800229f
 800200c:	0800229f 	.word	0x0800229f
 8002010:	0800229f 	.word	0x0800229f
 8002014:	0800229f 	.word	0x0800229f
 8002018:	0800229f 	.word	0x0800229f
 800201c:	08002087 	.word	0x08002087
 8002020:	0800229f 	.word	0x0800229f
 8002024:	0800229f 	.word	0x0800229f
 8002028:	0800229f 	.word	0x0800229f
 800202c:	0800229f 	.word	0x0800229f
 8002030:	0800229f 	.word	0x0800229f
 8002034:	0800229f 	.word	0x0800229f
 8002038:	0800229f 	.word	0x0800229f
 800203c:	0800208d 	.word	0x0800208d
 8002040:	0800229f 	.word	0x0800229f
 8002044:	0800229f 	.word	0x0800229f
 8002048:	0800229f 	.word	0x0800229f
 800204c:	0800229f 	.word	0x0800229f
 8002050:	0800229f 	.word	0x0800229f
 8002054:	0800229f 	.word	0x0800229f
 8002058:	0800229f 	.word	0x0800229f
 800205c:	08002093 	.word	0x08002093
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002060:	4b94      	ldr	r3, [pc, #592]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0320 	and.w	r3, r3, #32
 8002068:	2b00      	cmp	r3, #0
 800206a:	d009      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800206c:	4b91      	ldr	r3, [pc, #580]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	4a90      	ldr	r2, [pc, #576]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800207e:	e111      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002080:	4b8d      	ldr	r3, [pc, #564]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002082:	61bb      	str	r3, [r7, #24]
      break;
 8002084:	e10e      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002086:	4b8d      	ldr	r3, [pc, #564]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002088:	61bb      	str	r3, [r7, #24]
      break;
 800208a:	e10b      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800208c:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800208e:	61bb      	str	r3, [r7, #24]
      break;
 8002090:	e108      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002092:	4b88      	ldr	r3, [pc, #544]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800209c:	4b85      	ldr	r3, [pc, #532]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020a8:	4b82      	ldr	r3, [pc, #520]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80020b2:	4b80      	ldr	r3, [pc, #512]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b6:	08db      	lsrs	r3, r3, #3
 80020b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80e1 	beq.w	8002298 <HAL_RCC_GetSysClockFreq+0x2b8>
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	f000 8083 	beq.w	80021e4 <HAL_RCC_GetSysClockFreq+0x204>
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	f200 80a1 	bhi.w	8002228 <HAL_RCC_GetSysClockFreq+0x248>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x114>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d056      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020f2:	e099      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020f4:	4b6f      	ldr	r3, [pc, #444]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0320 	and.w	r3, r3, #32
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d02d      	beq.n	800215c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002100:	4b6c      	ldr	r3, [pc, #432]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	08db      	lsrs	r3, r3, #3
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	4a6b      	ldr	r2, [pc, #428]	; (80022b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	ee07 3a90 	vmov	s15, r3
 8002122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212a:	4b62      	ldr	r3, [pc, #392]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213a:	ed97 6a02 	vldr	s12, [r7, #8]
 800213e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800214e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800215a:	e087      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002166:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800216a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216e:	4b51      	ldr	r3, [pc, #324]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800217e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002182:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800218e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800219e:	e065      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80021ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021e2:	e043      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002206:	ed97 6a02 	vldr	s12, [r7, #8]
 800220a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800220e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800221a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002226:	e021      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224a:	ed97 6a02 	vldr	s12, [r7, #8]
 800224e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800225e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800226a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	0a5b      	lsrs	r3, r3, #9
 8002272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002276:	3301      	adds	r3, #1
 8002278:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	ee07 3a90 	vmov	s15, r3
 8002280:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002284:	edd7 6a07 	vldr	s13, [r7, #28]
 8002288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800228c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002290:	ee17 3a90 	vmov	r3, s15
 8002294:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002296:	e005      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
      break;
 800229c:	e002      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022a0:	61bb      	str	r3, [r7, #24]
      break;
 80022a2:	bf00      	nop
  }

  return sysclockfreq;
 80022a4:	69bb      	ldr	r3, [r7, #24]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3724      	adds	r7, #36	; 0x24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	58024400 	.word	0x58024400
 80022b8:	03d09000 	.word	0x03d09000
 80022bc:	003d0900 	.word	0x003d0900
 80022c0:	016e3600 	.word	0x016e3600
 80022c4:	46000000 	.word	0x46000000
 80022c8:	4c742400 	.word	0x4c742400
 80022cc:	4a742400 	.word	0x4a742400
 80022d0:	4bb71b00 	.word	0x4bb71b00

080022d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e049      	b.n	800237a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d106      	bne.n	8002300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe facc 	bl	8000898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f000 fc22 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d001      	beq.n	800239c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e04c      	b.n	8002436 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <HAL_TIM_Base_Start+0xc0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d022      	beq.n	80023f4 <HAL_TIM_Base_Start+0x70>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b6:	d01d      	beq.n	80023f4 <HAL_TIM_Base_Start+0x70>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a22      	ldr	r2, [pc, #136]	; (8002448 <HAL_TIM_Base_Start+0xc4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d018      	beq.n	80023f4 <HAL_TIM_Base_Start+0x70>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a21      	ldr	r2, [pc, #132]	; (800244c <HAL_TIM_Base_Start+0xc8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <HAL_TIM_Base_Start+0x70>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1f      	ldr	r2, [pc, #124]	; (8002450 <HAL_TIM_Base_Start+0xcc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_TIM_Base_Start+0x70>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1e      	ldr	r2, [pc, #120]	; (8002454 <HAL_TIM_Base_Start+0xd0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d009      	beq.n	80023f4 <HAL_TIM_Base_Start+0x70>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1c      	ldr	r2, [pc, #112]	; (8002458 <HAL_TIM_Base_Start+0xd4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_TIM_Base_Start+0x70>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_TIM_Base_Start+0xd8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d115      	bne.n	8002420 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_TIM_Base_Start+0xdc>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d015      	beq.n	8002432 <HAL_TIM_Base_Start+0xae>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d011      	beq.n	8002432 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241e:	e008      	b.n	8002432 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e000      	b.n	8002434 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40010000 	.word	0x40010000
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800
 8002450:	40000c00 	.word	0x40000c00
 8002454:	40010400 	.word	0x40010400
 8002458:	40001800 	.word	0x40001800
 800245c:	40014000 	.word	0x40014000
 8002460:	00010007 	.word	0x00010007

08002464 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e049      	b.n	800250a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f841 	bl	8002512 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f000 fb5a 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d109      	bne.n	800254c <HAL_TIM_PWM_Start+0x24>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	e03c      	b.n	80025c6 <HAL_TIM_PWM_Start+0x9e>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b04      	cmp	r3, #4
 8002550:	d109      	bne.n	8002566 <HAL_TIM_PWM_Start+0x3e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b01      	cmp	r3, #1
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e02f      	b.n	80025c6 <HAL_TIM_PWM_Start+0x9e>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b08      	cmp	r3, #8
 800256a:	d109      	bne.n	8002580 <HAL_TIM_PWM_Start+0x58>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	bf14      	ite	ne
 8002578:	2301      	movne	r3, #1
 800257a:	2300      	moveq	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e022      	b.n	80025c6 <HAL_TIM_PWM_Start+0x9e>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d109      	bne.n	800259a <HAL_TIM_PWM_Start+0x72>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	bf14      	ite	ne
 8002592:	2301      	movne	r3, #1
 8002594:	2300      	moveq	r3, #0
 8002596:	b2db      	uxtb	r3, r3
 8002598:	e015      	b.n	80025c6 <HAL_TIM_PWM_Start+0x9e>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b10      	cmp	r3, #16
 800259e:	d109      	bne.n	80025b4 <HAL_TIM_PWM_Start+0x8c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	e008      	b.n	80025c6 <HAL_TIM_PWM_Start+0x9e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e0a1      	b.n	8002712 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <HAL_TIM_PWM_Start+0xb6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025dc:	e023      	b.n	8002626 <HAL_TIM_PWM_Start+0xfe>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0xc6>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ec:	e01b      	b.n	8002626 <HAL_TIM_PWM_Start+0xfe>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0xd6>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025fc:	e013      	b.n	8002626 <HAL_TIM_PWM_Start+0xfe>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Start+0xe6>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800260c:	e00b      	b.n	8002626 <HAL_TIM_PWM_Start+0xfe>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b10      	cmp	r3, #16
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Start+0xf6>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800261c:	e003      	b.n	8002626 <HAL_TIM_PWM_Start+0xfe>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fea2 	bl	8003378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a38      	ldr	r2, [pc, #224]	; (800271c <HAL_TIM_PWM_Start+0x1f4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d013      	beq.n	8002666 <HAL_TIM_PWM_Start+0x13e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a37      	ldr	r2, [pc, #220]	; (8002720 <HAL_TIM_PWM_Start+0x1f8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00e      	beq.n	8002666 <HAL_TIM_PWM_Start+0x13e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a35      	ldr	r2, [pc, #212]	; (8002724 <HAL_TIM_PWM_Start+0x1fc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_TIM_PWM_Start+0x13e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a34      	ldr	r2, [pc, #208]	; (8002728 <HAL_TIM_PWM_Start+0x200>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d004      	beq.n	8002666 <HAL_TIM_PWM_Start+0x13e>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a32      	ldr	r2, [pc, #200]	; (800272c <HAL_TIM_PWM_Start+0x204>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_TIM_PWM_Start+0x142>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_TIM_PWM_Start+0x144>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a25      	ldr	r2, [pc, #148]	; (800271c <HAL_TIM_PWM_Start+0x1f4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d022      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1a8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002692:	d01d      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1a8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	; (8002730 <HAL_TIM_PWM_Start+0x208>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d018      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1a8>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a24      	ldr	r2, [pc, #144]	; (8002734 <HAL_TIM_PWM_Start+0x20c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1a8>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a22      	ldr	r2, [pc, #136]	; (8002738 <HAL_TIM_PWM_Start+0x210>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00e      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1a8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <HAL_TIM_PWM_Start+0x1f8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1a8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_TIM_PWM_Start+0x214>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1a8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_TIM_PWM_Start+0x1fc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d115      	bne.n	80026fc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_TIM_PWM_Start+0x218>)
 80026d8:	4013      	ands	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d015      	beq.n	800270e <HAL_TIM_PWM_Start+0x1e6>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d011      	beq.n	800270e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fa:	e008      	b.n	800270e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e000      	b.n	8002710 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	40010400 	.word	0x40010400
 8002724:	40014000 	.word	0x40014000
 8002728:	40014400 	.word	0x40014400
 800272c:	40014800 	.word	0x40014800
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800
 8002738:	40000c00 	.word	0x40000c00
 800273c:	40001800 	.word	0x40001800
 8002740:	00010007 	.word	0x00010007

08002744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800275e:	2302      	movs	r3, #2
 8002760:	e0ff      	b.n	8002962 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b14      	cmp	r3, #20
 800276e:	f200 80f0 	bhi.w	8002952 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	080027cd 	.word	0x080027cd
 800277c:	08002953 	.word	0x08002953
 8002780:	08002953 	.word	0x08002953
 8002784:	08002953 	.word	0x08002953
 8002788:	0800280d 	.word	0x0800280d
 800278c:	08002953 	.word	0x08002953
 8002790:	08002953 	.word	0x08002953
 8002794:	08002953 	.word	0x08002953
 8002798:	0800284f 	.word	0x0800284f
 800279c:	08002953 	.word	0x08002953
 80027a0:	08002953 	.word	0x08002953
 80027a4:	08002953 	.word	0x08002953
 80027a8:	0800288f 	.word	0x0800288f
 80027ac:	08002953 	.word	0x08002953
 80027b0:	08002953 	.word	0x08002953
 80027b4:	08002953 	.word	0x08002953
 80027b8:	080028d1 	.word	0x080028d1
 80027bc:	08002953 	.word	0x08002953
 80027c0:	08002953 	.word	0x08002953
 80027c4:	08002953 	.word	0x08002953
 80027c8:	08002911 	.word	0x08002911
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fa5c 	bl	8002c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0208 	orr.w	r2, r2, #8
 80027e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0204 	bic.w	r2, r2, #4
 80027f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6999      	ldr	r1, [r3, #24]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	619a      	str	r2, [r3, #24]
      break;
 800280a:	e0a5      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 facc 	bl	8002db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6999      	ldr	r1, [r3, #24]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	021a      	lsls	r2, r3, #8
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	619a      	str	r2, [r3, #24]
      break;
 800284c:	e084      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fb35 	bl	8002ec4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0208 	orr.w	r2, r2, #8
 8002868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0204 	bic.w	r2, r2, #4
 8002878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69d9      	ldr	r1, [r3, #28]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
      break;
 800288c:	e064      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fb9d 	bl	8002fd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69d9      	ldr	r1, [r3, #28]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	021a      	lsls	r2, r3, #8
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	61da      	str	r2, [r3, #28]
      break;
 80028ce:	e043      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fbe6 	bl	80030a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0208 	orr.w	r2, r2, #8
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800290e:	e023      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fc2a 	bl	8003170 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	021a      	lsls	r2, r3, #8
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002950:	e002      	b.n	8002958 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
      break;
 8002956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002960:	7dfb      	ldrb	r3, [r7, #23]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop

0800296c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_TIM_ConfigClockSource+0x1c>
 8002984:	2302      	movs	r3, #2
 8002986:	e0dc      	b.n	8002b42 <HAL_TIM_ConfigClockSource+0x1d6>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	4b6a      	ldr	r3, [pc, #424]	; (8002b4c <HAL_TIM_ConfigClockSource+0x1e0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a64      	ldr	r2, [pc, #400]	; (8002b50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	f000 80a9 	beq.w	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80029c4:	4a62      	ldr	r2, [pc, #392]	; (8002b50 <HAL_TIM_ConfigClockSource+0x1e4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	f200 80ae 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80029cc:	4a61      	ldr	r2, [pc, #388]	; (8002b54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	f000 80a1 	beq.w	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80029d4:	4a5f      	ldr	r2, [pc, #380]	; (8002b54 <HAL_TIM_ConfigClockSource+0x1e8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	f200 80a6 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80029dc:	4a5e      	ldr	r2, [pc, #376]	; (8002b58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	f000 8099 	beq.w	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80029e4:	4a5c      	ldr	r2, [pc, #368]	; (8002b58 <HAL_TIM_ConfigClockSource+0x1ec>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	f200 809e 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80029ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80029f0:	f000 8091 	beq.w	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 80029f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80029f8:	f200 8096 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 80029fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a00:	f000 8089 	beq.w	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a08:	f200 808e 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a10:	d03e      	beq.n	8002a90 <HAL_TIM_ConfigClockSource+0x124>
 8002a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a16:	f200 8087 	bhi.w	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	f000 8086 	beq.w	8002b2e <HAL_TIM_ConfigClockSource+0x1c2>
 8002a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a26:	d87f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a28:	2b70      	cmp	r3, #112	; 0x70
 8002a2a:	d01a      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0xf6>
 8002a2c:	2b70      	cmp	r3, #112	; 0x70
 8002a2e:	d87b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a30:	2b60      	cmp	r3, #96	; 0x60
 8002a32:	d050      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0x16a>
 8002a34:	2b60      	cmp	r3, #96	; 0x60
 8002a36:	d877      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a38:	2b50      	cmp	r3, #80	; 0x50
 8002a3a:	d03c      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0x14a>
 8002a3c:	2b50      	cmp	r3, #80	; 0x50
 8002a3e:	d873      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d058      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x18a>
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d86f      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a48:	2b30      	cmp	r3, #48	; 0x30
 8002a4a:	d064      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a4c:	2b30      	cmp	r3, #48	; 0x30
 8002a4e:	d86b      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d060      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d867      	bhi.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d05c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a5c:	2b10      	cmp	r3, #16
 8002a5e:	d05a      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x1aa>
 8002a60:	e062      	b.n	8002b28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f000 fc61 	bl	8003338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	609a      	str	r2, [r3, #8]
      break;
 8002a8e:	e04f      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6899      	ldr	r1, [r3, #8]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f000 fc4a 	bl	8003338 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ab2:	609a      	str	r2, [r3, #8]
      break;
 8002ab4:	e03c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6859      	ldr	r1, [r3, #4]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f000 fbba 	bl	800323c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2150      	movs	r1, #80	; 0x50
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fc14 	bl	80032fc <TIM_ITRx_SetConfig>
      break;
 8002ad4:	e02c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 fbd9 	bl	800329a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2160      	movs	r1, #96	; 0x60
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fc04 	bl	80032fc <TIM_ITRx_SetConfig>
      break;
 8002af4:	e01c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 fb9a 	bl	800323c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fbf4 	bl	80032fc <TIM_ITRx_SetConfig>
      break;
 8002b14:	e00c      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f000 fbeb 	bl	80032fc <TIM_ITRx_SetConfig>
      break;
 8002b26:	e003      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e000      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	ffceff88 	.word	0xffceff88
 8002b50:	00100040 	.word	0x00100040
 8002b54:	00100030 	.word	0x00100030
 8002b58:	00100020 	.word	0x00100020

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a40      	ldr	r2, [pc, #256]	; (8002c70 <TIM_Base_SetConfig+0x114>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b7a:	d00f      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3d      	ldr	r2, [pc, #244]	; (8002c74 <TIM_Base_SetConfig+0x118>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3c      	ldr	r2, [pc, #240]	; (8002c78 <TIM_Base_SetConfig+0x11c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	; (8002c7c <TIM_Base_SetConfig+0x120>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3a      	ldr	r2, [pc, #232]	; (8002c80 <TIM_Base_SetConfig+0x124>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d108      	bne.n	8002bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2f      	ldr	r2, [pc, #188]	; (8002c70 <TIM_Base_SetConfig+0x114>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d01b      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2c      	ldr	r2, [pc, #176]	; (8002c74 <TIM_Base_SetConfig+0x118>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d017      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2b      	ldr	r2, [pc, #172]	; (8002c78 <TIM_Base_SetConfig+0x11c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2a      	ldr	r2, [pc, #168]	; (8002c7c <TIM_Base_SetConfig+0x120>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00f      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a29      	ldr	r2, [pc, #164]	; (8002c80 <TIM_Base_SetConfig+0x124>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00b      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a28      	ldr	r2, [pc, #160]	; (8002c84 <TIM_Base_SetConfig+0x128>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a27      	ldr	r2, [pc, #156]	; (8002c88 <TIM_Base_SetConfig+0x12c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d003      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <TIM_Base_SetConfig+0x130>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d108      	bne.n	8002c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <TIM_Base_SetConfig+0x114>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00f      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <TIM_Base_SetConfig+0x124>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00b      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <TIM_Base_SetConfig+0x128>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <TIM_Base_SetConfig+0x12c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <TIM_Base_SetConfig+0x130>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d103      	bne.n	8002c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	615a      	str	r2, [r3, #20]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40010400 	.word	0x40010400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	40014400 	.word	0x40014400
 8002c8c:	40014800 	.word	0x40014800

08002c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <TIM_OC1_SetConfig+0x108>)
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f023 0302 	bic.w	r3, r3, #2
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a2d      	ldr	r2, [pc, #180]	; (8002d9c <TIM_OC1_SetConfig+0x10c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d00f      	beq.n	8002d0c <TIM_OC1_SetConfig+0x7c>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a2c      	ldr	r2, [pc, #176]	; (8002da0 <TIM_OC1_SetConfig+0x110>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <TIM_OC1_SetConfig+0x7c>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a2b      	ldr	r2, [pc, #172]	; (8002da4 <TIM_OC1_SetConfig+0x114>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d007      	beq.n	8002d0c <TIM_OC1_SetConfig+0x7c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <TIM_OC1_SetConfig+0x118>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d003      	beq.n	8002d0c <TIM_OC1_SetConfig+0x7c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a29      	ldr	r2, [pc, #164]	; (8002dac <TIM_OC1_SetConfig+0x11c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10c      	bne.n	8002d26 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f023 0308 	bic.w	r3, r3, #8
 8002d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f023 0304 	bic.w	r3, r3, #4
 8002d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <TIM_OC1_SetConfig+0x10c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00f      	beq.n	8002d4e <TIM_OC1_SetConfig+0xbe>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <TIM_OC1_SetConfig+0x110>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00b      	beq.n	8002d4e <TIM_OC1_SetConfig+0xbe>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a1a      	ldr	r2, [pc, #104]	; (8002da4 <TIM_OC1_SetConfig+0x114>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d007      	beq.n	8002d4e <TIM_OC1_SetConfig+0xbe>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <TIM_OC1_SetConfig+0x118>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d003      	beq.n	8002d4e <TIM_OC1_SetConfig+0xbe>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <TIM_OC1_SetConfig+0x11c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	621a      	str	r2, [r3, #32]
}
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	fffeff8f 	.word	0xfffeff8f
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40010400 	.word	0x40010400
 8002da4:	40014000 	.word	0x40014000
 8002da8:	40014400 	.word	0x40014400
 8002dac:	40014800 	.word	0x40014800

08002db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f023 0210 	bic.w	r2, r3, #16
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4b34      	ldr	r3, [pc, #208]	; (8002eac <TIM_OC2_SetConfig+0xfc>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0320 	bic.w	r3, r3, #32
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <TIM_OC2_SetConfig+0x100>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_OC2_SetConfig+0x68>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a28      	ldr	r2, [pc, #160]	; (8002eb4 <TIM_OC2_SetConfig+0x104>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d10d      	bne.n	8002e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <TIM_OC2_SetConfig+0x100>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00f      	beq.n	8002e5c <TIM_OC2_SetConfig+0xac>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <TIM_OC2_SetConfig+0x104>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <TIM_OC2_SetConfig+0xac>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <TIM_OC2_SetConfig+0x108>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_OC2_SetConfig+0xac>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <TIM_OC2_SetConfig+0x10c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_OC2_SetConfig+0xac>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a1a      	ldr	r2, [pc, #104]	; (8002ec0 <TIM_OC2_SetConfig+0x110>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d113      	bne.n	8002e84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	621a      	str	r2, [r3, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	feff8fff 	.word	0xfeff8fff
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40010400 	.word	0x40010400
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40014400 	.word	0x40014400
 8002ec0:	40014800 	.word	0x40014800

08002ec4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <TIM_OC3_SetConfig+0xf8>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <TIM_OC3_SetConfig+0xfc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d003      	beq.n	8002f2a <TIM_OC3_SetConfig+0x66>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a27      	ldr	r2, [pc, #156]	; (8002fc4 <TIM_OC3_SetConfig+0x100>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10d      	bne.n	8002f46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	021b      	lsls	r3, r3, #8
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <TIM_OC3_SetConfig+0xfc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00f      	beq.n	8002f6e <TIM_OC3_SetConfig+0xaa>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1c      	ldr	r2, [pc, #112]	; (8002fc4 <TIM_OC3_SetConfig+0x100>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <TIM_OC3_SetConfig+0xaa>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a1b      	ldr	r2, [pc, #108]	; (8002fc8 <TIM_OC3_SetConfig+0x104>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <TIM_OC3_SetConfig+0xaa>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <TIM_OC3_SetConfig+0x108>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d003      	beq.n	8002f6e <TIM_OC3_SetConfig+0xaa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <TIM_OC3_SetConfig+0x10c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d113      	bne.n	8002f96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	621a      	str	r2, [r3, #32]
}
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	fffeff8f 	.word	0xfffeff8f
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40010400 	.word	0x40010400
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40014400 	.word	0x40014400
 8002fd0:	40014800 	.word	0x40014800

08002fd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <TIM_OC4_SetConfig+0xbc>)
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800301e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	031b      	lsls	r3, r3, #12
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a19      	ldr	r2, [pc, #100]	; (8003094 <TIM_OC4_SetConfig+0xc0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00f      	beq.n	8003054 <TIM_OC4_SetConfig+0x80>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a18      	ldr	r2, [pc, #96]	; (8003098 <TIM_OC4_SetConfig+0xc4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d00b      	beq.n	8003054 <TIM_OC4_SetConfig+0x80>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <TIM_OC4_SetConfig+0xc8>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d007      	beq.n	8003054 <TIM_OC4_SetConfig+0x80>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <TIM_OC4_SetConfig+0xcc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d003      	beq.n	8003054 <TIM_OC4_SetConfig+0x80>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <TIM_OC4_SetConfig+0xd0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d109      	bne.n	8003068 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800305a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	621a      	str	r2, [r3, #32]
}
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	feff8fff 	.word	0xfeff8fff
 8003094:	40010000 	.word	0x40010000
 8003098:	40010400 	.word	0x40010400
 800309c:	40014000 	.word	0x40014000
 80030a0:	40014400 	.word	0x40014400
 80030a4:	40014800 	.word	0x40014800

080030a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <TIM_OC5_SetConfig+0xb0>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	041b      	lsls	r3, r3, #16
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a18      	ldr	r2, [pc, #96]	; (800315c <TIM_OC5_SetConfig+0xb4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d00f      	beq.n	800311e <TIM_OC5_SetConfig+0x76>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a17      	ldr	r2, [pc, #92]	; (8003160 <TIM_OC5_SetConfig+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00b      	beq.n	800311e <TIM_OC5_SetConfig+0x76>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <TIM_OC5_SetConfig+0xbc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d007      	beq.n	800311e <TIM_OC5_SetConfig+0x76>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a15      	ldr	r2, [pc, #84]	; (8003168 <TIM_OC5_SetConfig+0xc0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d003      	beq.n	800311e <TIM_OC5_SetConfig+0x76>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a14      	ldr	r2, [pc, #80]	; (800316c <TIM_OC5_SetConfig+0xc4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d109      	bne.n	8003132 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	bf00      	nop
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	fffeff8f 	.word	0xfffeff8f
 800315c:	40010000 	.word	0x40010000
 8003160:	40010400 	.word	0x40010400
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800

08003170 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <TIM_OC6_SetConfig+0xb4>)
 800319c:	4013      	ands	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	021b      	lsls	r3, r3, #8
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	051b      	lsls	r3, r3, #20
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a19      	ldr	r2, [pc, #100]	; (8003228 <TIM_OC6_SetConfig+0xb8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00f      	beq.n	80031e8 <TIM_OC6_SetConfig+0x78>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a18      	ldr	r2, [pc, #96]	; (800322c <TIM_OC6_SetConfig+0xbc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <TIM_OC6_SetConfig+0x78>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <TIM_OC6_SetConfig+0xc0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d007      	beq.n	80031e8 <TIM_OC6_SetConfig+0x78>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <TIM_OC6_SetConfig+0xc4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d003      	beq.n	80031e8 <TIM_OC6_SetConfig+0x78>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a15      	ldr	r2, [pc, #84]	; (8003238 <TIM_OC6_SetConfig+0xc8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d109      	bne.n	80031fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	feff8fff 	.word	0xfeff8fff
 8003228:	40010000 	.word	0x40010000
 800322c:	40010400 	.word	0x40010400
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800

0800323c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f023 0201 	bic.w	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f023 030a 	bic.w	r3, r3, #10
 8003278:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	621a      	str	r2, [r3, #32]
}
 800328e:	bf00      	nop
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800329a:	b480      	push	{r7}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	f023 0210 	bic.w	r2, r3, #16
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	031b      	lsls	r3, r3, #12
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	621a      	str	r2, [r3, #32]
}
 80032ee:	bf00      	nop
 80032f0:	371c      	adds	r7, #28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <TIM_ITRx_SetConfig+0x38>)
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	f043 0307 	orr.w	r3, r3, #7
 800331e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	609a      	str	r2, [r3, #8]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	ffcfff8f 	.word	0xffcfff8f

08003338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	021a      	lsls	r2, r3, #8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	431a      	orrs	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4313      	orrs	r3, r2
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	609a      	str	r2, [r3, #8]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d8:	2302      	movs	r3, #2
 80033da:	e06d      	b.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a30      	ldr	r2, [pc, #192]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003416:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003428:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4313      	orrs	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d022      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344e:	d01d      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1d      	ldr	r2, [pc, #116]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d018      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d013      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1a      	ldr	r2, [pc, #104]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00e      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d009      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a15      	ldr	r2, [pc, #84]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d10c      	bne.n	80034a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003492:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	4313      	orrs	r3, r2
 800349c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010400 	.word	0x40010400
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00
 80034d8:	40001800 	.word	0x40001800
 80034dc:	40014000 	.word	0x40014000

080034e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e087      	b.n	800360c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a27      	ldr	r2, [pc, #156]	; (8003618 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d106      	bne.n	8003598 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d126      	bne.n	80035fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b6:	051b      	lsls	r3, r3, #20
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d106      	bne.n	80035fa <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40010000 	.word	0x40010000
 800361c:	40010400 	.word	0x40010400

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4d0d      	ldr	r5, [pc, #52]	; (8003658 <__libc_init_array+0x38>)
 8003624:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	2600      	movs	r6, #0
 800362c:	42a6      	cmp	r6, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	4d0b      	ldr	r5, [pc, #44]	; (8003660 <__libc_init_array+0x40>)
 8003632:	4c0c      	ldr	r4, [pc, #48]	; (8003664 <__libc_init_array+0x44>)
 8003634:	f000 f820 	bl	8003678 <_init>
 8003638:	1b64      	subs	r4, r4, r5
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	2600      	movs	r6, #0
 800363e:	42a6      	cmp	r6, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f855 3b04 	ldr.w	r3, [r5], #4
 8003648:	4798      	blx	r3
 800364a:	3601      	adds	r6, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003652:	4798      	blx	r3
 8003654:	3601      	adds	r6, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	080036a0 	.word	0x080036a0
 800365c:	080036a0 	.word	0x080036a0
 8003660:	080036a0 	.word	0x080036a0
 8003664:	080036a4 	.word	0x080036a4

08003668 <memset>:
 8003668:	4402      	add	r2, r0
 800366a:	4603      	mov	r3, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <_init>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr

08003684 <_fini>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr
