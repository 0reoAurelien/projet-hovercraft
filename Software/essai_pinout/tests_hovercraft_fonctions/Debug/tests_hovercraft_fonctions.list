
tests_hovercraft_fonctions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004740  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004914  08004914  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004914  08004914  00014914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800491c  0800491c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004920  08004920  00014920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000000c  08004930  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08004930  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013baa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002672  00000000  00000000  00033be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00036258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00037448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4c9  00000000  00000000  00038540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153f6  00000000  00000000  00052a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a8150  00000000  00000000  00067dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ff4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c08  00000000  00000000  0010ffa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080048b4 	.word	0x080048b4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080048b4 	.word	0x080048b4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <turnOnLED>:
*/
//Nous utilisons plutôt HAL_Delay()


// Fonction pour allumer une LED spécifique
void turnOnLED(GPIO_TypeDef* GPIOx, uint16_t pin){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	2201      	movs	r2, #1
 80004e0:	4619      	mov	r1, r3
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f001 fb72 	bl	8001bcc <HAL_GPIO_WritePin>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <turnOffLED>:

// Fonction pour éteindre une LED spécifique
void turnOffLED(GPIO_TypeDef* GPIOx, uint16_t pin){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 fb62 	bl	8001bcc <HAL_GPIO_WritePin>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <displayMode>:

// Fonction pour contrôler les LED en fonction du chiffre
void displayMode(int number){
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    // Éteind la LED
    turnOffLED(GPIOA, LED_USR);
 8000518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800051c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000520:	f7ff ffe6 	bl	80004f0 <turnOffLED>
    int N = 300;
 8000524:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000528:	60fb      	str	r3, [r7, #12]

    // Allumer les LED en fonction du chiffre
    switch (number) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b03      	cmp	r3, #3
 800052e:	f200 80d7 	bhi.w	80006e0 <displayMode+0x1d0>
 8000532:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <displayMode+0x28>)
 8000534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000538:	08000549 	.word	0x08000549
 800053c:	08000573 	.word	0x08000573
 8000540:	080005c5 	.word	0x080005c5
 8000544:	0800063f 	.word	0x0800063f
        case 0: //1 clignotement pour le mode 1
        	turnOnLED(GPIOA, LED_USR);
 8000548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f7ff ffbe 	bl	80004d0 <turnOnLED>
        	HAL_Delay(N);
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4618      	mov	r0, r3
 8000558:	f000 ff10 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 800055c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000564:	f7ff ffc4 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ff06 	bl	800137c <HAL_Delay>
            break;
 8000570:	e0bd      	b.n	80006ee <displayMode+0x1de>
        case 1: //2 clignotements pour le mode 2
        	turnOnLED(GPIOA, LED_USR);
 8000572:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057a:	f7ff ffa9 	bl	80004d0 <turnOnLED>
        	HAL_Delay(N);
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fefb 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058e:	f7ff ffaf 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	4618      	mov	r0, r3
 8000596:	f000 fef1 	bl	800137c <HAL_Delay>
        	turnOnLED(GPIOA, LED_USR);
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a2:	f7ff ff95 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 fee7 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b6:	f7ff ff9b 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 fedd 	bl	800137c <HAL_Delay>
            break;
 80005c2:	e094      	b.n	80006ee <displayMode+0x1de>
        case 2: //3 clignotements pour le mode 3
        	turnOnLED(GPIOA, LED_USR);
 80005c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f7ff ff80 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fed2 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 80005d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f7ff ff86 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fec8 	bl	800137c <HAL_Delay>
        	turnOnLED(GPIOA, LED_USR);
 80005ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f7ff ff6c 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 febe 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 8000600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000608:	f7ff ff72 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4618      	mov	r0, r3
 8000610:	f000 feb4 	bl	800137c <HAL_Delay>
        	turnOnLED(GPIOA, LED_USR);
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061c:	f7ff ff58 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 feaa 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 8000628:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000630:	f7ff ff5e 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fea0 	bl	800137c <HAL_Delay>
            break;
 800063c:	e057      	b.n	80006ee <displayMode+0x1de>
        case 3: //4 clignotements pour le mode 4
        	turnOnLED(GPIOA, LED_USR);
 800063e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f7ff ff43 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe95 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 8000652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800065a:	f7ff ff49 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fe8b 	bl	800137c <HAL_Delay>
        	turnOnLED(GPIOA, LED_USR);
 8000666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f7ff ff2f 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fe81 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 800067a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f7ff ff35 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fe77 	bl	800137c <HAL_Delay>
			turnOnLED(GPIOA, LED_USR);
 800068e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000696:	f7ff ff1b 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe6d 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 80006a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006aa:	f7ff ff21 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fe63 	bl	800137c <HAL_Delay>
        	turnOnLED(GPIOA, LED_USR);
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006be:	f7ff ff07 	bl	80004d0 <turnOnLED>
			HAL_Delay(N);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe59 	bl	800137c <HAL_Delay>
        	turnOffLED(GPIOA, LED_USR);
 80006ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d2:	f7ff ff0d 	bl	80004f0 <turnOffLED>
			HAL_Delay(N);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fe4f 	bl	800137c <HAL_Delay>
            break;
 80006de:	e006      	b.n	80006ee <displayMode+0x1de>
        default:
            // Valeur invalide, éteindre toutes les LED
            turnOffLED(GPIOA, LED_USR);
 80006e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f7ff ff02 	bl	80004f0 <turnOffLED>
            break;
 80006ec:	bf00      	nop
    }
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop

080006f8 <pressDetect>:


//attente et détection d'appui court ou long
int pressDetect(int sel){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	int chrono = 0; //compteur du nombre de passages dans la boucle cette fonction
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
	int btn_sel = 0; //variable donnée par lecture du bouton
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
	int blink = 0; //utile pour l'affichage indiquant un appui trop long du bouton
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
	while(1){
		btn_sel = 1-HAL_GPIO_ReadPin(GPIOB, BTN_SEL); //car il est configuré en pull-up
 800070c:	2140      	movs	r1, #64	; 0x40
 800070e:	482c      	ldr	r0, [pc, #176]	; (80007c0 <pressDetect+0xc8>)
 8000710:	f001 fa44 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000714:	4603      	mov	r3, r0
 8000716:	f1c3 0301 	rsb	r3, r3, #1
 800071a:	613b      	str	r3, [r7, #16]
		if (btn_sel){
 800071c:	693b      	ldr	r3, [r7, #16]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d036      	beq.n	8000790 <pressDetect+0x98>
			while (btn_sel){  //un appui trop long ne sera pas contabilisé
 8000722:	e032      	b.n	800078a <pressDetect+0x92>
				chrono++;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	3301      	adds	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
				if (chrono>59){
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	2b3b      	cmp	r3, #59	; 0x3b
 800072e:	dd21      	ble.n	8000774 <pressDetect+0x7c>
					while (btn_sel){
 8000730:	e017      	b.n	8000762 <pressDetect+0x6a>
						blink=1-blink;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f1c3 0301 	rsb	r3, r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
						HAL_GPIO_WritePin(GPIOA, LED_PWR, blink); //fait clignoter la LED_PWR
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	461a      	mov	r2, r3
 8000740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f001 fa40 	bl	8001bcc <HAL_GPIO_WritePin>
						btn_sel = 1-HAL_GPIO_ReadPin(GPIOB, BTN_SEL);  //(en configuration pull up)
 800074c:	2140      	movs	r1, #64	; 0x40
 800074e:	481c      	ldr	r0, [pc, #112]	; (80007c0 <pressDetect+0xc8>)
 8000750:	f001 fa24 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	f1c3 0301 	rsb	r3, r3, #1
 800075a:	613b      	str	r3, [r7, #16]
						HAL_Delay(250);
 800075c:	20fa      	movs	r0, #250	; 0xfa
 800075e:	f000 fe0d 	bl	800137c <HAL_Delay>
					while (btn_sel){
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1e4      	bne.n	8000732 <pressDetect+0x3a>
					}
					turnOffLED(GPIOA, LED_PWR);
 8000768:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f7ff febe 	bl	80004f0 <turnOffLED>
				}
				HAL_Delay(50);
 8000774:	2032      	movs	r0, #50	; 0x32
 8000776:	f000 fe01 	bl	800137c <HAL_Delay>
				btn_sel = 1-HAL_GPIO_ReadPin(GPIOB, BTN_SEL);  //(en configuration pull up)
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	4810      	ldr	r0, [pc, #64]	; (80007c0 <pressDetect+0xc8>)
 800077e:	f001 fa0d 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	f1c3 0301 	rsb	r3, r3, #1
 8000788:	613b      	str	r3, [r7, #16]
			while (btn_sel){  //un appui trop long ne sera pas contabilisé
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d1c9      	bne.n	8000724 <pressDetect+0x2c>
			}
		}
		if ((chrono>9)&&(chrono<60)){
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	2b09      	cmp	r3, #9
 8000794:	dd04      	ble.n	80007a0 <pressDetect+0xa8>
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	2b3b      	cmp	r3, #59	; 0x3b
 800079a:	dc01      	bgt.n	80007a0 <pressDetect+0xa8>
			return 1;
 800079c:	2301      	movs	r3, #1
 800079e:	e00a      	b.n	80007b6 <pressDetect+0xbe>
		}
		if ((chrono>1)&&(chrono<10)){ //minimum 100 ms période pour se prémunir des faux contacts
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	dd04      	ble.n	80007b0 <pressDetect+0xb8>
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	2b09      	cmp	r3, #9
 80007aa:	dc01      	bgt.n	80007b0 <pressDetect+0xb8>
			return 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e002      	b.n	80007b6 <pressDetect+0xbe>
		}
		chrono=0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
		btn_sel = 1-HAL_GPIO_ReadPin(GPIOB, BTN_SEL); //car il est configuré en pull-up
 80007b4:	e7aa      	b.n	800070c <pressDetect+0x14>
		//si les conditions ne sont pas vérifiées, aucun appui n'est détecté
	}
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	48000400 	.word	0x48000400

080007c4 <selectMode>:

// sélection avec les boutons du mode souhaité 
int selectMode(){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	int sel = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
	int btn_sel = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
	displayMode(sel);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fe9c 	bl	8000510 <displayMode>
	while(1){
		btn_sel = pressDetect(sel); 
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff8d 	bl	80006f8 <pressDetect>
 80007de:	6038      	str	r0, [r7, #0]
		if (btn_sel) {
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <selectMode+0x2c>
			displayMode(sel);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fe92 	bl	8000510 <displayMode>
			return sel;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	e00d      	b.n	800080c <selectMode+0x48>
		}
		else {
			sel = (sel + 1) % 4;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	425a      	negs	r2, r3
 80007f6:	f003 0303 	and.w	r3, r3, #3
 80007fa:	f002 0203 	and.w	r2, r2, #3
 80007fe:	bf58      	it	pl
 8000800:	4253      	negpl	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
			displayMode(sel);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff fe83 	bl	8000510 <displayMode>
		btn_sel = pressDetect(sel); 
 800080a:	e7e5      	b.n	80007d8 <selectMode+0x14>
		}
	}
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000816:	b093      	sub	sp, #76	; 0x4c
 8000818:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fd3a 	bl	8001292 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f8cb 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f000 facb 	bl	8000dbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000826:	f000 faab 	bl	8000d80 <MX_DMA_Init>
  MX_TIM1_Init();
 800082a:	f000 f955 	bl	8000ad8 <MX_TIM1_Init>
  MX_TIM16_Init();
 800082e:	f000 f9ff 	bl	8000c30 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8000832:	f000 fa75 	bl	8000d20 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000836:	f000 f90f 	bl	8000a58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800083a:	485e      	ldr	r0, [pc, #376]	; (80009b4 <main+0x1a0>)
 800083c:	f002 fbcc 	bl	8002fd8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //activation des générateurs PWM (timers)
 8000840:	2100      	movs	r1, #0
 8000842:	485c      	ldr	r0, [pc, #368]	; (80009b4 <main+0x1a0>)
 8000844:	f002 fc76 	bl	8003134 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 300);
 8000848:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <main+0x1a0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  int mode =0;
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
  while (1){
	  HAL_Delay(1000);
 8000856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800085a:	f000 fd8f 	bl	800137c <HAL_Delay>
	  mode = selectMode(); //sélectionne et affiche le mode souhaité
 800085e:	f7ff ffb1 	bl	80007c4 <selectMode>
 8000862:	6038      	str	r0, [r7, #0]
	  switch(mode){   //on exécute la bonne fonction selon le mode choisi
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2b03      	cmp	r3, #3
 8000868:	d878      	bhi.n	800095c <main+0x148>
 800086a:	a201      	add	r2, pc, #4	; (adr r2, 8000870 <main+0x5c>)
 800086c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000870:	08000881 	.word	0x08000881
 8000874:	080008cd 	.word	0x080008cd
 8000878:	08000919 	.word	0x08000919
 800087c:	0800093b 	.word	0x0800093b
		case 0:
			turnOnLED(GPIOA, LED_PWR);
 8000880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f7ff fe22 	bl	80004d0 <turnOnLED>
			HAL_Delay(3000);
 800088c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000890:	f000 fd74 	bl	800137c <HAL_Delay>
			//Forward();
			testmoteur(htim1,300);
 8000894:	4e47      	ldr	r6, [pc, #284]	; (80009b4 <main+0x1a0>)
 8000896:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800089a:	930f      	str	r3, [sp, #60]	; 0x3c
 800089c:	466d      	mov	r5, sp
 800089e:	f106 0410 	add.w	r4, r6, #16
 80008a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80008b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ba:	f000 fad2 	bl	8000e62 <testmoteur>
			turnOffLED(GPIOA, LED_PWR);
 80008be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c6:	f7ff fe13 	bl	80004f0 <turnOffLED>
			break;
 80008ca:	e047      	b.n	800095c <main+0x148>
		case 1:
			turnOnLED(GPIOA, LED_PWR);
 80008cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d4:	f7ff fdfc 	bl	80004d0 <turnOnLED>
			HAL_Delay(3000);
 80008d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008dc:	f000 fd4e 	bl	800137c <HAL_Delay>
			//ForwardFront();
			testmoteur(htim1,300);
 80008e0:	4e34      	ldr	r6, [pc, #208]	; (80009b4 <main+0x1a0>)
 80008e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80008e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80008e8:	466d      	mov	r5, sp
 80008ea:	f106 0410 	add.w	r4, r6, #16
 80008ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000902:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000906:	f000 faac 	bl	8000e62 <testmoteur>
			turnOffLED(GPIOA, LED_PWR);
 800090a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f7ff fded 	bl	80004f0 <turnOffLED>
			break;
 8000916:	e021      	b.n	800095c <main+0x148>
		case 2:
			turnOnLED(GPIOA, LED_PWR);
 8000918:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f7ff fdd6 	bl	80004d0 <turnOnLED>
			HAL_Delay(3000);
 8000924:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000928:	f000 fd28 	bl	800137c <HAL_Delay>
			//Forward10();

			turnOffLED(GPIOA, LED_PWR);
 800092c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000934:	f7ff fddc 	bl	80004f0 <turnOffLED>
			break;
 8000938:	e010      	b.n	800095c <main+0x148>
		case 3:
			turnOnLED(GPIOA, LED_PWR);
 800093a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f7ff fdc5 	bl	80004d0 <turnOnLED>
			HAL_Delay(3000);
 8000946:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800094a:	f000 fd17 	bl	800137c <HAL_Delay>
			//ForwardFast();
			turnOffLED(GPIOA, LED_PWR);
 800094e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f7ff fdcb 	bl	80004f0 <turnOffLED>
			break;
 800095a:	bf00      	nop
	  }
	  mode = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	603b      	str	r3, [r7, #0]

	  // indication avec les LEDs que le déplacement est terminé
	  for (int i=0; i<5; i++){
 8000960:	2300      	movs	r3, #0
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	e022      	b.n	80009ac <main+0x198>
		turnOnLED(GPIOA, LED_USR);
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f7ff fdaf 	bl	80004d0 <turnOnLED>
		turnOnLED(GPIOA, LED_PWR);
 8000972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f7ff fda9 	bl	80004d0 <turnOnLED>
		HAL_Delay(500);
 800097e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000982:	f000 fcfb 	bl	800137c <HAL_Delay>
		turnOffLED(GPIOA, LED_USR);
 8000986:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800098e:	f7ff fdaf 	bl	80004f0 <turnOffLED>
		turnOffLED(GPIOA, LED_PWR);
 8000992:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099a:	f7ff fda9 	bl	80004f0 <turnOffLED>
		HAL_Delay(500);
 800099e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a2:	f000 fceb 	bl	800137c <HAL_Delay>
	  for (int i=0; i<5; i++){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3301      	adds	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	ddd9      	ble.n	8000966 <main+0x152>
	  HAL_Delay(1000);
 80009b2:	e750      	b.n	8000856 <main+0x42>
 80009b4:	200000c4 	.word	0x200000c4

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b096      	sub	sp, #88	; 0x58
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2244      	movs	r2, #68	; 0x44
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f003 ff6c 	bl	80048a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009de:	f001 fa41 	bl	8001e64 <HAL_PWREx_ControlVoltageScaling>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009e8:	f000 fa36 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fe:	2302      	movs	r3, #2
 8000a00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a06:	230a      	movs	r3, #10
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 fa7a 	bl	8001f10 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a22:	f000 fa19 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	230f      	movs	r3, #15
 8000a28:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 fec8 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a4a:	f000 fa05 	bl	8000e58 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3758      	adds	r7, #88	; 0x58
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ad0 <MX_I2C1_Init+0x78>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <MX_I2C1_Init+0x7c>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a92:	480e      	ldr	r0, [pc, #56]	; (8000acc <MX_I2C1_Init+0x74>)
 8000a94:	f001 f8b2 	bl	8001bfc <HAL_I2C_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a9e:	f000 f9db 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <MX_I2C1_Init+0x74>)
 8000aa6:	f001 f938 	bl	8001d1a <HAL_I2CEx_ConfigAnalogFilter>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ab0:	f000 f9d2 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_I2C1_Init+0x74>)
 8000ab8:	f001 f97a 	bl	8001db0 <HAL_I2CEx_ConfigDigitalFilter>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ac2:	f000 f9c9 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000028 	.word	0x20000028
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	10909cec 	.word	0x10909cec

08000ad8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09a      	sub	sp, #104	; 0x68
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ade:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	615a      	str	r2, [r3, #20]
 8000b0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	222c      	movs	r2, #44	; 0x2c
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fec6 	bl	80048a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b18:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b1a:	4a44      	ldr	r2, [pc, #272]	; (8000c2c <MX_TIM1_Init+0x154>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000b1e:	4b42      	ldr	r3, [pc, #264]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b20:	224f      	movs	r2, #79	; 0x4f
 8000b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000b2a:	4b3f      	ldr	r3, [pc, #252]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b3d      	ldr	r3, [pc, #244]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b38:	4b3b      	ldr	r3, [pc, #236]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3e:	4b3a      	ldr	r3, [pc, #232]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b44:	4838      	ldr	r0, [pc, #224]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b46:	f002 f9ef 	bl	8002f28 <HAL_TIM_Base_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b50:	f000 f982 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b58:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4831      	ldr	r0, [pc, #196]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b62:	f002 fcd9 	bl	8003518 <HAL_TIM_ConfigClockSource>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b6c:	f000 f974 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b70:	482d      	ldr	r0, [pc, #180]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b72:	f002 fa7d 	bl	8003070 <HAL_TIM_PWM_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b7c:	f000 f96c 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b90:	4619      	mov	r1, r3
 8000b92:	4825      	ldr	r0, [pc, #148]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000b94:	f003 f92c 	bl	8003df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b9e:	f000 f95b 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba2:	2360      	movs	r3, #96	; 0x60
 8000ba4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000baa:	2300      	movs	r3, #0
 8000bac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4818      	ldr	r0, [pc, #96]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000bc8:	f002 fb92 	bl	80032f0 <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000bd2:	f000 f941 	bl	8000e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000c0c:	f003 f956 	bl	8003ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c16:	f000 f91f 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1a:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM1_Init+0x150>)
 8000c1c:	f000 fa16 	bl	800104c <HAL_TIM_MspPostInit>

}
 8000c20:	bf00      	nop
 8000c22:	3768      	adds	r7, #104	; 0x68
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000c4 	.word	0x200000c4
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b092      	sub	sp, #72	; 0x48
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
 8000c46:	615a      	str	r2, [r3, #20]
 8000c48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	222c      	movs	r2, #44	; 0x2c
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 fe27 	bl	80048a4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c58:	4a30      	ldr	r2, [pc, #192]	; (8000d1c <MX_TIM16_Init+0xec>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 8000c5c:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c5e:	2203      	movs	r2, #3
 8000c60:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c7e:	2280      	movs	r2, #128	; 0x80
 8000c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c82:	4825      	ldr	r0, [pc, #148]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c84:	f002 f950 	bl	8002f28 <HAL_TIM_Base_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000c8e:	f000 f8e3 	bl	8000e58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000c92:	4821      	ldr	r0, [pc, #132]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000c94:	f002 f9ec 	bl	8003070 <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000c9e:	f000 f8db 	bl	8000e58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	; 0x60
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4814      	ldr	r0, [pc, #80]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000cc8:	f002 fb12 	bl	80032f0 <HAL_TIM_PWM_ConfigChannel>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cd2:	f000 f8c1 	bl	8000e58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000cfa:	f003 f8df 	bl	8003ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000d04:	f000 f8a8 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_TIM16_Init+0xe8>)
 8000d0a:	f000 f99f 	bl	800104c <HAL_TIM_MspPostInit>

}
 8000d0e:	bf00      	nop
 8000d10:	3748      	adds	r7, #72	; 0x48
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000110 	.word	0x20000110
 8000d1c:	40014400 	.word	0x40014400

08000d20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <MX_USART2_UART_Init+0x5c>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_USART2_UART_Init+0x58>)
 8000d64:	f003 f922 	bl	8003fac <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d6e:	f000 f873 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000015c 	.word	0x2000015c
 8000d7c:	40004400 	.word	0x40004400

08000d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_DMA_Init+0x38>)
 8000d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <MX_DMA_Init+0x38>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6493      	str	r3, [r2, #72]	; 0x48
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_DMA_Init+0x38>)
 8000d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2011      	movs	r0, #17
 8000da4:	f000 fbe9 	bl	800157a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000da8:	2011      	movs	r0, #17
 8000daa:	f000 fc02 	bl	80015b2 <HAL_NVIC_EnableIRQ>

}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000

08000dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_GPIO_Init+0x94>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <MX_GPIO_Init+0x94>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_GPIO_Init+0x94>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_GPIO_Init+0x94>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <MX_GPIO_Init+0x94>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_GPIO_Init+0x94>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 fede 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8000e10:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f000 fd44 	bl	80018b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e30:	2340      	movs	r3, #64	; 0x40
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	4619      	mov	r1, r3
 8000e42:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_GPIO_Init+0x98>)
 8000e44:	f000 fd38 	bl	80018b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>

08000e62 <testmoteur>:
 */

#include "moteurs.h"

void testmoteur(TIM_HandleTypeDef tim,int val)
{
 8000e62:	b084      	sub	sp, #16
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	f107 0c08 	add.w	ip, r7, #8
 8000e6c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&tim, TIM_CHANNEL_1, val);
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e74:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(5000);
 8000e76:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e7a:	f000 fa7f 	bl	800137c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&tim, TIM_CHANNEL_1, 0);
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2200      	movs	r2, #0
 8000e82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e8c:	b004      	add	sp, #16
 8000e8e:	4770      	bx	lr

08000e90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	; 0x58
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2234      	movs	r2, #52	; 0x34
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fcd3 	bl	80048a4 <memset>
  if(hi2c->Instance==I2C1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a34      	ldr	r2, [pc, #208]	; (8000fd4 <HAL_I2C_MspInit+0xfc>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d160      	bne.n	8000fca <HAL_I2C_MspInit+0xf2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fe81 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f20:	f7ff ff9a 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <HAL_I2C_MspInit+0x100>)
 8000f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f28:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <HAL_I2C_MspInit+0x100>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <HAL_I2C_MspInit+0x100>)
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f42:	2312      	movs	r3, #18
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f4e:	2304      	movs	r3, #4
 8000f50:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f000 fcac 	bl	80018b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_I2C_MspInit+0x100>)
 8000f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f64:	4a1c      	ldr	r2, [pc, #112]	; (8000fd8 <HAL_I2C_MspInit+0x100>)
 8000f66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6c:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <HAL_I2C_MspInit+0x100>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_I2C_MspInit+0x108>)
 8000f7c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000f80:	2203      	movs	r2, #3
 8000f82:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000fb0:	f000 fb1a 	bl	80015e8 <HAL_DMA_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000fba:	f7ff ff4d 	bl	8000e58 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fc4:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <HAL_I2C_MspInit+0x104>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3758      	adds	r7, #88	; 0x58
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	2000007c 	.word	0x2000007c
 8000fe0:	40020080 	.word	0x40020080

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a13      	ldr	r2, [pc, #76]	; (8001040 <HAL_TIM_Base_MspInit+0x5c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10c      	bne.n	8001010 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff6:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_TIM_Base_MspInit+0x60>)
 8000ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <HAL_TIM_Base_MspInit+0x60>)
 8000ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001000:	6613      	str	r3, [r2, #96]	; 0x60
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <HAL_TIM_Base_MspInit+0x60>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800100e:	e010      	b.n	8001032 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <HAL_TIM_Base_MspInit+0x64>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10b      	bne.n	8001032 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_TIM_Base_MspInit+0x60>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <HAL_TIM_Base_MspInit+0x60>)
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	6613      	str	r3, [r2, #96]	; 0x60
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_TIM_Base_MspInit+0x60>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40012c00 	.word	0x40012c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40014400 	.word	0x40014400

0800104c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <HAL_TIM_MspPostInit+0xac>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d11e      	bne.n	80010ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <HAL_TIM_MspPostInit+0xb0>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <HAL_TIM_MspPostInit+0xb0>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b20      	ldr	r3, [pc, #128]	; (80010fc <HAL_TIM_MspPostInit+0xb0>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001086:	f44f 7380 	mov.w	r3, #256	; 0x100
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001098:	2301      	movs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f000 fc07 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80010aa:	e021      	b.n	80010f0 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_TIM_MspPostInit+0xb4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d11c      	bne.n	80010f0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_TIM_MspPostInit+0xb0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <HAL_TIM_MspPostInit+0xb0>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_TIM_MspPostInit+0xb0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ce:	2340      	movs	r3, #64	; 0x40
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	2302      	movs	r3, #2
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80010de:	230e      	movs	r3, #14
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f000 fbe4 	bl	80018b8 <HAL_GPIO_Init>
}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40012c00 	.word	0x40012c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40014400 	.word	0x40014400

08001104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b096      	sub	sp, #88	; 0x58
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2234      	movs	r2, #52	; 0x34
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fbbd 	bl	80048a4 <memset>
  if(huart->Instance==USART2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_UART_MspInit+0xa8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d136      	bne.n	80011a2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001138:	2300      	movs	r3, #0
 800113a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fd6b 	bl	8002c1c <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800114c:	f7ff fe84 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0xac>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <HAL_UART_MspInit+0xac>)
 8001156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115a:	6593      	str	r3, [r2, #88]	; 0x58
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_UART_MspInit+0xac>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_UART_MspInit+0xac>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	4a10      	ldr	r2, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0xac>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <HAL_UART_MspInit+0xac>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001180:	230c      	movs	r3, #12
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001190:	2307      	movs	r3, #7
 8001192:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001198:	4619      	mov	r1, r3
 800119a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800119e:	f000 fb8b 	bl	80018b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a2:	bf00      	nop
 80011a4:	3758      	adds	r7, #88	; 0x58
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004400 	.word	0x40004400
 80011b0:	40021000 	.word	0x40021000

080011b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <NMI_Handler+0x4>

080011ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <HardFault_Handler+0x4>

080011c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler+0x4>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <BusFault_Handler+0x4>

080011cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <UsageFault_Handler+0x4>

080011d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f89c 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <DMA1_Channel7_IRQHandler+0x10>)
 800120e:	f000 faa3 	bl	8001758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000007c 	.word	0x2000007c

0800121c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <SystemInit+0x20>)
 8001222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <SystemInit+0x20>)
 8001228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001244:	f7ff ffea 	bl	800121c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <LoopForever+0x6>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	; (8001280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LoopForever+0xe>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	; (800128c <LoopForever+0x16>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f003 faf5 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001272:	f7ff facf 	bl	8000814 <main>

08001276 <LoopForever>:

LoopForever:
    b LoopForever
 8001276:	e7fe      	b.n	8001276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001278:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001284:	08004924 	.word	0x08004924
  ldr r2, =_sbss
 8001288:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800128c:	200001e4 	.word	0x200001e4

08001290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC1_2_IRQHandler>

08001292 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f961 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f80e 	bl	80012c4 <HAL_InitTick>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e001      	b.n	80012b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b4:	f7ff fdec 	bl	8000e90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_InitTick+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d023      	beq.n	8001320 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_InitTick+0x70>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_InitTick+0x6c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96d 	bl	80015ce <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d809      	bhi.n	8001314 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f937 	bl	800157a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_InitTick+0x74>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e007      	b.n	8001324 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e004      	b.n	8001324 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	73fb      	strb	r3, [r7, #15]
 800131e:	e001      	b.n	8001324 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008
 8001334:	20000000 	.word	0x20000000
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	200001e0 	.word	0x200001e0

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200001e0 	.word	0x200001e0

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff3e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff31 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e098      	b.n	800172c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <HAL_DMA_Init+0x150>)
 8001602:	429a      	cmp	r2, r3
 8001604:	d80f      	bhi.n	8001626 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b4b      	ldr	r3, [pc, #300]	; (800173c <HAL_DMA_Init+0x154>)
 800160e:	4413      	add	r3, r2
 8001610:	4a4b      	ldr	r2, [pc, #300]	; (8001740 <HAL_DMA_Init+0x158>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	009a      	lsls	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_DMA_Init+0x15c>)
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
 8001624:	e00e      	b.n	8001644 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_DMA_Init+0x160>)
 800162e:	4413      	add	r3, r2
 8001630:	4a43      	ldr	r2, [pc, #268]	; (8001740 <HAL_DMA_Init+0x158>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	009a      	lsls	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a42      	ldr	r2, [pc, #264]	; (800174c <HAL_DMA_Init+0x164>)
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800165a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800169e:	d039      	beq.n	8001714 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_DMA_Init+0x15c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d11a      	bne.n	80016e0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016aa:	4b29      	ldr	r3, [pc, #164]	; (8001750 <HAL_DMA_Init+0x168>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f003 031c 	and.w	r3, r3, #28
 80016b6:	210f      	movs	r1, #15
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	4924      	ldr	r1, [pc, #144]	; (8001750 <HAL_DMA_Init+0x168>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_DMA_Init+0x168>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f003 031c 	and.w	r3, r3, #28
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	491d      	ldr	r1, [pc, #116]	; (8001750 <HAL_DMA_Init+0x168>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
 80016de:	e019      	b.n	8001714 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <HAL_DMA_Init+0x16c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f003 031c 	and.w	r3, r3, #28
 80016ec:	210f      	movs	r1, #15
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4917      	ldr	r1, [pc, #92]	; (8001754 <HAL_DMA_Init+0x16c>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_DMA_Init+0x16c>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 031c 	and.w	r3, r3, #28
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	4911      	ldr	r1, [pc, #68]	; (8001754 <HAL_DMA_Init+0x16c>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40020407 	.word	0x40020407
 800173c:	bffdfff8 	.word	0xbffdfff8
 8001740:	cccccccd 	.word	0xcccccccd
 8001744:	40020000 	.word	0x40020000
 8001748:	bffdfbf8 	.word	0xbffdfbf8
 800174c:	40020400 	.word	0x40020400
 8001750:	400200a8 	.word	0x400200a8
 8001754:	400204a8 	.word	0x400204a8

08001758 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	f003 031c 	and.w	r3, r3, #28
 8001778:	2204      	movs	r2, #4
 800177a:	409a      	lsls	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d026      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x7a>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d021      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0320 	and.w	r3, r3, #32
 8001798:	2b00      	cmp	r3, #0
 800179a:	d107      	bne.n	80017ac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0204 	bic.w	r2, r2, #4
 80017aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	f003 021c 	and.w	r2, r3, #28
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	2104      	movs	r1, #4
 80017ba:	fa01 f202 	lsl.w	r2, r1, r2
 80017be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d071      	beq.n	80018ac <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80017d0:	e06c      	b.n	80018ac <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f003 031c 	and.w	r3, r3, #28
 80017da:	2202      	movs	r2, #2
 80017dc:	409a      	lsls	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d02e      	beq.n	8001844 <HAL_DMA_IRQHandler+0xec>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d029      	beq.n	8001844 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0320 	and.w	r3, r3, #32
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10b      	bne.n	8001816 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 020a 	bic.w	r2, r2, #10
 800180c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f003 021c 	and.w	r2, r3, #28
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	2102      	movs	r1, #2
 8001824:	fa01 f202 	lsl.w	r2, r1, r2
 8001828:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	2b00      	cmp	r3, #0
 8001838:	d038      	beq.n	80018ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001842:	e033      	b.n	80018ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001848:	f003 031c 	and.w	r3, r3, #28
 800184c:	2208      	movs	r2, #8
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d02a      	beq.n	80018ae <HAL_DMA_IRQHandler+0x156>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d025      	beq.n	80018ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f022 020e 	bic.w	r2, r2, #14
 8001870:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f003 021c 	and.w	r2, r3, #28
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
}
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c6:	e14e      	b.n	8001b66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2101      	movs	r1, #1
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	4013      	ands	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8140 	beq.w	8001b60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d005      	beq.n	80018f8 <HAL_GPIO_Init+0x40>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d130      	bne.n	800195a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192e:	2201      	movs	r2, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	f003 0201 	and.w	r2, r3, #1
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	2b03      	cmp	r3, #3
 8001964:	d017      	beq.n	8001996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	2203      	movs	r2, #3
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d123      	bne.n	80019ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	08da      	lsrs	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3208      	adds	r2, #8
 80019aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	08da      	lsrs	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3208      	adds	r2, #8
 80019e4:	6939      	ldr	r1, [r7, #16]
 80019e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	2203      	movs	r2, #3
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0203 	and.w	r2, r3, #3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 809a 	beq.w	8001b60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2c:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HAL_GPIO_Init+0x2cc>)
 8001a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a30:	4a54      	ldr	r2, [pc, #336]	; (8001b84 <HAL_GPIO_Init+0x2cc>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6613      	str	r3, [r2, #96]	; 0x60
 8001a38:	4b52      	ldr	r3, [pc, #328]	; (8001b84 <HAL_GPIO_Init+0x2cc>)
 8001a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a44:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	089b      	lsrs	r3, r3, #2
 8001a4a:	3302      	adds	r3, #2
 8001a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a6e:	d013      	beq.n	8001a98 <HAL_GPIO_Init+0x1e0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_GPIO_Init+0x2d4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00d      	beq.n	8001a94 <HAL_GPIO_Init+0x1dc>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a45      	ldr	r2, [pc, #276]	; (8001b90 <HAL_GPIO_Init+0x2d8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0x1d8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a44      	ldr	r2, [pc, #272]	; (8001b94 <HAL_GPIO_Init+0x2dc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_GPIO_Init+0x1d4>
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e006      	b.n	8001a9a <HAL_GPIO_Init+0x1e2>
 8001a8c:	2307      	movs	r3, #7
 8001a8e:	e004      	b.n	8001a9a <HAL_GPIO_Init+0x1e2>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x1e2>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_GPIO_Init+0x1e2>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	f002 0203 	and.w	r2, r2, #3
 8001aa0:	0092      	lsls	r2, r2, #2
 8001aa2:	4093      	lsls	r3, r2
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aaa:	4937      	ldr	r1, [pc, #220]	; (8001b88 <HAL_GPIO_Init+0x2d0>)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3302      	adds	r3, #2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001adc:	4a2e      	ldr	r2, [pc, #184]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b06:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b0c:	4b22      	ldr	r3, [pc, #136]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b30:	4a19      	ldr	r2, [pc, #100]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b36:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b5a:	4a0f      	ldr	r2, [pc, #60]	; (8001b98 <HAL_GPIO_Init+0x2e0>)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f47f aea9 	bne.w	80018c8 <HAL_GPIO_Init+0x10>
  }
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	48000800 	.word	0x48000800
 8001b94:	48000c00 	.word	0x48000c00
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e081      	b.n	8001d12 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d106      	bne.n	8001c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff f958 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2224      	movs	r2, #36	; 0x24
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0201 	bic.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d107      	bne.n	8001c76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	e006      	b.n	8001c84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d104      	bne.n	8001c96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ca8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69d9      	ldr	r1, [r3, #28]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1a      	ldr	r2, [r3, #32]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d138      	bne.n	8001da2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e032      	b.n	8001da4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2224      	movs	r2, #36	; 0x24
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d6c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e000      	b.n	8001da4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001da2:	2302      	movs	r3, #2
  }
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d139      	bne.n	8001e3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e033      	b.n	8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 0201 	orr.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e72:	d130      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d038      	beq.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2232      	movs	r2, #50	; 0x32
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9b      	lsrs	r3, r3, #18
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea8:	e002      	b.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f2      	bne.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed0:	d110      	bne.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee2:	d007      	beq.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eec:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f000 bc4f 	b.w	80027c2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f24:	4b97      	ldr	r3, [pc, #604]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2e:	4b95      	ldr	r3, [pc, #596]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80e6 	beq.w	8002112 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4c>
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	f040 808d 	bne.w	800206e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	f040 8089 	bne.w	800206e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f5c:	4b89      	ldr	r3, [pc, #548]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <HAL_RCC_OscConfig+0x66>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f000 bc26 	b.w	80027c2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7a:	4b82      	ldr	r3, [pc, #520]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d004      	beq.n	8001f90 <HAL_RCC_OscConfig+0x80>
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8e:	e005      	b.n	8001f9c <HAL_RCC_OscConfig+0x8c>
 8001f90:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	091b      	lsrs	r3, r3, #4
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d224      	bcs.n	8001fea <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fdd9 	bl	8002b5c <RCC_SetFlashLatencyFromMSIRange>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f000 bc06 	b.w	80027c2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb6:	4b73      	ldr	r3, [pc, #460]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a72      	ldr	r2, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fbc:	f043 0308 	orr.w	r3, r3, #8
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b70      	ldr	r3, [pc, #448]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	496d      	ldr	r1, [pc, #436]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	021b      	lsls	r3, r3, #8
 8001fe2:	4968      	ldr	r1, [pc, #416]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	e025      	b.n	8002036 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fea:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a65      	ldr	r2, [pc, #404]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001ff0:	f043 0308 	orr.w	r3, r3, #8
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	4960      	ldr	r1, [pc, #384]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002008:	4b5e      	ldr	r3, [pc, #376]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	495b      	ldr	r1, [pc, #364]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d109      	bne.n	8002036 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fd98 	bl	8002b5c <RCC_SetFlashLatencyFromMSIRange>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e3c5      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002036:	f000 fccd 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	4950      	ldr	r1, [pc, #320]	; (8002188 <HAL_RCC_OscConfig+0x278>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	fa22 f303 	lsr.w	r3, r2, r3
 8002052:	4a4e      	ldr	r2, [pc, #312]	; (800218c <HAL_RCC_OscConfig+0x27c>)
 8002054:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002056:	4b4e      	ldr	r3, [pc, #312]	; (8002190 <HAL_RCC_OscConfig+0x280>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f932 	bl	80012c4 <HAL_InitTick>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d052      	beq.n	8002110 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800206a:	7dfb      	ldrb	r3, [r7, #23]
 800206c:	e3a9      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d032      	beq.n	80020dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002076:	4b43      	ldr	r3, [pc, #268]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a42      	ldr	r2, [pc, #264]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002082:	f7ff f96f 	bl	8001364 <HAL_GetTick>
 8002086:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800208a:	f7ff f96b 	bl	8001364 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e392      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800209c:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a8:	4b36      	ldr	r3, [pc, #216]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a35      	ldr	r2, [pc, #212]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	4930      	ldr	r1, [pc, #192]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c6:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	492b      	ldr	r1, [pc, #172]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
 80020da:	e01a      	b.n	8002112 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020dc:	4b29      	ldr	r3, [pc, #164]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e8:	f7ff f93c 	bl	8001364 <HAL_GetTick>
 80020ec:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f0:	f7ff f938 	bl	8001364 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e35f      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1e0>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d073      	beq.n	8002206 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	2b08      	cmp	r3, #8
 8002122:	d005      	beq.n	8002130 <HAL_RCC_OscConfig+0x220>
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d10e      	bne.n	8002148 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	2b03      	cmp	r3, #3
 800212e:	d10b      	bne.n	8002148 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d063      	beq.n	8002204 <HAL_RCC_OscConfig+0x2f4>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d15f      	bne.n	8002204 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e33c      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x250>
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0b      	ldr	r2, [pc, #44]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e025      	b.n	80021ac <HAL_RCC_OscConfig+0x29c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002168:	d114      	bne.n	8002194 <HAL_RCC_OscConfig+0x284>
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a02      	ldr	r2, [pc, #8]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 800217c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e013      	b.n	80021ac <HAL_RCC_OscConfig+0x29c>
 8002184:	40021000 	.word	0x40021000
 8002188:	080048cc 	.word	0x080048cc
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004
 8002194:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a8e      	ldr	r2, [pc, #568]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b8c      	ldr	r3, [pc, #560]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a8b      	ldr	r2, [pc, #556]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff f8d6 	bl	8001364 <HAL_GetTick>
 80021b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff f8d2 	bl	8001364 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e2f9      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x2ac>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff f8c2 	bl	8001364 <HAL_GetTick>
 80021e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff f8be 	bl	8001364 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e2e5      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f6:	4b77      	ldr	r3, [pc, #476]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2d4>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d060      	beq.n	80022d4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x314>
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d119      	bne.n	8002252 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d116      	bne.n	8002252 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002224:	4b6b      	ldr	r3, [pc, #428]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_RCC_OscConfig+0x32c>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e2c2      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	4962      	ldr	r1, [pc, #392]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002250:	e040      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d023      	beq.n	80022a2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800225a:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5d      	ldr	r2, [pc, #372]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002266:	f7ff f87d 	bl	8001364 <HAL_GetTick>
 800226a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226e:	f7ff f879 	bl	8001364 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e2a0      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002280:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228c:	4b51      	ldr	r3, [pc, #324]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	494e      	ldr	r1, [pc, #312]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e018      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a4b      	ldr	r2, [pc, #300]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7ff f859 	bl	8001364 <HAL_GetTick>
 80022b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7ff f855 	bl	8001364 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e27c      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c8:	4b42      	ldr	r3, [pc, #264]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 8082 	beq.w	80023e6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d05f      	beq.n	80023aa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d037      	beq.n	8002370 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e254      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d01b      	beq.n	800235a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002328:	4a2a      	ldr	r2, [pc, #168]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002332:	f7ff f817 	bl	8001364 <HAL_GetTick>
 8002336:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233a:	f7ff f813 	bl	8001364 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b11      	cmp	r3, #17
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e23a      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800234c:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1ef      	bne.n	800233a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002360:	f023 0210 	bic.w	r2, r3, #16
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	491a      	ldr	r1, [pc, #104]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7fe fff0 	bl	8001364 <HAL_GetTick>
 8002384:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe ffec 	bl	8001364 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b11      	cmp	r3, #17
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e213      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCC_OscConfig+0x478>
 80023a8:	e01d      	b.n	80023e6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe ffd3 	bl	8001364 <HAL_GetTick>
 80023be:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe ffcf 	bl	8001364 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b11      	cmp	r3, #17
 80023ce:	d903      	bls.n	80023d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1f6      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
 80023d4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d8:	4ba9      	ldr	r3, [pc, #676]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ed      	bne.n	80023c2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80bd 	beq.w	800256e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023fa:	4ba1      	ldr	r3, [pc, #644]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10e      	bne.n	8002424 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b9e      	ldr	r3, [pc, #632]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	4a9d      	ldr	r2, [pc, #628]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 800240c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002410:	6593      	str	r3, [r2, #88]	; 0x58
 8002412:	4b9b      	ldr	r3, [pc, #620]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002424:	4b97      	ldr	r3, [pc, #604]	; (8002684 <HAL_RCC_OscConfig+0x774>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d118      	bne.n	8002462 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002430:	4b94      	ldr	r3, [pc, #592]	; (8002684 <HAL_RCC_OscConfig+0x774>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a93      	ldr	r2, [pc, #588]	; (8002684 <HAL_RCC_OscConfig+0x774>)
 8002436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243c:	f7fe ff92 	bl	8001364 <HAL_GetTick>
 8002440:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002444:	f7fe ff8e 	bl	8001364 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1b5      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002456:	4b8b      	ldr	r3, [pc, #556]	; (8002684 <HAL_RCC_OscConfig+0x774>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d02c      	beq.n	80024c8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800246e:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002474:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	497f      	ldr	r1, [pc, #508]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002494:	4b7a      	ldr	r3, [pc, #488]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249a:	4a79      	ldr	r2, [pc, #484]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024a4:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	4a75      	ldr	r2, [pc, #468]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b4:	e018      	b.n	80024e8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024b6:	4b72      	ldr	r3, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	4a70      	ldr	r2, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c6:	e00f      	b.n	80024e8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024c8:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	4a6c      	ldr	r2, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024d0:	f023 0301 	bic.w	r3, r3, #1
 80024d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024d8:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	4a68      	ldr	r2, [pc, #416]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d016      	beq.n	800251e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe ff38 	bl	8001364 <HAL_GetTick>
 80024f4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f6:	e00a      	b.n	800250e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f8:	f7fe ff34 	bl	8001364 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e159      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800250e:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ed      	beq.n	80024f8 <HAL_RCC_OscConfig+0x5e8>
 800251c:	e01d      	b.n	800255a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe ff21 	bl	8001364 <HAL_GetTick>
 8002522:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7fe ff1d 	bl	8001364 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e142      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253c:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1ed      	bne.n	8002526 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800254a:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	4a4b      	ldr	r2, [pc, #300]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002552:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800255a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	4a46      	ldr	r2, [pc, #280]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800256c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0320 	and.w	r3, r3, #32
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01c      	beq.n	80025bc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002588:	4a3d      	ldr	r2, [pc, #244]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7fe fee7 	bl	8001364 <HAL_GetTick>
 8002596:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259a:	f7fe fee3 	bl	8001364 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e10a      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80025ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ef      	beq.n	800259a <HAL_RCC_OscConfig+0x68a>
 80025ba:	e01b      	b.n	80025f4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025bc:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80025be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c2:	4a2f      	ldr	r2, [pc, #188]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7fe feca 	bl	8001364 <HAL_GetTick>
 80025d0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d4:	f7fe fec6 	bl	8001364 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e0ed      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 80025e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ef      	bne.n	80025d4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80e1 	beq.w	80027c0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	2b02      	cmp	r3, #2
 8002604:	f040 80b5 	bne.w	8002772 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	429a      	cmp	r2, r3
 800261a:	d124      	bne.n	8002666 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002626:	3b01      	subs	r3, #1
 8002628:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11b      	bne.n	8002666 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d113      	bne.n	8002666 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	3b01      	subs	r3, #1
 800264c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d109      	bne.n	8002666 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	085b      	lsrs	r3, r3, #1
 800265e:	3b01      	subs	r3, #1
 8002660:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d05f      	beq.n	8002726 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d05a      	beq.n	8002722 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_RCC_OscConfig+0x770>)
 8002672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002676:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002678:	f7fe fe74 	bl	8001364 <HAL_GetTick>
 800267c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267e:	e00c      	b.n	800269a <HAL_RCC_OscConfig+0x78a>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fe6c 	bl	8001364 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e093      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269a:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a6:	4b49      	ldr	r3, [pc, #292]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <HAL_RCC_OscConfig+0x8c0>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026b6:	3a01      	subs	r2, #1
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026c0:	0212      	lsls	r2, r2, #8
 80026c2:	4311      	orrs	r1, r2
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026c8:	0852      	lsrs	r2, r2, #1
 80026ca:	3a01      	subs	r2, #1
 80026cc:	0552      	lsls	r2, r2, #21
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026d4:	0852      	lsrs	r2, r2, #1
 80026d6:	3a01      	subs	r2, #1
 80026d8:	0652      	lsls	r2, r2, #25
 80026da:	430a      	orrs	r2, r1
 80026dc:	493b      	ldr	r1, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026e2:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a39      	ldr	r2, [pc, #228]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80026e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ec:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026ee:	4b37      	ldr	r3, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	4a36      	ldr	r2, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80026f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026fa:	f7fe fe33 	bl	8001364 <HAL_GetTick>
 80026fe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fe2f 	bl	8001364 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e056      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002714:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002720:	e04e      	b.n	80027c0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e04d      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d146      	bne.n	80027c0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 8002738:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800273c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	4a22      	ldr	r2, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 8002744:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002748:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800274a:	f7fe fe0b 	bl	8001364 <HAL_GetTick>
 800274e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7fe fe07 	bl	8001364 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e02e      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x842>
 8002770:	e026      	b.n	80027c0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2b0c      	cmp	r3, #12
 8002776:	d021      	beq.n	80027bc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002778:	4b14      	ldr	r3, [pc, #80]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a13      	ldr	r2, [pc, #76]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 800277e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fdee 	bl	8001364 <HAL_GetTick>
 8002788:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe fdea 	bl	8001364 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e011      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	4a07      	ldr	r2, [pc, #28]	; (80027cc <HAL_RCC_OscConfig+0x8bc>)
 80027b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	60d3      	str	r3, [r2, #12]
 80027ba:	e001      	b.n	80027c0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	f99f808c 	.word	0xf99f808c

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0e7      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b75      	ldr	r3, [pc, #468]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b72      	ldr	r3, [pc, #456]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0207 	bic.w	r2, r3, #7
 80027fe:	4970      	ldr	r1, [pc, #448]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b6e      	ldr	r3, [pc, #440]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0cf      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002830:	429a      	cmp	r2, r3
 8002832:	d908      	bls.n	8002846 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	4960      	ldr	r1, [pc, #384]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d04c      	beq.n	80028ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285a:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d121      	bne.n	80028aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0a6      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002872:	4b54      	ldr	r3, [pc, #336]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d115      	bne.n	80028aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e09a      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800288a:	4b4e      	ldr	r3, [pc, #312]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e08e      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e086      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028aa:	4b46      	ldr	r3, [pc, #280]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 0203 	bic.w	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4943      	ldr	r1, [pc, #268]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fe fd52 	bl	8001364 <HAL_GetTick>
 80028c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c2:	e00a      	b.n	80028da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c4:	f7fe fd4e 	bl	8001364 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e06e      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	4b3a      	ldr	r3, [pc, #232]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 020c 	and.w	r2, r3, #12
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1eb      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d010      	beq.n	800291a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002904:	429a      	cmp	r2, r3
 8002906:	d208      	bcs.n	800291a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b2e      	ldr	r3, [pc, #184]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	492b      	ldr	r1, [pc, #172]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d210      	bcs.n	800294a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 0207 	bic.w	r2, r3, #7
 8002930:	4923      	ldr	r1, [pc, #140]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	4313      	orrs	r3, r2
 8002936:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_RCC_ClockConfig+0x1ec>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	429a      	cmp	r2, r3
 8002944:	d001      	beq.n	800294a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e036      	b.n	80029b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d008      	beq.n	8002968 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002956:	4b1b      	ldr	r3, [pc, #108]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	4918      	ldr	r1, [pc, #96]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4910      	ldr	r1, [pc, #64]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002988:	f000 f824 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	490b      	ldr	r1, [pc, #44]	; (80029c8 <HAL_RCC_ClockConfig+0x1f4>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
 80029a4:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1f8>)
 80029a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029a8:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_RCC_ClockConfig+0x1fc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fc89 	bl	80012c4 <HAL_InitTick>
 80029b2:	4603      	mov	r3, r0
 80029b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80029b6:	7afb      	ldrb	r3, [r7, #11]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	080048cc 	.word	0x080048cc
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e2:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ec:	4b3b      	ldr	r3, [pc, #236]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x34>
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b0c      	cmp	r3, #12
 8002a00:	d121      	bne.n	8002a46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d11e      	bne.n	8002a46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d107      	bne.n	8002a24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a14:	4b31      	ldr	r3, [pc, #196]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1a:	0a1b      	lsrs	r3, r3, #8
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e005      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a30:	4a2b      	ldr	r2, [pc, #172]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d102      	bne.n	8002a52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	e004      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a58:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d134      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a62:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0xa6>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d003      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0xac>
 8002a78:	e005      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a7c:	617b      	str	r3, [r7, #20]
      break;
 8002a7e:	e005      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a82:	617b      	str	r3, [r7, #20]
      break;
 8002a84:	e002      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	617b      	str	r3, [r7, #20]
      break;
 8002a8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a8c:	4b13      	ldr	r3, [pc, #76]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	3301      	adds	r3, #1
 8002a98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a9a:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	fb03 f202 	mul.w	r2, r3, r2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	0e5b      	lsrs	r3, r3, #25
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	3301      	adds	r3, #1
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002acc:	69bb      	ldr	r3, [r7, #24]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	080048e4 	.word	0x080048e4
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200

08002aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000000 	.word	0x20000000

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4904      	ldr	r1, [pc, #16]	; (8002b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	080048dc 	.word	0x080048dc

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b34:	f7ff ffda 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0adb      	lsrs	r3, r3, #11
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	080048dc 	.word	0x080048dc

08002b5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b74:	f7ff f968 	bl	8001e48 <HAL_PWREx_GetVoltageRange>
 8002b78:	6178      	str	r0, [r7, #20]
 8002b7a:	e014      	b.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	4a24      	ldr	r2, [pc, #144]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6593      	str	r3, [r2, #88]	; 0x58
 8002b88:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b94:	f7ff f958 	bl	8001e48 <HAL_PWREx_GetVoltageRange>
 8002b98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	4a1d      	ldr	r2, [pc, #116]	; (8002c14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bac:	d10b      	bne.n	8002bc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b80      	cmp	r3, #128	; 0x80
 8002bb2:	d919      	bls.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2ba0      	cmp	r3, #160	; 0xa0
 8002bb8:	d902      	bls.n	8002bc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bba:	2302      	movs	r3, #2
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	e013      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	e010      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b80      	cmp	r3, #128	; 0x80
 8002bca:	d902      	bls.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bcc:	2303      	movs	r3, #3
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	e00a      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d102      	bne.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd8:	2302      	movs	r3, #2
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	e004      	b.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b70      	cmp	r3, #112	; 0x70
 8002be2:	d101      	bne.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be4:	2301      	movs	r3, #1
 8002be6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f023 0207 	bic.w	r2, r3, #7
 8002bf0:	4909      	ldr	r1, [pc, #36]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d001      	beq.n	8002c0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40022000 	.word	0x40022000

08002c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c24:	2300      	movs	r3, #0
 8002c26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c28:	2300      	movs	r3, #0
 8002c2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 809e 	beq.w	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c3e:	4b46      	ldr	r3, [pc, #280]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00d      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c54:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe fb72 	bl	8001364 <HAL_GetTick>
 8002c80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe fb6e 	bl	8001364 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	74fb      	strb	r3, [r7, #19]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7cfb      	ldrb	r3, [r7, #19]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d15a      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002caa:	4b2b      	ldr	r3, [pc, #172]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01e      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d019      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc6:	4b24      	ldr	r3, [pc, #144]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd2:	4b21      	ldr	r3, [pc, #132]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	4a1f      	ldr	r2, [pc, #124]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	4a1b      	ldr	r2, [pc, #108]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cf2:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d016      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fb2e 	bl	8001364 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fb2a 	bl	8001364 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d902      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	74fb      	strb	r3, [r7, #19]
            break;
 8002d22:	e006      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0ec      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4904      	ldr	r1, [pc, #16]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d4e:	e009      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
 8002d54:	e006      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	7cfb      	ldrb	r3, [r7, #19]
 8002d62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d64:	7c7b      	ldrb	r3, [r7, #17]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d105      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	4a6d      	ldr	r2, [pc, #436]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d82:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 0203 	bic.w	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4964      	ldr	r1, [pc, #400]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da4:	4b5f      	ldr	r3, [pc, #380]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 020c 	bic.w	r2, r3, #12
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	495c      	ldr	r1, [pc, #368]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc6:	4b57      	ldr	r3, [pc, #348]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4953      	ldr	r1, [pc, #332]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00a      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002de8:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	494b      	ldr	r1, [pc, #300]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e0a:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4942      	ldr	r1, [pc, #264]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e2c:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	493a      	ldr	r1, [pc, #232]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e4e:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	4931      	ldr	r1, [pc, #196]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e70:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4929      	ldr	r1, [pc, #164]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	4920      	ldr	r1, [pc, #128]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec2:	4918      	ldr	r1, [pc, #96]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a12      	ldr	r2, [pc, #72]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ede:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d015      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	490a      	ldr	r1, [pc, #40]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0a:	d105      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f18:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e049      	b.n	8002fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f848 	bl	8000fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3304      	adds	r3, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fba0 	bl	80036ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d001      	beq.n	8002ff0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e033      	b.n	8003058 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_TIM_Base_Start+0x8c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_TIM_Base_Start+0x3e>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300a:	d004      	beq.n	8003016 <HAL_TIM_Base_Start+0x3e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a15      	ldr	r2, [pc, #84]	; (8003068 <HAL_TIM_Base_Start+0x90>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d115      	bne.n	8003042 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	4b13      	ldr	r3, [pc, #76]	; (800306c <HAL_TIM_Base_Start+0x94>)
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d015      	beq.n	8003054 <HAL_TIM_Base_Start+0x7c>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302e:	d011      	beq.n	8003054 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0201 	orr.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	e008      	b.n	8003054 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e000      	b.n	8003056 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003054:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40014000 	.word	0x40014000
 800306c:	00010007 	.word	0x00010007

08003070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e049      	b.n	8003116 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f841 	bl	800311e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3304      	adds	r3, #4
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f000 fafc 	bl	80036ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
	...

08003134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <HAL_TIM_PWM_Start+0x24>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e03c      	b.n	80031d2 <HAL_TIM_PWM_Start+0x9e>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b04      	cmp	r3, #4
 800315c:	d109      	bne.n	8003172 <HAL_TIM_PWM_Start+0x3e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	e02f      	b.n	80031d2 <HAL_TIM_PWM_Start+0x9e>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d109      	bne.n	800318c <HAL_TIM_PWM_Start+0x58>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	bf14      	ite	ne
 8003184:	2301      	movne	r3, #1
 8003186:	2300      	moveq	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	e022      	b.n	80031d2 <HAL_TIM_PWM_Start+0x9e>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d109      	bne.n	80031a6 <HAL_TIM_PWM_Start+0x72>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	e015      	b.n	80031d2 <HAL_TIM_PWM_Start+0x9e>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b10      	cmp	r3, #16
 80031aa:	d109      	bne.n	80031c0 <HAL_TIM_PWM_Start+0x8c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e008      	b.n	80031d2 <HAL_TIM_PWM_Start+0x9e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07e      	b.n	80032d8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <HAL_TIM_PWM_Start+0xb6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e8:	e023      	b.n	8003232 <HAL_TIM_PWM_Start+0xfe>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d104      	bne.n	80031fa <HAL_TIM_PWM_Start+0xc6>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f8:	e01b      	b.n	8003232 <HAL_TIM_PWM_Start+0xfe>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d104      	bne.n	800320a <HAL_TIM_PWM_Start+0xd6>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003208:	e013      	b.n	8003232 <HAL_TIM_PWM_Start+0xfe>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b0c      	cmp	r3, #12
 800320e:	d104      	bne.n	800321a <HAL_TIM_PWM_Start+0xe6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003218:	e00b      	b.n	8003232 <HAL_TIM_PWM_Start+0xfe>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b10      	cmp	r3, #16
 800321e:	d104      	bne.n	800322a <HAL_TIM_PWM_Start+0xf6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003228:	e003      	b.n	8003232 <HAL_TIM_PWM_Start+0xfe>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fdb2 	bl	8003da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a26      	ldr	r2, [pc, #152]	; (80032e0 <HAL_TIM_PWM_Start+0x1ac>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d009      	beq.n	800325e <HAL_TIM_PWM_Start+0x12a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a25      	ldr	r2, [pc, #148]	; (80032e4 <HAL_TIM_PWM_Start+0x1b0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d004      	beq.n	800325e <HAL_TIM_PWM_Start+0x12a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <HAL_TIM_PWM_Start+0x1b4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d101      	bne.n	8003262 <HAL_TIM_PWM_Start+0x12e>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_TIM_PWM_Start+0x130>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_TIM_PWM_Start+0x1ac>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d009      	beq.n	8003296 <HAL_TIM_PWM_Start+0x162>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328a:	d004      	beq.n	8003296 <HAL_TIM_PWM_Start+0x162>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <HAL_TIM_PWM_Start+0x1b0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d115      	bne.n	80032c2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_TIM_PWM_Start+0x1b8>)
 800329e:	4013      	ands	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2b06      	cmp	r3, #6
 80032a6:	d015      	beq.n	80032d4 <HAL_TIM_PWM_Start+0x1a0>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ae:	d011      	beq.n	80032d4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c0:	e008      	b.n	80032d4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e000      	b.n	80032d6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40012c00 	.word	0x40012c00
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40014400 	.word	0x40014400
 80032ec:	00010007 	.word	0x00010007

080032f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800330a:	2302      	movs	r3, #2
 800330c:	e0ff      	b.n	800350e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b14      	cmp	r3, #20
 800331a:	f200 80f0 	bhi.w	80034fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800331e:	a201      	add	r2, pc, #4	; (adr r2, 8003324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003324:	08003379 	.word	0x08003379
 8003328:	080034ff 	.word	0x080034ff
 800332c:	080034ff 	.word	0x080034ff
 8003330:	080034ff 	.word	0x080034ff
 8003334:	080033b9 	.word	0x080033b9
 8003338:	080034ff 	.word	0x080034ff
 800333c:	080034ff 	.word	0x080034ff
 8003340:	080034ff 	.word	0x080034ff
 8003344:	080033fb 	.word	0x080033fb
 8003348:	080034ff 	.word	0x080034ff
 800334c:	080034ff 	.word	0x080034ff
 8003350:	080034ff 	.word	0x080034ff
 8003354:	0800343b 	.word	0x0800343b
 8003358:	080034ff 	.word	0x080034ff
 800335c:	080034ff 	.word	0x080034ff
 8003360:	080034ff 	.word	0x080034ff
 8003364:	0800347d 	.word	0x0800347d
 8003368:	080034ff 	.word	0x080034ff
 800336c:	080034ff 	.word	0x080034ff
 8003370:	080034ff 	.word	0x080034ff
 8003374:	080034bd 	.word	0x080034bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f9f8 	bl	8003774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0208 	orr.w	r2, r2, #8
 8003392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6999      	ldr	r1, [r3, #24]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	619a      	str	r2, [r3, #24]
      break;
 80033b6:	e0a5      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fa54 	bl	800386c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6999      	ldr	r1, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	021a      	lsls	r2, r3, #8
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	619a      	str	r2, [r3, #24]
      break;
 80033f8:	e084      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	4618      	mov	r0, r3
 8003402:	f000 faad 	bl	8003960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0208 	orr.w	r2, r2, #8
 8003414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69da      	ldr	r2, [r3, #28]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0204 	bic.w	r2, r2, #4
 8003424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69d9      	ldr	r1, [r3, #28]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	61da      	str	r2, [r3, #28]
      break;
 8003438:	e064      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fb05 	bl	8003a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69d9      	ldr	r1, [r3, #28]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	021a      	lsls	r2, r3, #8
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	61da      	str	r2, [r3, #28]
      break;
 800347a:	e043      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fb42 	bl	8003b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0208 	orr.w	r2, r2, #8
 8003496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0204 	bic.w	r2, r2, #4
 80034a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034ba:	e023      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fb7a 	bl	8003bbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	021a      	lsls	r2, r3, #8
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034fc:	e002      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	75fb      	strb	r3, [r7, #23]
      break;
 8003502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800350c:	7dfb      	ldrb	r3, [r7, #23]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop

08003518 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIM_ConfigClockSource+0x1c>
 8003530:	2302      	movs	r3, #2
 8003532:	e0b6      	b.n	80036a2 <HAL_TIM_ConfigClockSource+0x18a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800355e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003570:	d03e      	beq.n	80035f0 <HAL_TIM_ConfigClockSource+0xd8>
 8003572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003576:	f200 8087 	bhi.w	8003688 <HAL_TIM_ConfigClockSource+0x170>
 800357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800357e:	f000 8086 	beq.w	800368e <HAL_TIM_ConfigClockSource+0x176>
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003586:	d87f      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
 8003588:	2b70      	cmp	r3, #112	; 0x70
 800358a:	d01a      	beq.n	80035c2 <HAL_TIM_ConfigClockSource+0xaa>
 800358c:	2b70      	cmp	r3, #112	; 0x70
 800358e:	d87b      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
 8003590:	2b60      	cmp	r3, #96	; 0x60
 8003592:	d050      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0x11e>
 8003594:	2b60      	cmp	r3, #96	; 0x60
 8003596:	d877      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
 8003598:	2b50      	cmp	r3, #80	; 0x50
 800359a:	d03c      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xfe>
 800359c:	2b50      	cmp	r3, #80	; 0x50
 800359e:	d873      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
 80035a0:	2b40      	cmp	r3, #64	; 0x40
 80035a2:	d058      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0x13e>
 80035a4:	2b40      	cmp	r3, #64	; 0x40
 80035a6:	d86f      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d064      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15e>
 80035ac:	2b30      	cmp	r3, #48	; 0x30
 80035ae:	d86b      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d060      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15e>
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d867      	bhi.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d05c      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15e>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d05a      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x15e>
 80035c0:	e062      	b.n	8003688 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	6899      	ldr	r1, [r3, #8]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f000 fbc7 	bl	8003d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	609a      	str	r2, [r3, #8]
      break;
 80035ee:	e04f      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	6899      	ldr	r1, [r3, #8]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f000 fbb0 	bl	8003d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003612:	609a      	str	r2, [r3, #8]
      break;
 8003614:	e03c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	461a      	mov	r2, r3
 8003624:	f000 fb24 	bl	8003c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2150      	movs	r1, #80	; 0x50
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fb7d 	bl	8003d2e <TIM_ITRx_SetConfig>
      break;
 8003634:	e02c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6859      	ldr	r1, [r3, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	461a      	mov	r2, r3
 8003644:	f000 fb43 	bl	8003cce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2160      	movs	r1, #96	; 0x60
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fb6d 	bl	8003d2e <TIM_ITRx_SetConfig>
      break;
 8003654:	e01c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f000 fb04 	bl	8003c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2140      	movs	r1, #64	; 0x40
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fb5d 	bl	8003d2e <TIM_ITRx_SetConfig>
      break;
 8003674:	e00c      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4619      	mov	r1, r3
 8003680:	4610      	mov	r0, r2
 8003682:	f000 fb54 	bl	8003d2e <TIM_ITRx_SetConfig>
      break;
 8003686:	e003      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
      break;
 800368c:	e000      	b.n	8003690 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800368e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <TIM_Base_SetConfig+0xbc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_Base_SetConfig+0x20>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d108      	bne.n	80036de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a21      	ldr	r2, [pc, #132]	; (8003768 <TIM_Base_SetConfig+0xbc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_Base_SetConfig+0x52>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0x52>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <TIM_Base_SetConfig+0xc0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0x52>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <TIM_Base_SetConfig+0xc4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <TIM_Base_SetConfig+0xbc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d007      	beq.n	800374c <TIM_Base_SetConfig+0xa0>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <TIM_Base_SetConfig+0xc0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <TIM_Base_SetConfig+0xa0>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <TIM_Base_SetConfig+0xc4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d103      	bne.n	8003754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	615a      	str	r2, [r3, #20]
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400

08003774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b480      	push	{r7}
 8003776:	b087      	sub	sp, #28
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	f023 0201 	bic.w	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f023 0302 	bic.w	r3, r3, #2
 80037c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a24      	ldr	r2, [pc, #144]	; (8003860 <TIM_OC1_SetConfig+0xec>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d007      	beq.n	80037e4 <TIM_OC1_SetConfig+0x70>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a23      	ldr	r2, [pc, #140]	; (8003864 <TIM_OC1_SetConfig+0xf0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC1_SetConfig+0x70>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a22      	ldr	r2, [pc, #136]	; (8003868 <TIM_OC1_SetConfig+0xf4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d10c      	bne.n	80037fe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f023 0308 	bic.w	r3, r3, #8
 80037ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <TIM_OC1_SetConfig+0xec>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_OC1_SetConfig+0xa2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <TIM_OC1_SetConfig+0xf0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_OC1_SetConfig+0xa2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a15      	ldr	r2, [pc, #84]	; (8003868 <TIM_OC1_SetConfig+0xf4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d111      	bne.n	800383a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800381c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	621a      	str	r2, [r3, #32]
}
 8003854:	bf00      	nop
 8003856:	371c      	adds	r7, #28
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	40012c00 	.word	0x40012c00
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400

0800386c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f023 0210 	bic.w	r2, r3, #16
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800389e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	021b      	lsls	r3, r3, #8
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0320 	bic.w	r3, r3, #32
 80038ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a22      	ldr	r2, [pc, #136]	; (8003954 <TIM_OC2_SetConfig+0xe8>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10d      	bne.n	80038ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a19      	ldr	r2, [pc, #100]	; (8003954 <TIM_OC2_SetConfig+0xe8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d007      	beq.n	8003904 <TIM_OC2_SetConfig+0x98>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a18      	ldr	r2, [pc, #96]	; (8003958 <TIM_OC2_SetConfig+0xec>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d003      	beq.n	8003904 <TIM_OC2_SetConfig+0x98>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a17      	ldr	r2, [pc, #92]	; (800395c <TIM_OC2_SetConfig+0xf0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d113      	bne.n	800392c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800390a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003912:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40014000 	.word	0x40014000
 800395c:	40014400 	.word	0x40014400

08003960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <TIM_OC3_SetConfig+0xe4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10d      	bne.n	80039de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	021b      	lsls	r3, r3, #8
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <TIM_OC3_SetConfig+0xe4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d007      	beq.n	80039f6 <TIM_OC3_SetConfig+0x96>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <TIM_OC3_SetConfig+0xe8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_OC3_SetConfig+0x96>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <TIM_OC3_SetConfig+0xec>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d113      	bne.n	8003a1e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	621a      	str	r2, [r3, #32]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40014400 	.word	0x40014400

08003a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <TIM_OC4_SetConfig+0xb0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_OC4_SetConfig+0x74>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <TIM_OC4_SetConfig+0xb4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_OC4_SetConfig+0x74>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <TIM_OC4_SetConfig+0xb8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d109      	bne.n	8003ad8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400

08003b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b087      	sub	sp, #28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003b50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	041b      	lsls	r3, r3, #16
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <TIM_OC5_SetConfig+0xa4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <TIM_OC5_SetConfig+0x6a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <TIM_OC5_SetConfig+0xa8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d003      	beq.n	8003b76 <TIM_OC5_SetConfig+0x6a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a11      	ldr	r2, [pc, #68]	; (8003bb8 <TIM_OC5_SetConfig+0xac>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d109      	bne.n	8003b8a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	021b      	lsls	r3, r3, #8
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	621a      	str	r2, [r3, #32]
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40014000 	.word	0x40014000
 8003bb8:	40014400 	.word	0x40014400

08003bbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	051b      	lsls	r3, r3, #20
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <TIM_OC6_SetConfig+0xa8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_OC6_SetConfig+0x6c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <TIM_OC6_SetConfig+0xac>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_OC6_SetConfig+0x6c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a12      	ldr	r2, [pc, #72]	; (8003c6c <TIM_OC6_SetConfig+0xb0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d109      	bne.n	8003c3c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	029b      	lsls	r3, r3, #10
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40012c00 	.word	0x40012c00
 8003c68:	40014000 	.word	0x40014000
 8003c6c:	40014400 	.word	0x40014400

08003c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0201 	bic.w	r2, r3, #1
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f023 030a 	bic.w	r3, r3, #10
 8003cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	621a      	str	r2, [r3, #32]
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b087      	sub	sp, #28
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	f023 0210 	bic.w	r2, r3, #16
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	031b      	lsls	r3, r3, #12
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	621a      	str	r2, [r3, #32]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f043 0307 	orr.w	r3, r3, #7
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	021a      	lsls	r2, r3, #8
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	431a      	orrs	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	609a      	str	r2, [r3, #8]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	2201      	movs	r2, #1
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a1a      	ldr	r2, [r3, #32]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a1a      	ldr	r2, [r3, #32]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e04f      	b.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d108      	bne.n	8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d004      	beq.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10c      	bne.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00
 8003eb8:	40014000 	.word	0x40014000

08003ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e060      	b.n	8003f9a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	041b      	lsls	r3, r3, #16
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d115      	bne.n	8003f88 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	051b      	lsls	r3, r3, #20
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40012c00 	.word	0x40012c00

08003fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e040      	b.n	8004040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd f898 	bl	8001104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f82c 	bl	8004048 <UART_SetConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e022      	b.n	8004040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fa7a 	bl	80044fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb01 	bl	8004640 <UART_CheckIdleState>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b08a      	sub	sp, #40	; 0x28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	431a      	orrs	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4313      	orrs	r3, r2
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b9e      	ldr	r3, [pc, #632]	; (80042f0 <UART_SetConfig+0x2a8>)
 8004078:	4013      	ands	r3, r2
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004080:	430b      	orrs	r3, r1
 8004082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a93      	ldr	r2, [pc, #588]	; (80042f4 <UART_SetConfig+0x2ac>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	4313      	orrs	r3, r2
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a8a      	ldr	r2, [pc, #552]	; (80042f8 <UART_SetConfig+0x2b0>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d126      	bne.n	8004120 <UART_SetConfig+0xd8>
 80040d2:	4b8a      	ldr	r3, [pc, #552]	; (80042fc <UART_SetConfig+0x2b4>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d81b      	bhi.n	8004118 <UART_SetConfig+0xd0>
 80040e0:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <UART_SetConfig+0xa0>)
 80040e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e6:	bf00      	nop
 80040e8:	080040f9 	.word	0x080040f9
 80040ec:	08004109 	.word	0x08004109
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004111 	.word	0x08004111
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fe:	e0ab      	b.n	8004258 <UART_SetConfig+0x210>
 8004100:	2302      	movs	r3, #2
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004106:	e0a7      	b.n	8004258 <UART_SetConfig+0x210>
 8004108:	2304      	movs	r3, #4
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800410e:	e0a3      	b.n	8004258 <UART_SetConfig+0x210>
 8004110:	2308      	movs	r3, #8
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e09f      	b.n	8004258 <UART_SetConfig+0x210>
 8004118:	2310      	movs	r3, #16
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411e:	e09b      	b.n	8004258 <UART_SetConfig+0x210>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a76      	ldr	r2, [pc, #472]	; (8004300 <UART_SetConfig+0x2b8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d138      	bne.n	800419c <UART_SetConfig+0x154>
 800412a:	4b74      	ldr	r3, [pc, #464]	; (80042fc <UART_SetConfig+0x2b4>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f003 030c 	and.w	r3, r3, #12
 8004134:	2b0c      	cmp	r3, #12
 8004136:	d82d      	bhi.n	8004194 <UART_SetConfig+0x14c>
 8004138:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <UART_SetConfig+0xf8>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004175 	.word	0x08004175
 8004144:	08004195 	.word	0x08004195
 8004148:	08004195 	.word	0x08004195
 800414c:	08004195 	.word	0x08004195
 8004150:	08004185 	.word	0x08004185
 8004154:	08004195 	.word	0x08004195
 8004158:	08004195 	.word	0x08004195
 800415c:	08004195 	.word	0x08004195
 8004160:	0800417d 	.word	0x0800417d
 8004164:	08004195 	.word	0x08004195
 8004168:	08004195 	.word	0x08004195
 800416c:	08004195 	.word	0x08004195
 8004170:	0800418d 	.word	0x0800418d
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417a:	e06d      	b.n	8004258 <UART_SetConfig+0x210>
 800417c:	2302      	movs	r3, #2
 800417e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004182:	e069      	b.n	8004258 <UART_SetConfig+0x210>
 8004184:	2304      	movs	r3, #4
 8004186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418a:	e065      	b.n	8004258 <UART_SetConfig+0x210>
 800418c:	2308      	movs	r3, #8
 800418e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004192:	e061      	b.n	8004258 <UART_SetConfig+0x210>
 8004194:	2310      	movs	r3, #16
 8004196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419a:	e05d      	b.n	8004258 <UART_SetConfig+0x210>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a58      	ldr	r2, [pc, #352]	; (8004304 <UART_SetConfig+0x2bc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d125      	bne.n	80041f2 <UART_SetConfig+0x1aa>
 80041a6:	4b55      	ldr	r3, [pc, #340]	; (80042fc <UART_SetConfig+0x2b4>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041b0:	2b30      	cmp	r3, #48	; 0x30
 80041b2:	d016      	beq.n	80041e2 <UART_SetConfig+0x19a>
 80041b4:	2b30      	cmp	r3, #48	; 0x30
 80041b6:	d818      	bhi.n	80041ea <UART_SetConfig+0x1a2>
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d00a      	beq.n	80041d2 <UART_SetConfig+0x18a>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d814      	bhi.n	80041ea <UART_SetConfig+0x1a2>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <UART_SetConfig+0x182>
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d008      	beq.n	80041da <UART_SetConfig+0x192>
 80041c8:	e00f      	b.n	80041ea <UART_SetConfig+0x1a2>
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d0:	e042      	b.n	8004258 <UART_SetConfig+0x210>
 80041d2:	2302      	movs	r3, #2
 80041d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d8:	e03e      	b.n	8004258 <UART_SetConfig+0x210>
 80041da:	2304      	movs	r3, #4
 80041dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e0:	e03a      	b.n	8004258 <UART_SetConfig+0x210>
 80041e2:	2308      	movs	r3, #8
 80041e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e8:	e036      	b.n	8004258 <UART_SetConfig+0x210>
 80041ea:	2310      	movs	r3, #16
 80041ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f0:	e032      	b.n	8004258 <UART_SetConfig+0x210>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <UART_SetConfig+0x2ac>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d12a      	bne.n	8004252 <UART_SetConfig+0x20a>
 80041fc:	4b3f      	ldr	r3, [pc, #252]	; (80042fc <UART_SetConfig+0x2b4>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800420a:	d01a      	beq.n	8004242 <UART_SetConfig+0x1fa>
 800420c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004210:	d81b      	bhi.n	800424a <UART_SetConfig+0x202>
 8004212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004216:	d00c      	beq.n	8004232 <UART_SetConfig+0x1ea>
 8004218:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421c:	d815      	bhi.n	800424a <UART_SetConfig+0x202>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <UART_SetConfig+0x1e2>
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d008      	beq.n	800423a <UART_SetConfig+0x1f2>
 8004228:	e00f      	b.n	800424a <UART_SetConfig+0x202>
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004230:	e012      	b.n	8004258 <UART_SetConfig+0x210>
 8004232:	2302      	movs	r3, #2
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004238:	e00e      	b.n	8004258 <UART_SetConfig+0x210>
 800423a:	2304      	movs	r3, #4
 800423c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004240:	e00a      	b.n	8004258 <UART_SetConfig+0x210>
 8004242:	2308      	movs	r3, #8
 8004244:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004248:	e006      	b.n	8004258 <UART_SetConfig+0x210>
 800424a:	2310      	movs	r3, #16
 800424c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004250:	e002      	b.n	8004258 <UART_SetConfig+0x210>
 8004252:	2310      	movs	r3, #16
 8004254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <UART_SetConfig+0x2ac>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f040 808a 	bne.w	8004378 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004268:	2b08      	cmp	r3, #8
 800426a:	d824      	bhi.n	80042b6 <UART_SetConfig+0x26e>
 800426c:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <UART_SetConfig+0x22c>)
 800426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004272:	bf00      	nop
 8004274:	08004299 	.word	0x08004299
 8004278:	080042b7 	.word	0x080042b7
 800427c:	080042a1 	.word	0x080042a1
 8004280:	080042b7 	.word	0x080042b7
 8004284:	080042a7 	.word	0x080042a7
 8004288:	080042b7 	.word	0x080042b7
 800428c:	080042b7 	.word	0x080042b7
 8004290:	080042b7 	.word	0x080042b7
 8004294:	080042af 	.word	0x080042af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004298:	f7fe fc34 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 800429c:	61f8      	str	r0, [r7, #28]
        break;
 800429e:	e010      	b.n	80042c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042a0:	4b19      	ldr	r3, [pc, #100]	; (8004308 <UART_SetConfig+0x2c0>)
 80042a2:	61fb      	str	r3, [r7, #28]
        break;
 80042a4:	e00d      	b.n	80042c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042a6:	f7fe fb95 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 80042aa:	61f8      	str	r0, [r7, #28]
        break;
 80042ac:	e009      	b.n	80042c2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042b2:	61fb      	str	r3, [r7, #28]
        break;
 80042b4:	e005      	b.n	80042c2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80042c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8109 	beq.w	80044dc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d305      	bcc.n	80042e6 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d912      	bls.n	800430c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042ec:	e0f6      	b.n	80044dc <UART_SetConfig+0x494>
 80042ee:	bf00      	nop
 80042f0:	efff69f3 	.word	0xefff69f3
 80042f4:	40008000 	.word	0x40008000
 80042f8:	40013800 	.word	0x40013800
 80042fc:	40021000 	.word	0x40021000
 8004300:	40004400 	.word	0x40004400
 8004304:	40004800 	.word	0x40004800
 8004308:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2200      	movs	r2, #0
 8004310:	461c      	mov	r4, r3
 8004312:	4615      	mov	r5, r2
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	022b      	lsls	r3, r5, #8
 800431e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004322:	0222      	lsls	r2, r4, #8
 8004324:	68f9      	ldr	r1, [r7, #12]
 8004326:	6849      	ldr	r1, [r1, #4]
 8004328:	0849      	lsrs	r1, r1, #1
 800432a:	2000      	movs	r0, #0
 800432c:	4688      	mov	r8, r1
 800432e:	4681      	mov	r9, r0
 8004330:	eb12 0a08 	adds.w	sl, r2, r8
 8004334:	eb43 0b09 	adc.w	fp, r3, r9
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	607a      	str	r2, [r7, #4]
 8004342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004346:	4650      	mov	r0, sl
 8004348:	4659      	mov	r1, fp
 800434a:	f7fb ff3f 	bl	80001cc <__aeabi_uldivmod>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4613      	mov	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800435c:	d308      	bcc.n	8004370 <UART_SetConfig+0x328>
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004364:	d204      	bcs.n	8004370 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	e0b5      	b.n	80044dc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004376:	e0b1      	b.n	80044dc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004380:	d15d      	bne.n	800443e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004386:	2b08      	cmp	r3, #8
 8004388:	d827      	bhi.n	80043da <UART_SetConfig+0x392>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <UART_SetConfig+0x348>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043db 	.word	0x080043db
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043db 	.word	0x080043db
 80043a8:	080043db 	.word	0x080043db
 80043ac:	080043db 	.word	0x080043db
 80043b0:	080043d3 	.word	0x080043d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7fe fba6 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 80043b8:	61f8      	str	r0, [r7, #28]
        break;
 80043ba:	e014      	b.n	80043e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043bc:	f7fe fbb8 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 80043c0:	61f8      	str	r0, [r7, #28]
        break;
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c4:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <UART_SetConfig+0x4b0>)
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e00d      	b.n	80043e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ca:	f7fe fb03 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 80043ce:	61f8      	str	r0, [r7, #28]
        break;
 80043d0:	e009      	b.n	80043e6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043d6:	61fb      	str	r3, [r7, #28]
        break;
 80043d8:	e005      	b.n	80043e6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d077      	beq.n	80044dc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	005a      	lsls	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	441a      	add	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b0f      	cmp	r3, #15
 8004406:	d916      	bls.n	8004436 <UART_SetConfig+0x3ee>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440e:	d212      	bcs.n	8004436 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f023 030f 	bic.w	r3, r3, #15
 8004418:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	b29b      	uxth	r3, r3
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	b29a      	uxth	r2, r3
 8004426:	8afb      	ldrh	r3, [r7, #22]
 8004428:	4313      	orrs	r3, r2
 800442a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	8afa      	ldrh	r2, [r7, #22]
 8004432:	60da      	str	r2, [r3, #12]
 8004434:	e052      	b.n	80044dc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800443c:	e04e      	b.n	80044dc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800443e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004442:	2b08      	cmp	r3, #8
 8004444:	d827      	bhi.n	8004496 <UART_SetConfig+0x44e>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x404>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004471 	.word	0x08004471
 8004450:	08004479 	.word	0x08004479
 8004454:	08004481 	.word	0x08004481
 8004458:	08004497 	.word	0x08004497
 800445c:	08004487 	.word	0x08004487
 8004460:	08004497 	.word	0x08004497
 8004464:	08004497 	.word	0x08004497
 8004468:	08004497 	.word	0x08004497
 800446c:	0800448f 	.word	0x0800448f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe fb48 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8004474:	61f8      	str	r0, [r7, #28]
        break;
 8004476:	e014      	b.n	80044a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fe fb5a 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 800447c:	61f8      	str	r0, [r7, #28]
        break;
 800447e:	e010      	b.n	80044a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004480:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <UART_SetConfig+0x4b0>)
 8004482:	61fb      	str	r3, [r7, #28]
        break;
 8004484:	e00d      	b.n	80044a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004486:	f7fe faa5 	bl	80029d4 <HAL_RCC_GetSysClockFreq>
 800448a:	61f8      	str	r0, [r7, #28]
        break;
 800448c:	e009      	b.n	80044a2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800448e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004492:	61fb      	str	r3, [r7, #28]
        break;
 8004494:	e005      	b.n	80044a2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044a0:	bf00      	nop
    }

    if (pclk != 0U)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d019      	beq.n	80044dc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	085a      	lsrs	r2, r3, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b0f      	cmp	r3, #15
 80044c0:	d909      	bls.n	80044d6 <UART_SetConfig+0x48e>
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d205      	bcs.n	80044d6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60da      	str	r2, [r3, #12]
 80044d4:	e002      	b.n	80044dc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	; 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f6:	bf00      	nop
 80044f8:	00f42400 	.word	0x00f42400

080044fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01a      	beq.n	8004612 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045fa:	d10a      	bne.n	8004612 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	605a      	str	r2, [r3, #4]
  }
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af02      	add	r7, sp, #8
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004650:	f7fc fe88 	bl	8001364 <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d10e      	bne.n	8004682 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f82d 	bl	80046d2 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e023      	b.n	80046ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b04      	cmp	r3, #4
 800468e:	d10e      	bne.n	80046ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f817 	bl	80046d2 <UART_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e00d      	b.n	80046ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b09c      	sub	sp, #112	; 0x70
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e2:	e0a5      	b.n	8004830 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	f000 80a1 	beq.w	8004830 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ee:	f7fc fe39 	bl	8001364 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d302      	bcc.n	8004704 <UART_WaitOnFlagUntilTimeout+0x32>
 80046fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004700:	2b00      	cmp	r3, #0
 8004702:	d13e      	bne.n	8004782 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004718:	667b      	str	r3, [r7, #100]	; 0x64
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004722:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004724:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e6      	bne.n	8004704 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3308      	adds	r3, #8
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	663b      	str	r3, [r7, #96]	; 0x60
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004756:	64ba      	str	r2, [r7, #72]	; 0x48
 8004758:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800475c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2220      	movs	r2, #32
 8004774:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e067      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d04f      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800479a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479e:	d147      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e6      	bne.n	80047aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3308      	adds	r3, #8
 80047e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	613b      	str	r3, [r7, #16]
   return(result);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3308      	adds	r3, #8
 80047fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047fc:	623a      	str	r2, [r7, #32]
 80047fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	69f9      	ldr	r1, [r7, #28]
 8004802:	6a3a      	ldr	r2, [r7, #32]
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	61bb      	str	r3, [r7, #24]
   return(result);
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e010      	b.n	8004852 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	f43f af4a 	beq.w	80046e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3770      	adds	r7, #112	; 0x70
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4d0d      	ldr	r5, [pc, #52]	; (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	; (8004898 <__libc_init_array+0x3c>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2600      	movs	r6, #0
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4d0b      	ldr	r5, [pc, #44]	; (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	; (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 f820 	bl	80048b4 <_init>
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2600      	movs	r6, #0
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	0800491c 	.word	0x0800491c
 8004898:	0800491c 	.word	0x0800491c
 800489c:	0800491c 	.word	0x0800491c
 80048a0:	08004920 	.word	0x08004920

080048a4 <memset>:
 80048a4:	4402      	add	r2, r0
 80048a6:	4603      	mov	r3, r0
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d100      	bne.n	80048ae <memset+0xa>
 80048ac:	4770      	bx	lr
 80048ae:	f803 1b01 	strb.w	r1, [r3], #1
 80048b2:	e7f9      	b.n	80048a8 <memset+0x4>

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
