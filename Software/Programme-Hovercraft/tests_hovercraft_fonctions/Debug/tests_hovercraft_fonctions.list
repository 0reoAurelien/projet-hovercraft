
tests_hovercraft_fonctions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e88  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004014  08004014  00014014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800405c  0800405c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004064  08004064  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800406c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08004078  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004078  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bcf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b1  00000000  00000000  00032c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00034dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00035ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0bd  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e1e  00000000  00000000  00050fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7e02  00000000  00000000  00064de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010cbe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048c4  00000000  00000000  0010cc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003ffc 	.word	0x08003ffc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003ffc 	.word	0x08003ffc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	b091      	sub	sp, #68	; 0x44
 80004d4:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc7a 	bl	8000dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f83d 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 fa13 	bl	8000908 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004e2:	f000 f8bd 	bl	8000660 <MX_TIM1_Init>
  MX_TIM16_Init();
 80004e6:	f000 f967 	bl	80007b8 <MX_TIM16_Init>
  MX_I2C3_Init();
 80004ea:	f000 f87b 	bl	80005e4 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f9db 	bl	80008a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004f2:	2100      	movs	r1, #0
 80004f4:	4816      	ldr	r0, [pc, #88]	; (8000550 <main+0x80>)
 80004f6:	f002 f9c1 	bl	800287c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80004fa:	2100      	movs	r1, #0
 80004fc:	4815      	ldr	r0, [pc, #84]	; (8000554 <main+0x84>)
 80004fe:	f002 f9bd 	bl	800287c <HAL_TIM_PWM_Start>

  /*test moteur*/
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <main+0x80>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(10000);
 800050c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000510:	f000 fcd2 	bl	8000eb8 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <main+0x80>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(500);
 800051c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000520:	f000 fcca 	bl	8000eb8 <HAL_Delay>

  /*test3 appel fonction dans fichier .c externe*/
  testmoteur(htim1,300);
 8000524:	4e0a      	ldr	r6, [pc, #40]	; (8000550 <main+0x80>)
 8000526:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800052a:	930f      	str	r3, [sp, #60]	; 0x3c
 800052c:	466d      	mov	r5, sp
 800052e:	f106 0410 	add.w	r4, r6, #16
 8000532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000538:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800053a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800053c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800053e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000542:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000546:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800054a:	f000 fa42 	bl	80009d2 <testmoteur>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054e:	e7fe      	b.n	800054e <main+0x7e>
 8000550:	2000007c 	.word	0x2000007c
 8000554:	200000c8 	.word	0x200000c8

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fd40 	bl	8003fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f001 f863 	bl	8001648 <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 fa1e 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800058c:	2310      	movs	r3, #16
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000598:	2360      	movs	r3, #96	; 0x60
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	2300      	movs	r3, #0
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 f8a5 	bl	80016f4 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005b0:	f000 fa0a 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f001 fcf3 	bl	8001fb8 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d8:	f000 f9f6 	bl	80009c8 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3758      	adds	r7, #88	; 0x58
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <MX_I2C3_Init+0x74>)
 80005ea:	4a1c      	ldr	r2, [pc, #112]	; (800065c <MX_I2C3_Init+0x78>)
 80005ec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_I2C3_Init+0x74>)
 80005f0:	f640 6214 	movw	r2, #3604	; 0xe14
 80005f4:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_I2C3_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fc:	4b16      	ldr	r3, [pc, #88]	; (8000658 <MX_I2C3_Init+0x74>)
 80005fe:	2201      	movs	r2, #1
 8000600:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_I2C3_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <MX_I2C3_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800060e:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_I2C3_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000614:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_I2C3_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_I2C3_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000620:	480d      	ldr	r0, [pc, #52]	; (8000658 <MX_I2C3_Init+0x74>)
 8000622:	f000 fedd 	bl	80013e0 <HAL_I2C_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f9cc 	bl	80009c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000630:	2100      	movs	r1, #0
 8000632:	4809      	ldr	r0, [pc, #36]	; (8000658 <MX_I2C3_Init+0x74>)
 8000634:	f000 ff63 	bl	80014fe <HAL_I2CEx_ConfigAnalogFilter>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800063e:	f000 f9c3 	bl	80009c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000642:	2100      	movs	r1, #0
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_I2C3_Init+0x74>)
 8000646:	f000 ffa5 	bl	8001594 <HAL_I2CEx_ConfigDigitalFilter>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 f9ba 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000028 	.word	0x20000028
 800065c:	40005c00 	.word	0x40005c00

08000660 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09a      	sub	sp, #104	; 0x68
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000674:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000680:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
 8000690:	615a      	str	r2, [r3, #20]
 8000692:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	222c      	movs	r2, #44	; 0x2c
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fca6 	bl	8003fec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a0:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006a2:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <MX_TIM1_Init+0x154>)
 80006a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006a6:	4b42      	ldr	r3, [pc, #264]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b40      	ldr	r3, [pc, #256]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006b2:	4b3f      	ldr	r3, [pc, #252]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c0:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006cc:	4838      	ldr	r0, [pc, #224]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006ce:	f002 f81d 	bl	800270c <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006d8:	f000 f976 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e6:	4619      	mov	r1, r3
 80006e8:	4831      	ldr	r0, [pc, #196]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006ea:	f002 fab9 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80006f4:	f000 f968 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f8:	482d      	ldr	r0, [pc, #180]	; (80007b0 <MX_TIM1_Init+0x150>)
 80006fa:	f002 f85e 	bl	80027ba <HAL_TIM_PWM_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000704:	f000 f960 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000708:	2300      	movs	r3, #0
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000714:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000718:	4619      	mov	r1, r3
 800071a:	4825      	ldr	r0, [pc, #148]	; (80007b0 <MX_TIM1_Init+0x150>)
 800071c:	f002 ff0c 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000726:	f000 f94f 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072a:	2360      	movs	r3, #96	; 0x60
 800072c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000732:	2300      	movs	r3, #0
 8000734:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000736:	2300      	movs	r3, #0
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	4818      	ldr	r0, [pc, #96]	; (80007b0 <MX_TIM1_Init+0x150>)
 8000750:	f002 f972 	bl	8002a38 <HAL_TIM_PWM_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800075a:	f000 f935 	bl	80009c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <MX_TIM1_Init+0x150>)
 8000794:	f002 ff36 	bl	8003604 <HAL_TIMEx_ConfigBreakDeadTime>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800079e:	f000 f913 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007a2:	4803      	ldr	r0, [pc, #12]	; (80007b0 <MX_TIM1_Init+0x150>)
 80007a4:	f000 f9fa 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 80007a8:	bf00      	nop
 80007aa:	3768      	adds	r7, #104	; 0x68
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000007c 	.word	0x2000007c
 80007b4:	40012c00 	.word	0x40012c00

080007b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b092      	sub	sp, #72	; 0x48
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	222c      	movs	r2, #44	; 0x2c
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 fc07 	bl	8003fec <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_TIM16_Init+0xe8>)
 80007e0:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <MX_TIM16_Init+0xec>)
 80007e2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80007e4:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <MX_TIM16_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_TIM16_Init+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_TIM16_Init+0xe8>)
 80007f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_TIM16_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_TIM16_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_TIM16_Init+0xe8>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800080a:	4825      	ldr	r0, [pc, #148]	; (80008a0 <MX_TIM16_Init+0xe8>)
 800080c:	f001 ff7e 	bl	800270c <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000816:	f000 f8d7 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800081a:	4821      	ldr	r0, [pc, #132]	; (80008a0 <MX_TIM16_Init+0xe8>)
 800081c:	f001 ffcd 	bl	80027ba <HAL_TIM_PWM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000826:	f000 f8cf 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2360      	movs	r3, #96	; 0x60
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000846:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_TIM16_Init+0xe8>)
 8000850:	f002 f8f2 	bl	8002a38 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800085a:	f000 f8b5 	bl	80009c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM16_Init+0xe8>)
 8000882:	f002 febf 	bl	8003604 <HAL_TIMEx_ConfigBreakDeadTime>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800088c:	f000 f89c 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM16_Init+0xe8>)
 8000892:	f000 f983 	bl	8000b9c <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3748      	adds	r7, #72	; 0x48
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000c8 	.word	0x200000c8
 80008a4:	40014400 	.word	0x40014400

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_USART2_UART_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USART2_UART_Init+0x58>)
 80008ec:	f002 ff02 	bl	80036f4 <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f867 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000114 	.word	0x20000114
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_GPIO_Init+0xb8>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a27      	ldr	r2, [pc, #156]	; (80009c0 <MX_GPIO_Init+0xb8>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_GPIO_Init+0xb8>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_GPIO_Init+0xb8>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a21      	ldr	r2, [pc, #132]	; (80009c0 <MX_GPIO_Init+0xb8>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_GPIO_Init+0xb8>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8000954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000958:	f000 fd2a 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 800095c:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8000960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	4619      	mov	r1, r3
 8000974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000978:	f000 fba8 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000982:	2312      	movs	r3, #18
 8000984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800098e:	2304      	movs	r3, #4
 8000990:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fb96 	bl	80010cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009a0:	2340      	movs	r3, #64	; 0x40
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 030c 	add.w	r3, r7, #12
 80009b0:	4619      	mov	r1, r3
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_GPIO_Init+0xbc>)
 80009b4:	f000 fb8a 	bl	80010cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b8:	bf00      	nop
 80009ba:	3720      	adds	r7, #32
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	48000400 	.word	0x48000400

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>

080009d2 <testmoteur>:
 */

#include "moteurElev.h"

void testmoteur(TIM_HandleTypeDef tim,int val)
{
 80009d2:	b084      	sub	sp, #16
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	f107 0c08 	add.w	ip, r7, #8
 80009dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	__HAL_TIM_SET_COMPARE(&tim, TIM_CHANNEL_1, val);
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(10000);
 80009e6:	f242 7010 	movw	r0, #10000	; 0x2710
 80009ea:	f000 fa65 	bl	8000eb8 <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&tim, TIM_CHANNEL_1, 0);
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009fc:	b004      	add	sp, #16
 80009fe:	4770      	bx	lr

08000a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b098      	sub	sp, #96	; 0x60
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	2234      	movs	r2, #52	; 0x34
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fabf 	bl	8003fec <memset>
  if(hi2c->Instance==I2C3)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <HAL_I2C_MspInit+0xe0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d153      	bne.n	8000b20 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fcba 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a92:	f7ff ff99 	bl	80009c8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	4a24      	ldr	r2, [pc, #144]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aca:	2312      	movs	r3, #18
 8000acc:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f000 faf2 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aec:	2312      	movs	r3, #18
 8000aee:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000af8:	2304      	movs	r3, #4
 8000afa:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <HAL_I2C_MspInit+0xe8>)
 8000b04:	f000 fae2 	bl	80010cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000b0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b12:	6593      	str	r3, [r2, #88]	; 0x58
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_I2C_MspInit+0xe4>)
 8000b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3760      	adds	r7, #96	; 0x60
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40005c00 	.word	0x40005c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48000400 	.word	0x48000400

08000b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_TIM_Base_MspInit+0x5c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d10c      	bne.n	8000b60 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_TIM_Base_MspInit+0x60>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_TIM_Base_MspInit+0x60>)
 8000b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b50:	6613      	str	r3, [r2, #96]	; 0x60
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_TIM_Base_MspInit+0x60>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b5e:	e010      	b.n	8000b82 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_TIM_Base_MspInit+0x64>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d10b      	bne.n	8000b82 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_TIM_Base_MspInit+0x60>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_TIM_Base_MspInit+0x60>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	6613      	str	r3, [r2, #96]	; 0x60
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_TIM_Base_MspInit+0x60>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40012c00 	.word	0x40012c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40014400 	.word	0x40014400

08000b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <HAL_TIM_MspPostInit+0xac>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d11e      	bne.n	8000bfc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f000 fa69 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000bfa:	e021      	b.n	8000c40 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_TIM_MspPostInit+0xb4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d11c      	bne.n	8000c40 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a10      	ldr	r2, [pc, #64]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <HAL_TIM_MspPostInit+0xb0>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c1e:	2340      	movs	r3, #64	; 0x40
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000c2e:	230e      	movs	r3, #14
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f000 fa46 	bl	80010cc <HAL_GPIO_Init>
}
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40014400 	.word	0x40014400

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b096      	sub	sp, #88	; 0x58
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	2234      	movs	r2, #52	; 0x34
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 f9b9 	bl	8003fec <memset>
  if(huart->Instance==USART2)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <HAL_UART_MspInit+0xa8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d136      	bne.n	8000cf2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fbb5 	bl	8002400 <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c9c:	f7ff fe94 	bl	80009c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_UART_MspInit+0xac>)
 8000ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca4:	4a16      	ldr	r2, [pc, #88]	; (8000d00 <HAL_UART_MspInit+0xac>)
 8000ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000caa:	6593      	str	r3, [r2, #88]	; 0x58
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0xac>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_UART_MspInit+0xac>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbc:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_UART_MspInit+0xac>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_UART_MspInit+0xac>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cee:	f000 f9ed 	bl	80010cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3758      	adds	r7, #88	; 0x58
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40021000 	.word	0x40021000

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d50:	f000 f892 	bl	8000e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d80:	f7ff ffea 	bl	8000d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480c      	ldr	r0, [pc, #48]	; (8000db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490d      	ldr	r1, [pc, #52]	; (8000dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0d      	ldr	r2, [pc, #52]	; (8000dc0 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0a      	ldr	r4, [pc, #40]	; (8000dc8 <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f003 f8fb 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dae:	f7ff fb8f 	bl	80004d0 <main>

08000db2 <LoopForever>:

LoopForever:
    b LoopForever
 8000db2:	e7fe      	b.n	8000db2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc0:	0800406c 	.word	0x0800406c
  ldr r2, =_sbss
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc8:	2000019c 	.word	0x2000019c

08000dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_2_IRQHandler>

08000dce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f943 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f80e 	bl	8000e00 <HAL_InitTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	e001      	b.n	8000df4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df0:	f7ff fe06 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d023      	beq.n	8000e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_InitTick+0x70>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f941 	bl	80010b2 <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d809      	bhi.n	8000e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f919 	bl	800107a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e48:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <HAL_InitTick+0x74>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e007      	b.n	8000e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	73fb      	strb	r3, [r7, #15]
 8000e5a:	e001      	b.n	8000e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000004 	.word	0x20000004

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000198 	.word	0x20000198

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000198 	.word	0x20000198

08000eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec0:	f7ff ffee 	bl	8000ea0 <HAL_GetTick>
 8000ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed0:	d005      	beq.n	8000ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <HAL_Delay+0x44>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4413      	add	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ede:	bf00      	nop
 8000ee0:	f7ff ffde 	bl	8000ea0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d8f7      	bhi.n	8000ee0 <HAL_Delay+0x28>
  {
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008

08000f00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <__NVIC_SetPriorityGrouping+0x44>)
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	60d3      	str	r3, [r2, #12]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff47 	bl	8000f00 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff5c 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ffb0 	bl	8001020 <SysTick_Config>
 80010c0:	4603      	mov	r3, r0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	e14e      	b.n	800137a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa01 f303 	lsl.w	r3, r1, r3
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 8140 	beq.w	8001374 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d005      	beq.n	800110c <HAL_GPIO_Init+0x40>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d130      	bne.n	800116e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001142:	2201      	movs	r2, #1
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	091b      	lsrs	r3, r3, #4
 8001158:	f003 0201 	and.w	r2, r3, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b03      	cmp	r3, #3
 8001178:	d017      	beq.n	80011aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d123      	bne.n	80011fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	6939      	ldr	r1, [r7, #16]
 80011fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0203 	and.w	r2, r3, #3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 809a 	beq.w	8001374 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001240:	4b55      	ldr	r3, [pc, #340]	; (8001398 <HAL_GPIO_Init+0x2cc>)
 8001242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001244:	4a54      	ldr	r2, [pc, #336]	; (8001398 <HAL_GPIO_Init+0x2cc>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6613      	str	r3, [r2, #96]	; 0x60
 800124c:	4b52      	ldr	r3, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x2cc>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001258:	4a50      	ldr	r2, [pc, #320]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001282:	d013      	beq.n	80012ac <HAL_GPIO_Init+0x1e0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_GPIO_Init+0x2d4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_GPIO_Init+0x1dc>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_GPIO_Init+0x2d8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x1d8>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a44      	ldr	r2, [pc, #272]	; (80013a8 <HAL_GPIO_Init+0x2dc>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_GPIO_Init+0x1d4>
 800129c:	2303      	movs	r3, #3
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x1e2>
 80012a0:	2307      	movs	r3, #7
 80012a2:	e004      	b.n	80012ae <HAL_GPIO_Init+0x1e2>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x1e2>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <HAL_GPIO_Init+0x1e2>
 80012ac:	2300      	movs	r3, #0
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	f002 0203 	and.w	r2, r2, #3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4093      	lsls	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012be:	4937      	ldr	r1, [pc, #220]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012cc:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f0:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800131a:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001320:	4b22      	ldr	r3, [pc, #136]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800136e:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_GPIO_Init+0x2e0>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f aea9 	bne.w	80010dc <HAL_GPIO_Init+0x10>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800
 80013a8:	48000c00 	.word	0x48000c00
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e081      	b.n	80014f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fb1e 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001430:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689a      	ldr	r2, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001440:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e006      	b.n	8001468 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001466:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d104      	bne.n	800147a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001478:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800149c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69d9      	ldr	r1, [r3, #28]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2220      	movs	r2, #32
 80014e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b20      	cmp	r3, #32
 8001512:	d138      	bne.n	8001586 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800151e:	2302      	movs	r3, #2
 8001520:	e032      	b.n	8001588 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2224      	movs	r2, #36	; 0x24
 800152e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001550:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6819      	ldr	r1, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	e000      	b.n	8001588 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001586:	2302      	movs	r3, #2
  }
}
 8001588:	4618      	mov	r0, r3
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b20      	cmp	r3, #32
 80015a8:	d139      	bne.n	800161e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e033      	b.n	8001620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f042 0201 	orr.w	r2, r2, #1
 8001608:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2220      	movs	r2, #32
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800161e:	2302      	movs	r3, #2
  }
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <HAL_PWREx_GetVoltageRange+0x18>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40007000 	.word	0x40007000

08001648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001656:	d130      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001664:	d038      	beq.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2232      	movs	r2, #50	; 0x32
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	3301      	adds	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800168c:	e002      	b.n	8001694 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3b01      	subs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a0:	d102      	bne.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f2      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b4:	d110      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e00f      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d007      	beq.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000
 80016ec:	20000000 	.word	0x20000000
 80016f0:	431bde83 	.word	0x431bde83

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d102      	bne.n	8001708 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	f000 bc4f 	b.w	8001fa6 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001708:	4b97      	ldr	r3, [pc, #604]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001712:	4b95      	ldr	r3, [pc, #596]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80e6 	beq.w	80018f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d007      	beq.n	8001740 <HAL_RCC_OscConfig+0x4c>
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	f040 808d 	bne.w	8001852 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 8089 	bne.w	8001852 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001740:	4b89      	ldr	r3, [pc, #548]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_RCC_OscConfig+0x66>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	f000 bc26 	b.w	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800175e:	4b82      	ldr	r3, [pc, #520]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <HAL_RCC_OscConfig+0x80>
 800176a:	4b7f      	ldr	r3, [pc, #508]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001772:	e005      	b.n	8001780 <HAL_RCC_OscConfig+0x8c>
 8001774:	4b7c      	ldr	r3, [pc, #496]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001780:	4293      	cmp	r3, r2
 8001782:	d224      	bcs.n	80017ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fdd9 	bl	8002340 <RCC_SetFlashLatencyFromMSIRange>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	f000 bc06 	b.w	8001fa6 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179a:	4b73      	ldr	r3, [pc, #460]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a72      	ldr	r2, [pc, #456]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b70      	ldr	r3, [pc, #448]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	496d      	ldr	r1, [pc, #436]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b8:	4b6b      	ldr	r3, [pc, #428]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	4968      	ldr	r1, [pc, #416]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e025      	b.n	800181a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ce:	4b66      	ldr	r3, [pc, #408]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017d4:	f043 0308 	orr.w	r3, r3, #8
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b63      	ldr	r3, [pc, #396]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	4960      	ldr	r1, [pc, #384]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ec:	4b5e      	ldr	r3, [pc, #376]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	495b      	ldr	r1, [pc, #364]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	4618      	mov	r0, r3
 800180c:	f000 fd98 	bl	8002340 <RCC_SetFlashLatencyFromMSIRange>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e3c5      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800181a:	f000 fccd 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800181e:	4602      	mov	r2, r0
 8001820:	4b51      	ldr	r3, [pc, #324]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	4950      	ldr	r1, [pc, #320]	; (800196c <HAL_RCC_OscConfig+0x278>)
 800182c:	5ccb      	ldrb	r3, [r1, r3]
 800182e:	f003 031f 	and.w	r3, r3, #31
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001838:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800183a:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fade 	bl	8000e00 <HAL_InitTick>
 8001844:	4603      	mov	r3, r0
 8001846:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d052      	beq.n	80018f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	e3a9      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d032      	beq.n	80018c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800185a:	4b43      	ldr	r3, [pc, #268]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a42      	ldr	r2, [pc, #264]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001866:	f7ff fb1b 	bl	8000ea0 <HAL_GetTick>
 800186a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186e:	f7ff fb17 	bl	8000ea0 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e392      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a35      	ldr	r2, [pc, #212]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b33      	ldr	r3, [pc, #204]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	4930      	ldr	r1, [pc, #192]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	492b      	ldr	r1, [pc, #172]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
 80018be:	e01a      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a28      	ldr	r2, [pc, #160]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f023 0301 	bic.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fae8 	bl	8000ea0 <HAL_GetTick>
 80018d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018d4:	f7ff fae4 	bl	8000ea0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e35f      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e6:	4b20      	ldr	r3, [pc, #128]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1e0>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d073      	beq.n	80019ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2b08      	cmp	r3, #8
 8001906:	d005      	beq.n	8001914 <HAL_RCC_OscConfig+0x220>
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	2b0c      	cmp	r3, #12
 800190c:	d10e      	bne.n	800192c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d10b      	bne.n	800192c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d063      	beq.n	80019e8 <HAL_RCC_OscConfig+0x2f4>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d15f      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e33c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x250>
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e025      	b.n	8001990 <HAL_RCC_OscConfig+0x29c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d114      	bne.n	8001978 <HAL_RCC_OscConfig+0x284>
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b03      	ldr	r3, [pc, #12]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a02      	ldr	r2, [pc, #8]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e013      	b.n	8001990 <HAL_RCC_OscConfig+0x29c>
 8001968:	40021000 	.word	0x40021000
 800196c:	08004014 	.word	0x08004014
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004
 8001978:	4b8f      	ldr	r3, [pc, #572]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a8e      	ldr	r2, [pc, #568]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a8b      	ldr	r2, [pc, #556]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d013      	beq.n	80019c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fa82 	bl	8000ea0 <HAL_GetTick>
 800199c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fa7e 	bl	8000ea0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e2f9      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x2ac>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff fa6e 	bl	8000ea0 <HAL_GetTick>
 80019c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fa6a 	bl	8000ea0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e2e5      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019da:	4b77      	ldr	r3, [pc, #476]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2d4>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d060      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_OscConfig+0x314>
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d119      	bne.n	8001a36 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d116      	bne.n	8001a36 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a08:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_OscConfig+0x32c>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e2c2      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b65      	ldr	r3, [pc, #404]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	4962      	ldr	r1, [pc, #392]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a34:	e040      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d023      	beq.n	8001a86 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3e:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a5d      	ldr	r2, [pc, #372]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fa29 	bl	8000ea0 <HAL_GetTick>
 8001a4e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a52:	f7ff fa25 	bl	8000ea0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e2a0      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a64:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a70:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	494e      	ldr	r1, [pc, #312]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
 8001a84:	e018      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a86:	4b4c      	ldr	r3, [pc, #304]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a4b      	ldr	r2, [pc, #300]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7ff fa05 	bl	8000ea0 <HAL_GetTick>
 8001a96:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9a:	f7ff fa01 	bl	8000ea0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e27c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aac:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8082 	beq.w	8001bca <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d05f      	beq.n	8001b8e <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad4:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d037      	beq.n	8001b54 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e254      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0c:	4a2a      	ldr	r2, [pc, #168]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b16:	f7ff f9c3 	bl	8000ea0 <HAL_GetTick>
 8001b1a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f9bf 	bl	8000ea0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b11      	cmp	r3, #17
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e23a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ef      	bne.n	8001b1e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b44:	f023 0210 	bic.w	r2, r3, #16
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	491a      	ldr	r1, [pc, #104]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f99c 	bl	8000ea0 <HAL_GetTick>
 8001b68:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f998 	bl	8000ea0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b11      	cmp	r3, #17
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e213      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ef      	beq.n	8001b6c <HAL_RCC_OscConfig+0x478>
 8001b8c:	e01d      	b.n	8001bca <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff f97f 	bl	8000ea0 <HAL_GetTick>
 8001ba2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f97b 	bl	8000ea0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b11      	cmp	r3, #17
 8001bb2:	d903      	bls.n	8001bbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1f6      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
 8001bb8:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	4ba9      	ldr	r3, [pc, #676]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ed      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80bd 	beq.w	8001d52 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bde:	4ba1      	ldr	r3, [pc, #644]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b9e      	ldr	r3, [pc, #632]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bee:	4a9d      	ldr	r2, [pc, #628]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf6:	4b9b      	ldr	r3, [pc, #620]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c02:	2301      	movs	r3, #1
 8001c04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c08:	4b97      	ldr	r3, [pc, #604]	; (8001e68 <HAL_RCC_OscConfig+0x774>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d118      	bne.n	8001c46 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c14:	4b94      	ldr	r3, [pc, #592]	; (8001e68 <HAL_RCC_OscConfig+0x774>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a93      	ldr	r2, [pc, #588]	; (8001e68 <HAL_RCC_OscConfig+0x774>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c20:	f7ff f93e 	bl	8000ea0 <HAL_GetTick>
 8001c24:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c28:	f7ff f93a 	bl	8000ea0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e1b5      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c3a:	4b8b      	ldr	r3, [pc, #556]	; (8001e68 <HAL_RCC_OscConfig+0x774>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d02c      	beq.n	8001cac <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001c52:	4b84      	ldr	r3, [pc, #528]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c64:	497f      	ldr	r1, [pc, #508]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c78:	4b7a      	ldr	r3, [pc, #488]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a79      	ldr	r2, [pc, #484]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c88:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a75      	ldr	r2, [pc, #468]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c98:	e018      	b.n	8001ccc <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c9a:	4b72      	ldr	r3, [pc, #456]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca0:	4a70      	ldr	r2, [pc, #448]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001caa:	e00f      	b.n	8001ccc <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cac:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	4a6c      	ldr	r2, [pc, #432]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001cbc:	4b69      	ldr	r3, [pc, #420]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	4a68      	ldr	r2, [pc, #416]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d016      	beq.n	8001d02 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f8e4 	bl	8000ea0 <HAL_GetTick>
 8001cd8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f8e0 	bl	8000ea0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e159      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ed      	beq.n	8001cdc <HAL_RCC_OscConfig+0x5e8>
 8001d00:	e01d      	b.n	8001d3e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff f8cd 	bl	8000ea0 <HAL_GetTick>
 8001d06:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff f8c9 	bl	8000ea0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e142      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ed      	bne.n	8001d0a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d34:	4a4b      	ldr	r2, [pc, #300]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d105      	bne.n	8001d52 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0320 	and.w	r3, r3, #32
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01c      	beq.n	8001da0 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d66:	4b3f      	ldr	r3, [pc, #252]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6c:	4a3d      	ldr	r2, [pc, #244]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d76:	f7ff f893 	bl	8000ea0 <HAL_GetTick>
 8001d7a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d7e:	f7ff f88f 	bl	8000ea0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e10a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0ef      	beq.n	8001d7e <HAL_RCC_OscConfig+0x68a>
 8001d9e:	e01b      	b.n	8001dd8 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001da6:	4a2f      	ldr	r2, [pc, #188]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f876 	bl	8000ea0 <HAL_GetTick>
 8001db4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db8:	f7ff f872 	bl	8000ea0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0ed      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1ef      	bne.n	8001db8 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80e1 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	f040 80b5 	bne.w	8001f56 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f003 0203 	and.w	r2, r3, #3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d124      	bne.n	8001e4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d11b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d113      	bne.n	8001e4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	085b      	lsrs	r3, r3, #1
 8001e42:	3b01      	subs	r3, #1
 8001e44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d05f      	beq.n	8001f0a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d05a      	beq.n	8001f06 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <HAL_RCC_OscConfig+0x770>)
 8001e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e5c:	f7ff f820 	bl	8000ea0 <HAL_GetTick>
 8001e60:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e62:	e00c      	b.n	8001e7e <HAL_RCC_OscConfig+0x78a>
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f818 	bl	8000ea0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e093      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7e:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8a:	4b49      	ldr	r3, [pc, #292]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x8c0>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e9a:	3a01      	subs	r2, #1
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ea4:	0212      	lsls	r2, r2, #8
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001eac:	0852      	lsrs	r2, r2, #1
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	0552      	lsls	r2, r2, #21
 8001eb2:	4311      	orrs	r1, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eb8:	0852      	lsrs	r2, r2, #1
 8001eba:	3a01      	subs	r2, #1
 8001ebc:	0652      	lsls	r2, r2, #25
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	493b      	ldr	r1, [pc, #236]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a39      	ldr	r2, [pc, #228]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001ecc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed0:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed2:	4b37      	ldr	r3, [pc, #220]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	4a36      	ldr	r2, [pc, #216]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001ed8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001edc:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ede:	f7fe ffdf 	bl	8000ea0 <HAL_GetTick>
 8001ee2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe ffdb 	bl	8000ea0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e056      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f04:	e04e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e04d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d146      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f20:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f2e:	f7fe ffb7 	bl	8000ea0 <HAL_GetTick>
 8001f32:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe ffb3 	bl	8000ea0 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e02e      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x842>
 8001f54:	e026      	b.n	8001fa4 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d021      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe ff9a 	bl	8000ea0 <HAL_GetTick>
 8001f6c:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe ff96 	bl	8000ea0 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e011      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_RCC_OscConfig+0x8bc>)
 8001f94:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f98:	f023 0303 	bic.w	r3, r3, #3
 8001f9c:	60d3      	str	r3, [r2, #12]
 8001f9e:	e001      	b.n	8001fa4 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3728      	adds	r7, #40	; 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	f99f808c 	.word	0xf99f808c

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0e7      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b75      	ldr	r3, [pc, #468]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b72      	ldr	r3, [pc, #456]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4970      	ldr	r1, [pc, #448]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b6e      	ldr	r3, [pc, #440]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0cf      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	429a      	cmp	r2, r3
 8002016:	d908      	bls.n	800202a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4960      	ldr	r1, [pc, #384]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d04c      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203e:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d121      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e0a6      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002056:	4b54      	ldr	r3, [pc, #336]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d115      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e09a      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206e:	4b4e      	ldr	r3, [pc, #312]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e08e      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207e:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e086      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4943      	ldr	r1, [pc, #268]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020a0:	f7fe fefe 	bl	8000ea0 <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe fefa 	bl	8000ea0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e06e      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d010      	beq.n	80020fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b31      	ldr	r3, [pc, #196]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d208      	bcs.n	80020fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	492b      	ldr	r1, [pc, #172]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d210      	bcs.n	800212e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 0207 	bic.w	r2, r3, #7
 8002114:	4923      	ldr	r1, [pc, #140]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800211c:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <HAL_RCC_ClockConfig+0x1ec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e036      	b.n	800219c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0304 	and.w	r3, r3, #4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4918      	ldr	r1, [pc, #96]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4910      	ldr	r1, [pc, #64]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800216c:	f000 f824 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	490b      	ldr	r1, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1f4>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
 8002188:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1f8>)
 800218a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1fc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7fe fe35 	bl	8000e00 <HAL_InitTick>
 8002196:	4603      	mov	r3, r0
 8002198:	72fb      	strb	r3, [r7, #11]

  return status;
 800219a:	7afb      	ldrb	r3, [r7, #11]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08004014 	.word	0x08004014
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	2300      	movs	r3, #0
 80021c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c6:	4b3e      	ldr	r3, [pc, #248]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d0:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x34>
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d121      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d11e      	bne.n	800222a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021ec:	4b34      	ldr	r3, [pc, #208]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e005      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002208:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10d      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b04      	cmp	r3, #4
 800222e:	d102      	bne.n	8002236 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	e004      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 800223e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d134      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d003      	beq.n	800225e <HAL_RCC_GetSysClockFreq+0xa6>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d003      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0xac>
 800225c:	e005      	b.n	800226a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002260:	617b      	str	r3, [r7, #20]
      break;
 8002262:	e005      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002266:	617b      	str	r3, [r7, #20]
      break;
 8002268:	e002      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	617b      	str	r3, [r7, #20]
      break;
 800226e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	3301      	adds	r3, #1
 800227c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	fb03 f202 	mul.w	r2, r3, r2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	0e5b      	lsrs	r3, r3, #25
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	3301      	adds	r3, #1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022b0:	69bb      	ldr	r3, [r7, #24]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000
 80022c4:	0800402c 	.word	0x0800402c
 80022c8:	00f42400 	.word	0x00f42400
 80022cc:	007a1200 	.word	0x007a1200

080022d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000000 	.word	0x20000000

080022e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022ec:	f7ff fff0 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	4904      	ldr	r1, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08004024 	.word	0x08004024

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002318:	f7ff ffda 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4904      	ldr	r1, [pc, #16]	; (800233c <HAL_RCC_GetPCLK2Freq+0x28>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	08004024 	.word	0x08004024

08002340 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002358:	f7ff f968 	bl	800162c <HAL_PWREx_GetVoltageRange>
 800235c:	6178      	str	r0, [r7, #20]
 800235e:	e014      	b.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b25      	ldr	r3, [pc, #148]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	; 0x58
 800236c:	4b22      	ldr	r3, [pc, #136]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002378:	f7ff f958 	bl	800162c <HAL_PWREx_GetVoltageRange>
 800237c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002390:	d10b      	bne.n	80023aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b80      	cmp	r3, #128	; 0x80
 8002396:	d919      	bls.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2ba0      	cmp	r3, #160	; 0xa0
 800239c:	d902      	bls.n	80023a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800239e:	2302      	movs	r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e013      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023a4:	2301      	movs	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e010      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b80      	cmp	r3, #128	; 0x80
 80023ae:	d902      	bls.n	80023b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023b0:	2303      	movs	r3, #3
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	e00a      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d102      	bne.n	80023c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023bc:	2302      	movs	r3, #2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e004      	b.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b70      	cmp	r3, #112	; 0x70
 80023c6:	d101      	bne.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023cc:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 0207 	bic.w	r2, r3, #7
 80023d4:	4909      	ldr	r1, [pc, #36]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40022000 	.word	0x40022000

08002400 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002408:	2300      	movs	r3, #0
 800240a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800240c:	2300      	movs	r3, #0
 800240e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 809e 	beq.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241e:	2300      	movs	r3, #0
 8002420:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002422:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00d      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002438:	4b40      	ldr	r3, [pc, #256]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800243a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243c:	4a3f      	ldr	r2, [pc, #252]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800243e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002442:	6593      	str	r3, [r2, #88]	; 0x58
 8002444:	4b3d      	ldr	r3, [pc, #244]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002450:	2301      	movs	r3, #1
 8002452:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002454:	4b3a      	ldr	r3, [pc, #232]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a39      	ldr	r2, [pc, #228]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002460:	f7fe fd1e 	bl	8000ea0 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002466:	e009      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002468:	f7fe fd1a 	bl	8000ea0 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d902      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	74fb      	strb	r3, [r7, #19]
        break;
 800247a:	e005      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ef      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d15a      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800248e:	4b2b      	ldr	r3, [pc, #172]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002498:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01e      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xde>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d019      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024b6:	4b21      	ldr	r3, [pc, #132]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024d6:	4a19      	ldr	r2, [pc, #100]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d016      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fcda 	bl	8000ea0 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ee:	e00b      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe fcd6 	bl	8000ea0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d902      	bls.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	74fb      	strb	r3, [r7, #19]
            break;
 8002506:	e006      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0ec      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4904      	ldr	r1, [pc, #16]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002532:	e009      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002534:	7cfb      	ldrb	r3, [r7, #19]
 8002536:	74bb      	strb	r3, [r7, #18]
 8002538:	e006      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002548:	7c7b      	ldrb	r3, [r7, #17]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b6e      	ldr	r3, [pc, #440]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	4a6d      	ldr	r2, [pc, #436]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002566:	4b68      	ldr	r3, [pc, #416]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f023 0203 	bic.w	r2, r3, #3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	4964      	ldr	r1, [pc, #400]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002588:	4b5f      	ldr	r3, [pc, #380]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 020c 	bic.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	495c      	ldr	r1, [pc, #368]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4953      	ldr	r1, [pc, #332]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025cc:	4b4e      	ldr	r3, [pc, #312]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	494b      	ldr	r1, [pc, #300]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ee:	4b46      	ldr	r3, [pc, #280]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4942      	ldr	r1, [pc, #264]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002610:	4b3d      	ldr	r3, [pc, #244]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	493a      	ldr	r1, [pc, #232]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002632:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	4931      	ldr	r1, [pc, #196]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002654:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	4929      	ldr	r1, [pc, #164]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	4920      	ldr	r1, [pc, #128]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d015      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002698:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	4918      	ldr	r1, [pc, #96]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b6:	d105      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a12      	ldr	r2, [pc, #72]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026d0:	4b0d      	ldr	r3, [pc, #52]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	490a      	ldr	r1, [pc, #40]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80026f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e049      	b.n	80027b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe f9fe 	bl	8000b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3304      	adds	r3, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fb52 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e049      	b.n	8002860 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d106      	bne.n	80027e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f841 	bl	8002868 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	4619      	mov	r1, r3
 80027f8:	4610      	mov	r0, r2
 80027fa:	f000 fafb 	bl	8002df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_TIM_PWM_Start+0x24>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e03c      	b.n	800291a <HAL_TIM_PWM_Start+0x9e>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d109      	bne.n	80028ba <HAL_TIM_PWM_Start+0x3e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	e02f      	b.n	800291a <HAL_TIM_PWM_Start+0x9e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d109      	bne.n	80028d4 <HAL_TIM_PWM_Start+0x58>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e022      	b.n	800291a <HAL_TIM_PWM_Start+0x9e>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d109      	bne.n	80028ee <HAL_TIM_PWM_Start+0x72>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	bf14      	ite	ne
 80028e6:	2301      	movne	r3, #1
 80028e8:	2300      	moveq	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e015      	b.n	800291a <HAL_TIM_PWM_Start+0x9e>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d109      	bne.n	8002908 <HAL_TIM_PWM_Start+0x8c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	bf14      	ite	ne
 8002900:	2301      	movne	r3, #1
 8002902:	2300      	moveq	r3, #0
 8002904:	b2db      	uxtb	r3, r3
 8002906:	e008      	b.n	800291a <HAL_TIM_PWM_Start+0x9e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	bf14      	ite	ne
 8002914:	2301      	movne	r3, #1
 8002916:	2300      	moveq	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07e      	b.n	8002a20 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <HAL_TIM_PWM_Start+0xb6>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002930:	e023      	b.n	800297a <HAL_TIM_PWM_Start+0xfe>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d104      	bne.n	8002942 <HAL_TIM_PWM_Start+0xc6>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002940:	e01b      	b.n	800297a <HAL_TIM_PWM_Start+0xfe>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d104      	bne.n	8002952 <HAL_TIM_PWM_Start+0xd6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	e013      	b.n	800297a <HAL_TIM_PWM_Start+0xfe>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d104      	bne.n	8002962 <HAL_TIM_PWM_Start+0xe6>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002960:	e00b      	b.n	800297a <HAL_TIM_PWM_Start+0xfe>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b10      	cmp	r3, #16
 8002966:	d104      	bne.n	8002972 <HAL_TIM_PWM_Start+0xf6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002970:	e003      	b.n	800297a <HAL_TIM_PWM_Start+0xfe>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2201      	movs	r2, #1
 8002980:	6839      	ldr	r1, [r7, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fdb2 	bl	80034ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a26      	ldr	r2, [pc, #152]	; (8002a28 <HAL_TIM_PWM_Start+0x1ac>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d009      	beq.n	80029a6 <HAL_TIM_PWM_Start+0x12a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a25      	ldr	r2, [pc, #148]	; (8002a2c <HAL_TIM_PWM_Start+0x1b0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d004      	beq.n	80029a6 <HAL_TIM_PWM_Start+0x12a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <HAL_TIM_PWM_Start+0x1b4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_TIM_PWM_Start+0x12e>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_TIM_PWM_Start+0x130>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <HAL_TIM_PWM_Start+0x1ac>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d009      	beq.n	80029de <HAL_TIM_PWM_Start+0x162>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d004      	beq.n	80029de <HAL_TIM_PWM_Start+0x162>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a14      	ldr	r2, [pc, #80]	; (8002a2c <HAL_TIM_PWM_Start+0x1b0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d115      	bne.n	8002a0a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_TIM_PWM_Start+0x1b8>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d015      	beq.n	8002a1c <HAL_TIM_PWM_Start+0x1a0>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f6:	d011      	beq.n	8002a1c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	e008      	b.n	8002a1c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e000      	b.n	8002a1e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	40014400 	.word	0x40014400
 8002a34:	00010007 	.word	0x00010007

08002a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e0ff      	b.n	8002c56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b14      	cmp	r3, #20
 8002a62:	f200 80f0 	bhi.w	8002c46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002ac1 	.word	0x08002ac1
 8002a70:	08002c47 	.word	0x08002c47
 8002a74:	08002c47 	.word	0x08002c47
 8002a78:	08002c47 	.word	0x08002c47
 8002a7c:	08002b01 	.word	0x08002b01
 8002a80:	08002c47 	.word	0x08002c47
 8002a84:	08002c47 	.word	0x08002c47
 8002a88:	08002c47 	.word	0x08002c47
 8002a8c:	08002b43 	.word	0x08002b43
 8002a90:	08002c47 	.word	0x08002c47
 8002a94:	08002c47 	.word	0x08002c47
 8002a98:	08002c47 	.word	0x08002c47
 8002a9c:	08002b83 	.word	0x08002b83
 8002aa0:	08002c47 	.word	0x08002c47
 8002aa4:	08002c47 	.word	0x08002c47
 8002aa8:	08002c47 	.word	0x08002c47
 8002aac:	08002bc5 	.word	0x08002bc5
 8002ab0:	08002c47 	.word	0x08002c47
 8002ab4:	08002c47 	.word	0x08002c47
 8002ab8:	08002c47 	.word	0x08002c47
 8002abc:	08002c05 	.word	0x08002c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f9f8 	bl	8002ebc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0208 	orr.w	r2, r2, #8
 8002ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0204 	bic.w	r2, r2, #4
 8002aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6999      	ldr	r1, [r3, #24]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	619a      	str	r2, [r3, #24]
      break;
 8002afe:	e0a5      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 fa54 	bl	8002fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6999      	ldr	r1, [r3, #24]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	021a      	lsls	r2, r3, #8
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	619a      	str	r2, [r3, #24]
      break;
 8002b40:	e084      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 faad 	bl	80030a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f042 0208 	orr.w	r2, r2, #8
 8002b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69da      	ldr	r2, [r3, #28]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0204 	bic.w	r2, r2, #4
 8002b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	69d9      	ldr	r1, [r3, #28]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	61da      	str	r2, [r3, #28]
      break;
 8002b80:	e064      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fb05 	bl	8003198 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	69da      	ldr	r2, [r3, #28]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69d9      	ldr	r1, [r3, #28]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	021a      	lsls	r2, r3, #8
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	61da      	str	r2, [r3, #28]
      break;
 8002bc2:	e043      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fb42 	bl	8003254 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0208 	orr.w	r2, r2, #8
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0204 	bic.w	r2, r2, #4
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c02:	e023      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fb7a 	bl	8003304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	430a      	orrs	r2, r1
 8002c42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002c44:	e002      	b.n	8002c4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	75fb      	strb	r3, [r7, #23]
      break;
 8002c4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop

08002c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d101      	bne.n	8002c7c <HAL_TIM_ConfigClockSource+0x1c>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	e0b6      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x18a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cb8:	d03e      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0xd8>
 8002cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cbe:	f200 8087 	bhi.w	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc6:	f000 8086 	beq.w	8002dd6 <HAL_TIM_ConfigClockSource+0x176>
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	d87f      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002cd0:	2b70      	cmp	r3, #112	; 0x70
 8002cd2:	d01a      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0xaa>
 8002cd4:	2b70      	cmp	r3, #112	; 0x70
 8002cd6:	d87b      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002cd8:	2b60      	cmp	r3, #96	; 0x60
 8002cda:	d050      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x11e>
 8002cdc:	2b60      	cmp	r3, #96	; 0x60
 8002cde:	d877      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002ce0:	2b50      	cmp	r3, #80	; 0x50
 8002ce2:	d03c      	beq.n	8002d5e <HAL_TIM_ConfigClockSource+0xfe>
 8002ce4:	2b50      	cmp	r3, #80	; 0x50
 8002ce6:	d873      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002ce8:	2b40      	cmp	r3, #64	; 0x40
 8002cea:	d058      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x13e>
 8002cec:	2b40      	cmp	r3, #64	; 0x40
 8002cee:	d86f      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002cf0:	2b30      	cmp	r3, #48	; 0x30
 8002cf2:	d064      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15e>
 8002cf4:	2b30      	cmp	r3, #48	; 0x30
 8002cf6:	d86b      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d060      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15e>
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d867      	bhi.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d05c      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15e>
 8002d04:	2b10      	cmp	r3, #16
 8002d06:	d05a      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x15e>
 8002d08:	e062      	b.n	8002dd0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6899      	ldr	r1, [r3, #8]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f000 fbc7 	bl	80034ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	609a      	str	r2, [r3, #8]
      break;
 8002d36:	e04f      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f000 fbb0 	bl	80034ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d5a:	609a      	str	r2, [r3, #8]
      break;
 8002d5c:	e03c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6859      	ldr	r1, [r3, #4]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f000 fb24 	bl	80033b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2150      	movs	r1, #80	; 0x50
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fb7d 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 8002d7c:	e02c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6859      	ldr	r1, [r3, #4]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f000 fb43 	bl	8003416 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2160      	movs	r1, #96	; 0x60
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fb6d 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 8002d9c:	e01c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 fb04 	bl	80033b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fb5d 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e00c      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 fb54 	bl	8003476 <TIM_ITRx_SetConfig>
      break;
 8002dce:	e003      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd4:	e000      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002dd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <TIM_Base_SetConfig+0xbc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0x20>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e12:	d108      	bne.n	8002e26 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <TIM_Base_SetConfig+0xbc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00b      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d007      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <TIM_Base_SetConfig+0xc0>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d003      	beq.n	8002e46 <TIM_Base_SetConfig+0x52>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a1d      	ldr	r2, [pc, #116]	; (8002eb8 <TIM_Base_SetConfig+0xc4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d108      	bne.n	8002e58 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <TIM_Base_SetConfig+0xbc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0xa0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <TIM_Base_SetConfig+0xc0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0xa0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <TIM_Base_SetConfig+0xc4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d103      	bne.n	8002e9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	615a      	str	r2, [r3, #20]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40014000 	.word	0x40014000
 8002eb8:	40014400 	.word	0x40014400

08002ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b087      	sub	sp, #28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f023 0201 	bic.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 0302 	bic.w	r3, r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a24      	ldr	r2, [pc, #144]	; (8002fa8 <TIM_OC1_SetConfig+0xec>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d007      	beq.n	8002f2c <TIM_OC1_SetConfig+0x70>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a23      	ldr	r2, [pc, #140]	; (8002fac <TIM_OC1_SetConfig+0xf0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d003      	beq.n	8002f2c <TIM_OC1_SetConfig+0x70>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <TIM_OC1_SetConfig+0xf4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d10c      	bne.n	8002f46 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0308 	bic.w	r3, r3, #8
 8002f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <TIM_OC1_SetConfig+0xec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_OC1_SetConfig+0xa2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a16      	ldr	r2, [pc, #88]	; (8002fac <TIM_OC1_SetConfig+0xf0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_OC1_SetConfig+0xa2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <TIM_OC1_SetConfig+0xf4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d111      	bne.n	8002f82 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	621a      	str	r2, [r3, #32]
}
 8002f9c:	bf00      	nop
 8002f9e:	371c      	adds	r7, #28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40014400 	.word	0x40014400

08002fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	f023 0210 	bic.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0320 	bic.w	r3, r3, #32
 8003002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a22      	ldr	r2, [pc, #136]	; (800309c <TIM_OC2_SetConfig+0xe8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d10d      	bne.n	8003034 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800301e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003032:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a19      	ldr	r2, [pc, #100]	; (800309c <TIM_OC2_SetConfig+0xe8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_OC2_SetConfig+0x98>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <TIM_OC2_SetConfig+0xec>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_OC2_SetConfig+0x98>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <TIM_OC2_SetConfig+0xf0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d113      	bne.n	8003074 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40014000 	.word	0x40014000
 80030a4:	40014400 	.word	0x40014400

080030a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f023 0303 	bic.w	r3, r3, #3
 80030e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a21      	ldr	r2, [pc, #132]	; (800318c <TIM_OC3_SetConfig+0xe4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10d      	bne.n	8003126 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <TIM_OC3_SetConfig+0xe4>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <TIM_OC3_SetConfig+0x96>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a17      	ldr	r2, [pc, #92]	; (8003190 <TIM_OC3_SetConfig+0xe8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d003      	beq.n	800313e <TIM_OC3_SetConfig+0x96>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a16      	ldr	r2, [pc, #88]	; (8003194 <TIM_OC3_SetConfig+0xec>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d113      	bne.n	8003166 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800314c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	621a      	str	r2, [r3, #32]
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40014000 	.word	0x40014000
 8003194:	40014400 	.word	0x40014400

08003198 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	031b      	lsls	r3, r3, #12
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a14      	ldr	r2, [pc, #80]	; (8003248 <TIM_OC4_SetConfig+0xb0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <TIM_OC4_SetConfig+0x74>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a13      	ldr	r2, [pc, #76]	; (800324c <TIM_OC4_SetConfig+0xb4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_OC4_SetConfig+0x74>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <TIM_OC4_SetConfig+0xb8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d109      	bne.n	8003220 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	019b      	lsls	r3, r3, #6
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400

08003254 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003254:	b480      	push	{r7}
 8003256:	b087      	sub	sp, #28
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003298:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a13      	ldr	r2, [pc, #76]	; (80032f8 <TIM_OC5_SetConfig+0xa4>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d007      	beq.n	80032be <TIM_OC5_SetConfig+0x6a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a12      	ldr	r2, [pc, #72]	; (80032fc <TIM_OC5_SetConfig+0xa8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d003      	beq.n	80032be <TIM_OC5_SetConfig+0x6a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a11      	ldr	r2, [pc, #68]	; (8003300 <TIM_OC5_SetConfig+0xac>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d109      	bne.n	80032d2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	621a      	str	r2, [r3, #32]
}
 80032ec:	bf00      	nop
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40014000 	.word	0x40014000
 8003300:	40014400 	.word	0x40014400

08003304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800334a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a14      	ldr	r2, [pc, #80]	; (80033ac <TIM_OC6_SetConfig+0xa8>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_OC6_SetConfig+0x6c>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <TIM_OC6_SetConfig+0xac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_OC6_SetConfig+0x6c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <TIM_OC6_SetConfig+0xb0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d109      	bne.n	8003384 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003376:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	029b      	lsls	r3, r3, #10
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	621a      	str	r2, [r3, #32]
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400

080033b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f023 0201 	bic.w	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 030a 	bic.w	r3, r3, #10
 80033f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003416:	b480      	push	{r7}
 8003418:	b087      	sub	sp, #28
 800341a:	af00      	add	r7, sp, #0
 800341c:	60f8      	str	r0, [r7, #12]
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	f023 0210 	bic.w	r2, r3, #16
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003440:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	031b      	lsls	r3, r3, #12
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003452:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	f043 0307 	orr.w	r3, r3, #7
 8003498:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2201      	movs	r2, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	43db      	mvns	r3, r3
 800350e:	401a      	ands	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	fa01 f303 	lsl.w	r3, r1, r3
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800354c:	2302      	movs	r3, #2
 800354e:	e04f      	b.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a21      	ldr	r2, [pc, #132]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d108      	bne.n	800358c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003580:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a14      	ldr	r2, [pc, #80]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d009      	beq.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b8:	d004      	beq.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d10c      	bne.n	80035de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40012c00 	.word	0x40012c00
 8003600:	40014000 	.word	0x40014000

08003604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800361c:	2302      	movs	r3, #2
 800361e:	e060      	b.n	80036e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a14      	ldr	r2, [pc, #80]	; (80036f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d115      	bne.n	80036d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	051b      	lsls	r3, r3, #20
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40012c00 	.word	0x40012c00

080036f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e040      	b.n	8003788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fa9c 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f82c 	bl	8003790 <UART_SetConfig>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e022      	b.n	8003788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fa7a 	bl	8003c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb01 	bl	8003d88 <UART_CheckIdleState>
 8003786:	4603      	mov	r3, r0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003794:	b08a      	sub	sp, #40	; 0x28
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	4b9e      	ldr	r3, [pc, #632]	; (8003a38 <UART_SetConfig+0x2a8>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a93      	ldr	r2, [pc, #588]	; (8003a3c <UART_SetConfig+0x2ac>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	4313      	orrs	r3, r2
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a8a      	ldr	r2, [pc, #552]	; (8003a40 <UART_SetConfig+0x2b0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d126      	bne.n	8003868 <UART_SetConfig+0xd8>
 800381a:	4b8a      	ldr	r3, [pc, #552]	; (8003a44 <UART_SetConfig+0x2b4>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	2b03      	cmp	r3, #3
 8003826:	d81b      	bhi.n	8003860 <UART_SetConfig+0xd0>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <UART_SetConfig+0xa0>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003841 	.word	0x08003841
 8003834:	08003851 	.word	0x08003851
 8003838:	08003849 	.word	0x08003849
 800383c:	08003859 	.word	0x08003859
 8003840:	2301      	movs	r3, #1
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e0ab      	b.n	80039a0 <UART_SetConfig+0x210>
 8003848:	2302      	movs	r3, #2
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e0a7      	b.n	80039a0 <UART_SetConfig+0x210>
 8003850:	2304      	movs	r3, #4
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e0a3      	b.n	80039a0 <UART_SetConfig+0x210>
 8003858:	2308      	movs	r3, #8
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e09f      	b.n	80039a0 <UART_SetConfig+0x210>
 8003860:	2310      	movs	r3, #16
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e09b      	b.n	80039a0 <UART_SetConfig+0x210>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a76      	ldr	r2, [pc, #472]	; (8003a48 <UART_SetConfig+0x2b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d138      	bne.n	80038e4 <UART_SetConfig+0x154>
 8003872:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <UART_SetConfig+0x2b4>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d82d      	bhi.n	80038dc <UART_SetConfig+0x14c>
 8003880:	a201      	add	r2, pc, #4	; (adr r2, 8003888 <UART_SetConfig+0xf8>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080038dd 	.word	0x080038dd
 8003890:	080038dd 	.word	0x080038dd
 8003894:	080038dd 	.word	0x080038dd
 8003898:	080038cd 	.word	0x080038cd
 800389c:	080038dd 	.word	0x080038dd
 80038a0:	080038dd 	.word	0x080038dd
 80038a4:	080038dd 	.word	0x080038dd
 80038a8:	080038c5 	.word	0x080038c5
 80038ac:	080038dd 	.word	0x080038dd
 80038b0:	080038dd 	.word	0x080038dd
 80038b4:	080038dd 	.word	0x080038dd
 80038b8:	080038d5 	.word	0x080038d5
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c2:	e06d      	b.n	80039a0 <UART_SetConfig+0x210>
 80038c4:	2302      	movs	r3, #2
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ca:	e069      	b.n	80039a0 <UART_SetConfig+0x210>
 80038cc:	2304      	movs	r3, #4
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d2:	e065      	b.n	80039a0 <UART_SetConfig+0x210>
 80038d4:	2308      	movs	r3, #8
 80038d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038da:	e061      	b.n	80039a0 <UART_SetConfig+0x210>
 80038dc:	2310      	movs	r3, #16
 80038de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e2:	e05d      	b.n	80039a0 <UART_SetConfig+0x210>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a58      	ldr	r2, [pc, #352]	; (8003a4c <UART_SetConfig+0x2bc>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d125      	bne.n	800393a <UART_SetConfig+0x1aa>
 80038ee:	4b55      	ldr	r3, [pc, #340]	; (8003a44 <UART_SetConfig+0x2b4>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038f8:	2b30      	cmp	r3, #48	; 0x30
 80038fa:	d016      	beq.n	800392a <UART_SetConfig+0x19a>
 80038fc:	2b30      	cmp	r3, #48	; 0x30
 80038fe:	d818      	bhi.n	8003932 <UART_SetConfig+0x1a2>
 8003900:	2b20      	cmp	r3, #32
 8003902:	d00a      	beq.n	800391a <UART_SetConfig+0x18a>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d814      	bhi.n	8003932 <UART_SetConfig+0x1a2>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <UART_SetConfig+0x182>
 800390c:	2b10      	cmp	r3, #16
 800390e:	d008      	beq.n	8003922 <UART_SetConfig+0x192>
 8003910:	e00f      	b.n	8003932 <UART_SetConfig+0x1a2>
 8003912:	2300      	movs	r3, #0
 8003914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003918:	e042      	b.n	80039a0 <UART_SetConfig+0x210>
 800391a:	2302      	movs	r3, #2
 800391c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003920:	e03e      	b.n	80039a0 <UART_SetConfig+0x210>
 8003922:	2304      	movs	r3, #4
 8003924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003928:	e03a      	b.n	80039a0 <UART_SetConfig+0x210>
 800392a:	2308      	movs	r3, #8
 800392c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003930:	e036      	b.n	80039a0 <UART_SetConfig+0x210>
 8003932:	2310      	movs	r3, #16
 8003934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003938:	e032      	b.n	80039a0 <UART_SetConfig+0x210>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <UART_SetConfig+0x2ac>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d12a      	bne.n	800399a <UART_SetConfig+0x20a>
 8003944:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <UART_SetConfig+0x2b4>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800394e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003952:	d01a      	beq.n	800398a <UART_SetConfig+0x1fa>
 8003954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003958:	d81b      	bhi.n	8003992 <UART_SetConfig+0x202>
 800395a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395e:	d00c      	beq.n	800397a <UART_SetConfig+0x1ea>
 8003960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003964:	d815      	bhi.n	8003992 <UART_SetConfig+0x202>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <UART_SetConfig+0x1e2>
 800396a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396e:	d008      	beq.n	8003982 <UART_SetConfig+0x1f2>
 8003970:	e00f      	b.n	8003992 <UART_SetConfig+0x202>
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003978:	e012      	b.n	80039a0 <UART_SetConfig+0x210>
 800397a:	2302      	movs	r3, #2
 800397c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003980:	e00e      	b.n	80039a0 <UART_SetConfig+0x210>
 8003982:	2304      	movs	r3, #4
 8003984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003988:	e00a      	b.n	80039a0 <UART_SetConfig+0x210>
 800398a:	2308      	movs	r3, #8
 800398c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003990:	e006      	b.n	80039a0 <UART_SetConfig+0x210>
 8003992:	2310      	movs	r3, #16
 8003994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003998:	e002      	b.n	80039a0 <UART_SetConfig+0x210>
 800399a:	2310      	movs	r3, #16
 800399c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a25      	ldr	r2, [pc, #148]	; (8003a3c <UART_SetConfig+0x2ac>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	f040 808a 	bne.w	8003ac0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d824      	bhi.n	80039fe <UART_SetConfig+0x26e>
 80039b4:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <UART_SetConfig+0x22c>)
 80039b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ba:	bf00      	nop
 80039bc:	080039e1 	.word	0x080039e1
 80039c0:	080039ff 	.word	0x080039ff
 80039c4:	080039e9 	.word	0x080039e9
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	080039ef 	.word	0x080039ef
 80039d0:	080039ff 	.word	0x080039ff
 80039d4:	080039ff 	.word	0x080039ff
 80039d8:	080039ff 	.word	0x080039ff
 80039dc:	080039f7 	.word	0x080039f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7fe fc82 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 80039e4:	61f8      	str	r0, [r7, #28]
        break;
 80039e6:	e010      	b.n	8003a0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <UART_SetConfig+0x2c0>)
 80039ea:	61fb      	str	r3, [r7, #28]
        break;
 80039ec:	e00d      	b.n	8003a0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ee:	f7fe fbe3 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 80039f2:	61f8      	str	r0, [r7, #28]
        break;
 80039f4:	e009      	b.n	8003a0a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039fa:	61fb      	str	r3, [r7, #28]
        break;
 80039fc:	e005      	b.n	8003a0a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8109 	beq.w	8003c24 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d305      	bcc.n	8003a2e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d912      	bls.n	8003a54 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a34:	e0f6      	b.n	8003c24 <UART_SetConfig+0x494>
 8003a36:	bf00      	nop
 8003a38:	efff69f3 	.word	0xefff69f3
 8003a3c:	40008000 	.word	0x40008000
 8003a40:	40013800 	.word	0x40013800
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40004400 	.word	0x40004400
 8003a4c:	40004800 	.word	0x40004800
 8003a50:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	2200      	movs	r2, #0
 8003a58:	461c      	mov	r4, r3
 8003a5a:	4615      	mov	r5, r2
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	022b      	lsls	r3, r5, #8
 8003a66:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a6a:	0222      	lsls	r2, r4, #8
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	6849      	ldr	r1, [r1, #4]
 8003a70:	0849      	lsrs	r1, r1, #1
 8003a72:	2000      	movs	r0, #0
 8003a74:	4688      	mov	r8, r1
 8003a76:	4681      	mov	r9, r0
 8003a78:	eb12 0a08 	adds.w	sl, r2, r8
 8003a7c:	eb43 0b09 	adc.w	fp, r3, r9
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a8e:	4650      	mov	r0, sl
 8003a90:	4659      	mov	r1, fp
 8003a92:	f7fc fb9b 	bl	80001cc <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa4:	d308      	bcc.n	8003ab8 <UART_SetConfig+0x328>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aac:	d204      	bcs.n	8003ab8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	e0b5      	b.n	8003c24 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003abe:	e0b1      	b.n	8003c24 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ac8:	d15d      	bne.n	8003b86 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d827      	bhi.n	8003b22 <UART_SetConfig+0x392>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0x348>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003afd 	.word	0x08003afd
 8003adc:	08003b05 	.word	0x08003b05
 8003ae0:	08003b0d 	.word	0x08003b0d
 8003ae4:	08003b23 	.word	0x08003b23
 8003ae8:	08003b13 	.word	0x08003b13
 8003aec:	08003b23 	.word	0x08003b23
 8003af0:	08003b23 	.word	0x08003b23
 8003af4:	08003b23 	.word	0x08003b23
 8003af8:	08003b1b 	.word	0x08003b1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003afc:	f7fe fbf4 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003b00:	61f8      	str	r0, [r7, #28]
        break;
 8003b02:	e014      	b.n	8003b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b04:	f7fe fc06 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003b08:	61f8      	str	r0, [r7, #28]
        break;
 8003b0a:	e010      	b.n	8003b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <UART_SetConfig+0x4b0>)
 8003b0e:	61fb      	str	r3, [r7, #28]
        break;
 8003b10:	e00d      	b.n	8003b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b12:	f7fe fb51 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003b16:	61f8      	str	r0, [r7, #28]
        break;
 8003b18:	e009      	b.n	8003b2e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1e:	61fb      	str	r3, [r7, #28]
        break;
 8003b20:	e005      	b.n	8003b2e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d077      	beq.n	8003c24 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	005a      	lsls	r2, r3, #1
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	441a      	add	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b0f      	cmp	r3, #15
 8003b4e:	d916      	bls.n	8003b7e <UART_SetConfig+0x3ee>
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b56:	d212      	bcs.n	8003b7e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f023 030f 	bic.w	r3, r3, #15
 8003b60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	8afb      	ldrh	r3, [r7, #22]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	8afa      	ldrh	r2, [r7, #22]
 8003b7a:	60da      	str	r2, [r3, #12]
 8003b7c:	e052      	b.n	8003c24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b84:	e04e      	b.n	8003c24 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d827      	bhi.n	8003bde <UART_SetConfig+0x44e>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x404>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bc1 	.word	0x08003bc1
 8003b9c:	08003bc9 	.word	0x08003bc9
 8003ba0:	08003bdf 	.word	0x08003bdf
 8003ba4:	08003bcf 	.word	0x08003bcf
 8003ba8:	08003bdf 	.word	0x08003bdf
 8003bac:	08003bdf 	.word	0x08003bdf
 8003bb0:	08003bdf 	.word	0x08003bdf
 8003bb4:	08003bd7 	.word	0x08003bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7fe fb96 	bl	80022e8 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	61f8      	str	r0, [r7, #28]
        break;
 8003bbe:	e014      	b.n	8003bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bc0:	f7fe fba8 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 8003bc4:	61f8      	str	r0, [r7, #28]
        break;
 8003bc6:	e010      	b.n	8003bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <UART_SetConfig+0x4b0>)
 8003bca:	61fb      	str	r3, [r7, #28]
        break;
 8003bcc:	e00d      	b.n	8003bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bce:	f7fe faf3 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003bd2:	61f8      	str	r0, [r7, #28]
        break;
 8003bd4:	e009      	b.n	8003bea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bda:	61fb      	str	r3, [r7, #28]
        break;
 8003bdc:	e005      	b.n	8003bea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003be8:	bf00      	nop
    }

    if (pclk != 0U)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d019      	beq.n	8003c24 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	085a      	lsrs	r2, r3, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	441a      	add	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b0f      	cmp	r3, #15
 8003c08:	d909      	bls.n	8003c1e <UART_SetConfig+0x48e>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d205      	bcs.n	8003c1e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60da      	str	r2, [r3, #12]
 8003c1c:	e002      	b.n	8003c24 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3728      	adds	r7, #40	; 0x28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	00f42400 	.word	0x00f42400

08003c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	f003 0310 	and.w	r3, r3, #16
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d01a      	beq.n	8003d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d42:	d10a      	bne.n	8003d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d98:	f7fd f882 	bl	8000ea0 <HAL_GetTick>
 8003d9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d10e      	bne.n	8003dca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f82d 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e023      	b.n	8003e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d10e      	bne.n	8003df6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f817 	bl	8003e1a <UART_WaitOnFlagUntilTimeout>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e00d      	b.n	8003e12 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b09c      	sub	sp, #112	; 0x70
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	603b      	str	r3, [r7, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2a:	e0a5      	b.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	f000 80a1 	beq.w	8003f78 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e36:	f7fd f833 	bl	8000ea0 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x32>
 8003e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d13e      	bne.n	8003eca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e60:	667b      	str	r3, [r7, #100]	; 0x64
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3308      	adds	r3, #8
 8003e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	f023 0301 	bic.w	r3, r3, #1
 8003e94:	663b      	str	r3, [r7, #96]	; 0x60
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3308      	adds	r3, #8
 8003e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e9e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ea0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e067      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d04f      	beq.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee6:	d147      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ef0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34
 8003f12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e6      	bne.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	613b      	str	r3, [r7, #16]
   return(result);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3308      	adds	r3, #8
 8003f42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f44:	623a      	str	r2, [r7, #32]
 8003f46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	69f9      	ldr	r1, [r7, #28]
 8003f4a:	6a3a      	ldr	r2, [r7, #32]
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e5      	bne.n	8003f24 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e010      	b.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4013      	ands	r3, r2
 8003f82:	68ba      	ldr	r2, [r7, #8]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	79fb      	ldrb	r3, [r7, #7]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	f43f af4a 	beq.w	8003e2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3770      	adds	r7, #112	; 0x70
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	42a6      	cmp	r6, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4d0b      	ldr	r5, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f000 f820 	bl	8003ffc <_init>
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	42a6      	cmp	r6, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fcc:	4798      	blx	r3
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd6:	4798      	blx	r3
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	08004064 	.word	0x08004064
 8003fe0:	08004064 	.word	0x08004064
 8003fe4:	08004064 	.word	0x08004064
 8003fe8:	08004068 	.word	0x08004068

08003fec <memset>:
 8003fec:	4402      	add	r2, r0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <memset+0xa>
 8003ff4:	4770      	bx	lr
 8003ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffa:	e7f9      	b.n	8003ff0 <memset+0x4>

08003ffc <_init>:
 8003ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ffe:	bf00      	nop
 8004000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004002:	bc08      	pop	{r3}
 8004004:	469e      	mov	lr, r3
 8004006:	4770      	bx	lr

08004008 <_fini>:
 8004008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400a:	bf00      	nop
 800400c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800400e:	bc08      	pop	{r3}
 8004010:	469e      	mov	lr, r3
 8004012:	4770      	bx	lr
