
Hovercraft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002940  08002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002980  08002980  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002980  08002980  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002980  08002980  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002984  08002984  00012984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002994  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002994  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d9f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001675  00000000  00000000  00029ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002b450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f56  00000000  00000000  0002c958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b242  00000000  00000000  000458ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1985  00000000  00000000  00050af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2475  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf4  00000000  00000000  000f24c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002928 	.word	0x08002928

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002928 	.word	0x08002928

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 faf7 	bl	80007c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f807 	bl	80001e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 f970 	bl	80004bc <MX_GPIO_Init>
  MX_TIM1_Init();
 80001dc:	f000 f84a 	bl	8000274 <MX_TIM1_Init>
  MX_TIM16_Init();
 80001e0:	f000 f8f4 	bl	80003cc <MX_TIM16_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	e7fe      	b.n	80001e4 <main+0x18>

080001e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e6:	b580      	push	{r7, lr}
 80001e8:	b096      	sub	sp, #88	; 0x58
 80001ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ec:	f107 0314 	add.w	r3, r7, #20
 80001f0:	2244      	movs	r2, #68	; 0x44
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f002 fb8f 	bl	8002918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fa:	463b      	mov	r3, r7
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000208:	f44f 7000 	mov.w	r0, #512	; 0x200
 800020c:	f000 fdcc 	bl	8000da8 <HAL_PWREx_ControlVoltageScaling>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000216:	f000 f9b5 	bl	8000584 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800021a:	2310      	movs	r3, #16
 800021c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000226:	2360      	movs	r3, #96	; 0x60
 8000228:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022a:	2300      	movs	r3, #0
 800022c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fe0e 	bl	8000e54 <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800023e:	f000 f9a1 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000256:	463b      	mov	r3, r7
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fa5c 	bl	8001718 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000266:	f000 f98d 	bl	8000584 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3758      	adds	r7, #88	; 0x58
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b09a      	sub	sp, #104	; 0x68
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800027a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000288:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800028c:	2200      	movs	r2, #0
 800028e:	601a      	str	r2, [r3, #0]
 8000290:	605a      	str	r2, [r3, #4]
 8000292:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000294:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
 80002a4:	615a      	str	r2, [r3, #20]
 80002a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	222c      	movs	r2, #44	; 0x2c
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fb32 	bl	8002918 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002b4:	4b43      	ldr	r3, [pc, #268]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002b6:	4a44      	ldr	r2, [pc, #272]	; (80003c8 <MX_TIM1_Init+0x154>)
 80002b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80002ba:	4b42      	ldr	r3, [pc, #264]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002bc:	2200      	movs	r2, #0
 80002be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c0:	4b40      	ldr	r3, [pc, #256]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80002c6:	4b3f      	ldr	r3, [pc, #252]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ce:	4b3d      	ldr	r3, [pc, #244]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002d4:	4b3b      	ldr	r3, [pc, #236]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002da:	4b3a      	ldr	r3, [pc, #232]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002e0:	4838      	ldr	r0, [pc, #224]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002e2:	f001 fc05 	bl	8001af0 <HAL_TIM_Base_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80002ec:	f000 f94a 	bl	8000584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80002fa:	4619      	mov	r1, r3
 80002fc:	4831      	ldr	r0, [pc, #196]	; (80003c4 <MX_TIM1_Init+0x150>)
 80002fe:	f001 fdc3 	bl	8001e88 <HAL_TIM_ConfigClockSource>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000308:	f000 f93c 	bl	8000584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800030c:	482d      	ldr	r0, [pc, #180]	; (80003c4 <MX_TIM1_Init+0x150>)
 800030e:	f001 fc46 	bl	8001b9e <HAL_TIM_PWM_Init>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000318:	f000 f934 	bl	8000584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800031c:	2300      	movs	r3, #0
 800031e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000320:	2300      	movs	r3, #0
 8000322:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000324:	2300      	movs	r3, #0
 8000326:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000328:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800032c:	4619      	mov	r1, r3
 800032e:	4825      	ldr	r0, [pc, #148]	; (80003c4 <MX_TIM1_Init+0x150>)
 8000330:	f002 f9f0 	bl	8002714 <HAL_TIMEx_MasterConfigSynchronization>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800033a:	f000 f923 	bl	8000584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800033e:	2360      	movs	r3, #96	; 0x60
 8000340:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000346:	2300      	movs	r3, #0
 8000348:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800034a:	2300      	movs	r3, #0
 800034c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000356:	2300      	movs	r3, #0
 8000358:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800035a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800035e:	2200      	movs	r2, #0
 8000360:	4619      	mov	r1, r3
 8000362:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM1_Init+0x150>)
 8000364:	f001 fc7c 	bl	8001c60 <HAL_TIM_PWM_ConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800036e:	f000 f909 	bl	8000584 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000376:	2300      	movs	r3, #0
 8000378:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800037e:	2300      	movs	r3, #0
 8000380:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800038a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800038c:	2300      	movs	r3, #0
 800038e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000398:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4619      	mov	r1, r3
 80003a6:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM1_Init+0x150>)
 80003a8:	f002 fa1a 	bl	80027e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80003b2:	f000 f8e7 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80003b6:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM1_Init+0x150>)
 80003b8:	f000 f942 	bl	8000640 <HAL_TIM_MspPostInit>

}
 80003bc:	bf00      	nop
 80003be:	3768      	adds	r7, #104	; 0x68
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40012c00 	.word	0x40012c00

080003cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b092      	sub	sp, #72	; 0x48
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003e6:	463b      	mov	r3, r7
 80003e8:	222c      	movs	r2, #44	; 0x2c
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f002 fa93 	bl	8002918 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003f2:	4b30      	ldr	r3, [pc, #192]	; (80004b4 <MX_TIM16_Init+0xe8>)
 80003f4:	4a30      	ldr	r2, [pc, #192]	; (80004b8 <MX_TIM16_Init+0xec>)
 80003f6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80003f8:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <MX_TIM16_Init+0xe8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fe:	4b2d      	ldr	r3, [pc, #180]	; (80004b4 <MX_TIM16_Init+0xe8>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000404:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <MX_TIM16_Init+0xe8>)
 8000406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800040a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <MX_TIM16_Init+0xe8>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000412:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <MX_TIM16_Init+0xe8>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_TIM16_Init+0xe8>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800041e:	4825      	ldr	r0, [pc, #148]	; (80004b4 <MX_TIM16_Init+0xe8>)
 8000420:	f001 fb66 	bl	8001af0 <HAL_TIM_Base_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800042a:	f000 f8ab 	bl	8000584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800042e:	4821      	ldr	r0, [pc, #132]	; (80004b4 <MX_TIM16_Init+0xe8>)
 8000430:	f001 fbb5 	bl	8001b9e <HAL_TIM_PWM_Init>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800043a:	f000 f8a3 	bl	8000584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800043e:	2360      	movs	r3, #96	; 0x60
 8000440:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000446:	2300      	movs	r3, #0
 8000448:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800044a:	2300      	movs	r3, #0
 800044c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800044e:	2300      	movs	r3, #0
 8000450:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000452:	2300      	movs	r3, #0
 8000454:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000456:	2300      	movs	r3, #0
 8000458:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800045a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800045e:	2200      	movs	r2, #0
 8000460:	4619      	mov	r1, r3
 8000462:	4814      	ldr	r0, [pc, #80]	; (80004b4 <MX_TIM16_Init+0xe8>)
 8000464:	f001 fbfc 	bl	8001c60 <HAL_TIM_PWM_ConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800046e:	f000 f889 	bl	8000584 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000472:	2300      	movs	r3, #0
 8000474:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800047a:	2300      	movs	r3, #0
 800047c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800048a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800048c:	2300      	movs	r3, #0
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000490:	463b      	mov	r3, r7
 8000492:	4619      	mov	r1, r3
 8000494:	4807      	ldr	r0, [pc, #28]	; (80004b4 <MX_TIM16_Init+0xe8>)
 8000496:	f002 f9a3 	bl	80027e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80004a0:	f000 f870 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80004a4:	4803      	ldr	r0, [pc, #12]	; (80004b4 <MX_TIM16_Init+0xe8>)
 80004a6:	f000 f8cb 	bl	8000640 <HAL_TIM_MspPostInit>

}
 80004aa:	bf00      	nop
 80004ac:	3748      	adds	r7, #72	; 0x48
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000074 	.word	0x20000074
 80004b8:	40014400 	.word	0x40014400

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	605a      	str	r2, [r3, #4]
 80004ca:	609a      	str	r2, [r3, #8]
 80004cc:	60da      	str	r2, [r3, #12]
 80004ce:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d0:	4b2b      	ldr	r3, [pc, #172]	; (8000580 <MX_GPIO_Init+0xc4>)
 80004d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d4:	4a2a      	ldr	r2, [pc, #168]	; (8000580 <MX_GPIO_Init+0xc4>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004dc:	4b28      	ldr	r3, [pc, #160]	; (8000580 <MX_GPIO_Init+0xc4>)
 80004de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e0:	f003 0301 	and.w	r3, r3, #1
 80004e4:	603b      	str	r3, [r7, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 fc33 	bl	8000d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004f6:	230c      	movs	r3, #12
 80004f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fa:	2302      	movs	r3, #2
 80004fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000502:	2303      	movs	r3, #3
 8000504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000506:	2307      	movs	r3, #7
 8000508:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	4619      	mov	r1, r3
 800050e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000512:	f000 fab1 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051a:	2312      	movs	r3, #18
 800051c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000522:	2303      	movs	r3, #3
 8000524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000526:	2304      	movs	r3, #4
 8000528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4619      	mov	r1, r3
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 faa1 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000536:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800053a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4619      	mov	r1, r3
 800054c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000550:	f000 fa92 	bl	8000a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000558:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800055a:	2312      	movs	r3, #18
 800055c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000562:	2303      	movs	r3, #3
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000566:	2304      	movs	r3, #4
 8000568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	4619      	mov	r1, r3
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f000 fa81 	bl	8000a78 <HAL_GPIO_Init>

}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	e7fe      	b.n	800058c <Error_Handler+0x8>
	...

08000590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <HAL_MspInit+0x44>)
 8000598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059a:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <HAL_MspInit+0x44>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6613      	str	r3, [r2, #96]	; 0x60
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <HAL_MspInit+0x44>)
 80005a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <HAL_MspInit+0x44>)
 80005b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b2:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <HAL_MspInit+0x44>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_MspInit+0x44>)
 80005bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a13      	ldr	r2, [pc, #76]	; (8000634 <HAL_TIM_Base_MspInit+0x5c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10c      	bne.n	8000604 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_TIM_Base_MspInit+0x60>)
 80005ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <HAL_TIM_Base_MspInit+0x60>)
 80005f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005f4:	6613      	str	r3, [r2, #96]	; 0x60
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <HAL_TIM_Base_MspInit+0x60>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000602:	e010      	b.n	8000626 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <HAL_TIM_Base_MspInit+0x64>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d10b      	bne.n	8000626 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_TIM_Base_MspInit+0x60>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000612:	4a09      	ldr	r2, [pc, #36]	; (8000638 <HAL_TIM_Base_MspInit+0x60>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	6613      	str	r3, [r2, #96]	; 0x60
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <HAL_TIM_Base_MspInit+0x60>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40012c00 	.word	0x40012c00
 8000638:	40021000 	.word	0x40021000
 800063c:	40014400 	.word	0x40014400

08000640 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a23      	ldr	r2, [pc, #140]	; (80006ec <HAL_TIM_MspPostInit+0xac>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d11e      	bne.n	80006a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <HAL_TIM_MspPostInit+0xb0>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <HAL_TIM_MspPostInit+0xb0>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <HAL_TIM_MspPostInit+0xb0>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800067a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800068c:	2301      	movs	r3, #1
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800069a:	f000 f9ed 	bl	8000a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800069e:	e021      	b.n	80006e4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM16)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <HAL_TIM_MspPostInit+0xb4>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d11c      	bne.n	80006e4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_TIM_MspPostInit+0xb0>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_TIM_MspPostInit+0xb0>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_TIM_MspPostInit+0xb0>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006c2:	2340      	movs	r3, #64	; 0x40
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80006d2:	230e      	movs	r3, #14
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 f9ca 	bl	8000a78 <HAL_GPIO_Init>
}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40012c00 	.word	0x40012c00
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40014400 	.word	0x40014400

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <NMI_Handler+0x4>

080006fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f892 	bl	800086c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000774:	f7ff ffea 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480c      	ldr	r0, [pc, #48]	; (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 800077a:	490d      	ldr	r1, [pc, #52]	; (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000790:	4c0a      	ldr	r4, [pc, #40]	; (80007bc <LoopForever+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f002 f897 	bl	80028d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a2:	f7ff fd13 	bl	80001cc <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007b4:	08002988 	.word	0x08002988
  ldr r2, =_sbss
 80007b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007bc:	200000c4 	.word	0x200000c4

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>

080007c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f000 f91f 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	200f      	movs	r0, #15
 80007d4:	f000 f80e 	bl	80007f4 <HAL_InitTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	e001      	b.n	80007e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e4:	f7ff fed4 	bl	8000590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_InitTick+0x6c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d023      	beq.n	8000850 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_InitTick+0x70>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_InitTick+0x6c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000816:	fbb3 f3f1 	udiv	r3, r3, r1
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f91d 	bl	8000a5e <HAL_SYSTICK_Config>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d10f      	bne.n	800084a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d809      	bhi.n	8000844 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	f04f 30ff 	mov.w	r0, #4294967295
 8000838:	f000 f8f5 	bl	8000a26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800083c:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <HAL_InitTick+0x74>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	e007      	b.n	8000854 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e004      	b.n	8000854 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	73fb      	strb	r3, [r7, #15]
 800084e:	e001      	b.n	8000854 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000854:	7bfb      	ldrb	r3, [r7, #15]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000008 	.word	0x20000008
 8000864:	20000000 	.word	0x20000000
 8000868:	20000004 	.word	0x20000004

0800086c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x20>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x24>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4413      	add	r3, r2
 800087c:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_IncTick+0x24>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	20000008 	.word	0x20000008
 8000890:	200000c0 	.word	0x200000c0

08000894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return uwTick;
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <HAL_GetTick+0x14>)
 800089a:	681b      	ldr	r3, [r3, #0]
}
 800089c:	4618      	mov	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	200000c0 	.word	0x200000c0

080008ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c8:	4013      	ands	r3, r2
 80008ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008de:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <__NVIC_SetPriorityGrouping+0x44>)
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	60d3      	str	r3, [r2, #12]
}
 80008e4:	bf00      	nop
 80008e6:	3714      	adds	r7, #20
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <__NVIC_GetPriorityGrouping+0x18>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	0a1b      	lsrs	r3, r3, #8
 80008fe:	f003 0307 	and.w	r3, r3, #7
}
 8000902:	4618      	mov	r0, r3
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	6039      	str	r1, [r7, #0]
 800091a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	db0a      	blt.n	800093a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	490c      	ldr	r1, [pc, #48]	; (800095c <__NVIC_SetPriority+0x4c>)
 800092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092e:	0112      	lsls	r2, r2, #4
 8000930:	b2d2      	uxtb	r2, r2
 8000932:	440b      	add	r3, r1
 8000934:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000938:	e00a      	b.n	8000950 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4908      	ldr	r1, [pc, #32]	; (8000960 <__NVIC_SetPriority+0x50>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 030f 	and.w	r3, r3, #15
 8000946:	3b04      	subs	r3, #4
 8000948:	0112      	lsls	r2, r2, #4
 800094a:	b2d2      	uxtb	r2, r2
 800094c:	440b      	add	r3, r1
 800094e:	761a      	strb	r2, [r3, #24]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000964:	b480      	push	{r7}
 8000966:	b089      	sub	sp, #36	; 0x24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	f1c3 0307 	rsb	r3, r3, #7
 800097e:	2b04      	cmp	r3, #4
 8000980:	bf28      	it	cs
 8000982:	2304      	movcs	r3, #4
 8000984:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3304      	adds	r3, #4
 800098a:	2b06      	cmp	r3, #6
 800098c:	d902      	bls.n	8000994 <NVIC_EncodePriority+0x30>
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3b03      	subs	r3, #3
 8000992:	e000      	b.n	8000996 <NVIC_EncodePriority+0x32>
 8000994:	2300      	movs	r3, #0
 8000996:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	f04f 32ff 	mov.w	r2, #4294967295
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	43da      	mvns	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	401a      	ands	r2, r3
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
 80009b6:	43d9      	mvns	r1, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	4313      	orrs	r3, r2
         );
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3724      	adds	r7, #36	; 0x24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff8e 	bl	8000910 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff47 	bl	80008ac <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff5c 	bl	80008f4 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff8e 	bl	8000964 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5d 	bl	8000910 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ffb0 	bl	80009cc <SysTick_Config>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a86:	e14e      	b.n	8000d26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	4013      	ands	r3, r2
 8000a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f000 8140 	beq.w	8000d20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f003 0303 	and.w	r3, r3, #3
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d005      	beq.n	8000ab8 <HAL_GPIO_Init+0x40>
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	2b02      	cmp	r3, #2
 8000ab6:	d130      	bne.n	8000b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aee:	2201      	movs	r2, #1
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	091b      	lsrs	r3, r3, #4
 8000b04:	f003 0201 	and.w	r2, r3, #1
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 0303 	and.w	r3, r3, #3
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d017      	beq.n	8000b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68db      	ldr	r3, [r3, #12]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	2b02      	cmp	r3, #2
 8000b60:	d123      	bne.n	8000baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	08da      	lsrs	r2, r3, #3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3208      	adds	r2, #8
 8000b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	220f      	movs	r2, #15
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	691a      	ldr	r2, [r3, #16]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f003 0307 	and.w	r3, r3, #7
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	08da      	lsrs	r2, r3, #3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3208      	adds	r2, #8
 8000ba4:	6939      	ldr	r1, [r7, #16]
 8000ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0203 	and.w	r2, r3, #3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 809a 	beq.w	8000d20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bec:	4b55      	ldr	r3, [pc, #340]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf0:	4a54      	ldr	r2, [pc, #336]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf8:	4b52      	ldr	r3, [pc, #328]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c04:	4a50      	ldr	r2, [pc, #320]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	089b      	lsrs	r3, r3, #2
 8000c0a:	3302      	adds	r3, #2
 8000c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	220f      	movs	r2, #15
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c2e:	d013      	beq.n	8000c58 <HAL_GPIO_Init+0x1e0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a46      	ldr	r2, [pc, #280]	; (8000d4c <HAL_GPIO_Init+0x2d4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d00d      	beq.n	8000c54 <HAL_GPIO_Init+0x1dc>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a45      	ldr	r2, [pc, #276]	; (8000d50 <HAL_GPIO_Init+0x2d8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d007      	beq.n	8000c50 <HAL_GPIO_Init+0x1d8>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a44      	ldr	r2, [pc, #272]	; (8000d54 <HAL_GPIO_Init+0x2dc>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d101      	bne.n	8000c4c <HAL_GPIO_Init+0x1d4>
 8000c48:	2303      	movs	r3, #3
 8000c4a:	e006      	b.n	8000c5a <HAL_GPIO_Init+0x1e2>
 8000c4c:	2307      	movs	r3, #7
 8000c4e:	e004      	b.n	8000c5a <HAL_GPIO_Init+0x1e2>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e002      	b.n	8000c5a <HAL_GPIO_Init+0x1e2>
 8000c54:	2301      	movs	r3, #1
 8000c56:	e000      	b.n	8000c5a <HAL_GPIO_Init+0x1e2>
 8000c58:	2300      	movs	r3, #0
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	f002 0203 	and.w	r2, r2, #3
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	4093      	lsls	r3, r2
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c6a:	4937      	ldr	r1, [pc, #220]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	089b      	lsrs	r3, r3, #2
 8000c70:	3302      	adds	r3, #2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c78:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cc6:	4a24      	ldr	r2, [pc, #144]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ccc:	4b22      	ldr	r3, [pc, #136]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	; (8000d58 <HAL_GPIO_Init+0x2e0>)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	3301      	adds	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f47f aea9 	bne.w	8000a88 <HAL_GPIO_Init+0x10>
  }
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	371c      	adds	r7, #28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	48000800 	.word	0x48000800
 8000d54:	48000c00 	.word	0x48000c00
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	807b      	strh	r3, [r7, #2]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d6c:	787b      	ldrb	r3, [r7, #1]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d78:	e002      	b.n	8000d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40007000 	.word	0x40007000

08000da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000db6:	d130      	bne.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dc4:	d038      	beq.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dce:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	; (8000e4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2232      	movs	r2, #50	; 0x32
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000de2:	fba2 2303 	umull	r2, r3, r2, r3
 8000de6:	0c9b      	lsrs	r3, r3, #18
 8000de8:	3301      	adds	r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dec:	e002      	b.n	8000df4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e00:	d102      	bne.n	8000e08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d1f2      	bne.n	8000dee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e14:	d110      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e00f      	b.n	8000e3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e26:	d007      	beq.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e28:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e30:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40007000 	.word	0x40007000
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	431bde83 	.word	0x431bde83

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f000 bc4f 	b.w	8001706 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e68:	4b97      	ldr	r3, [pc, #604]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e72:	4b95      	ldr	r3, [pc, #596]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80e6 	beq.w	8001056 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x4c>
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	2b0c      	cmp	r3, #12
 8000e94:	f040 808d 	bne.w	8000fb2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	f040 8089 	bne.w	8000fb2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ea0:	4b89      	ldr	r3, [pc, #548]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d006      	beq.n	8000eba <HAL_RCC_OscConfig+0x66>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d102      	bne.n	8000eba <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f000 bc26 	b.w	8001706 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ebe:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x80>
 8000eca:	4b7f      	ldr	r3, [pc, #508]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ed2:	e005      	b.n	8000ee0 <HAL_RCC_OscConfig+0x8c>
 8000ed4:	4b7c      	ldr	r3, [pc, #496]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d224      	bcs.n	8000f2e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fda1 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f000 bc06 	b.w	8001706 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000efa:	4b73      	ldr	r3, [pc, #460]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f00:	f043 0308 	orr.w	r3, r3, #8
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	4b70      	ldr	r3, [pc, #448]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	496d      	ldr	r1, [pc, #436]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f18:	4b6b      	ldr	r3, [pc, #428]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	4968      	ldr	r1, [pc, #416]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	604b      	str	r3, [r1, #4]
 8000f2c:	e025      	b.n	8000f7a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f2e:	4b66      	ldr	r3, [pc, #408]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a65      	ldr	r2, [pc, #404]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f34:	f043 0308 	orr.w	r3, r3, #8
 8000f38:	6013      	str	r3, [r2, #0]
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f46:	4960      	ldr	r1, [pc, #384]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f4c:	4b5e      	ldr	r3, [pc, #376]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	495b      	ldr	r1, [pc, #364]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fd60 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e3c5      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f7a:	f000 fccd 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	4950      	ldr	r1, [pc, #320]	; (80010cc <HAL_RCC_OscConfig+0x278>)
 8000f8c:	5ccb      	ldrb	r3, [r1, r3]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	fa22 f303 	lsr.w	r3, r2, r3
 8000f96:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_RCC_OscConfig+0x27c>)
 8000f98:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <HAL_RCC_OscConfig+0x280>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fc28 	bl	80007f4 <HAL_InitTick>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d052      	beq.n	8001054 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000fae:	7dfb      	ldrb	r3, [r7, #23]
 8000fb0:	e3a9      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d032      	beq.n	8001020 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fba:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a42      	ldr	r2, [pc, #264]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fc65 	bl	8000894 <HAL_GetTick>
 8000fca:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fce:	f7ff fc61 	bl	8000894 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e392      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fe0:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a35      	ldr	r2, [pc, #212]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001004:	4930      	ldr	r1, [pc, #192]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8001006:	4313      	orrs	r3, r2
 8001008:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	492b      	ldr	r1, [pc, #172]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 800101a:	4313      	orrs	r3, r2
 800101c:	604b      	str	r3, [r1, #4]
 800101e:	e01a      	b.n	8001056 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8001026:	f023 0301 	bic.w	r3, r3, #1
 800102a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800102c:	f7ff fc32 	bl	8000894 <HAL_GetTick>
 8001030:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001034:	f7ff fc2e 	bl	8000894 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e35f      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0x1e0>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d073      	beq.n	800114a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001062:	6a3b      	ldr	r3, [r7, #32]
 8001064:	2b08      	cmp	r3, #8
 8001066:	d005      	beq.n	8001074 <HAL_RCC_OscConfig+0x220>
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	2b0c      	cmp	r3, #12
 800106c:	d10e      	bne.n	800108c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d10b      	bne.n	800108c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d063      	beq.n	8001148 <HAL_RCC_OscConfig+0x2f4>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d15f      	bne.n	8001148 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e33c      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d106      	bne.n	80010a4 <HAL_RCC_OscConfig+0x250>
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	e025      	b.n	80010f0 <HAL_RCC_OscConfig+0x29c>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ac:	d114      	bne.n	80010d8 <HAL_RCC_OscConfig+0x284>
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6013      	str	r3, [r2, #0]
 80010ba:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a02      	ldr	r2, [pc, #8]	; (80010c8 <HAL_RCC_OscConfig+0x274>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e013      	b.n	80010f0 <HAL_RCC_OscConfig+0x29c>
 80010c8:	40021000 	.word	0x40021000
 80010cc:	08002940 	.word	0x08002940
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000004 	.word	0x20000004
 80010d8:	4b8f      	ldr	r3, [pc, #572]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a8e      	ldr	r2, [pc, #568]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	4b8c      	ldr	r3, [pc, #560]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a8b      	ldr	r2, [pc, #556]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d013      	beq.n	8001120 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f8:	f7ff fbcc 	bl	8000894 <HAL_GetTick>
 80010fc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fbc8 	bl	8000894 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e2f9      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001112:	4b81      	ldr	r3, [pc, #516]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x2ac>
 800111e:	e014      	b.n	800114a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fbb8 	bl	8000894 <HAL_GetTick>
 8001124:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fbb4 	bl	8000894 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e2e5      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800113a:	4b77      	ldr	r3, [pc, #476]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x2d4>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d060      	beq.n	8001218 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	2b04      	cmp	r3, #4
 800115a:	d005      	beq.n	8001168 <HAL_RCC_OscConfig+0x314>
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	2b0c      	cmp	r3, #12
 8001160:	d119      	bne.n	8001196 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d116      	bne.n	8001196 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	2b00      	cmp	r3, #0
 8001172:	d005      	beq.n	8001180 <HAL_RCC_OscConfig+0x32c>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e2c2      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	061b      	lsls	r3, r3, #24
 800118e:	4962      	ldr	r1, [pc, #392]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	e040      	b.n	8001218 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d023      	beq.n	80011e6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a5d      	ldr	r2, [pc, #372]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fb73 	bl	8000894 <HAL_GetTick>
 80011ae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fb6f 	bl	8000894 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e2a0      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011c4:	4b54      	ldr	r3, [pc, #336]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b51      	ldr	r3, [pc, #324]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	494e      	ldr	r1, [pc, #312]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]
 80011e4:	e018      	b.n	8001218 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b4c      	ldr	r3, [pc, #304]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a4b      	ldr	r2, [pc, #300]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fb4f 	bl	8000894 <HAL_GetTick>
 80011f6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fb4b 	bl	8000894 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e27c      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800120c:	4b42      	ldr	r3, [pc, #264]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f0      	bne.n	80011fa <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0308 	and.w	r3, r3, #8
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8082 	beq.w	800132a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d05f      	beq.n	80012ee <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 8001230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001234:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699a      	ldr	r2, [r3, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	429a      	cmp	r2, r3
 8001242:	d037      	beq.n	80012b4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e254      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d01b      	beq.n	800129e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126c:	4a2a      	ldr	r2, [pc, #168]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001276:	f7ff fb0d 	bl	8000894 <HAL_GetTick>
 800127a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800127e:	f7ff fb09 	bl	8000894 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b11      	cmp	r3, #17
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e23a      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ef      	bne.n	800127e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800129e:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a4:	f023 0210 	bic.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	491a      	ldr	r1, [pc, #104]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c4:	f7ff fae6 	bl	8000894 <HAL_GetTick>
 80012c8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fae2 	bl	8000894 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b11      	cmp	r3, #17
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e213      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ef      	beq.n	80012cc <HAL_RCC_OscConfig+0x478>
 80012ec:	e01d      	b.n	800132a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012f4:	4a08      	ldr	r2, [pc, #32]	; (8001318 <HAL_RCC_OscConfig+0x4c4>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fe:	f7ff fac9 	bl	8000894 <HAL_GetTick>
 8001302:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001304:	e00a      	b.n	800131c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001306:	f7ff fac5 	bl	8000894 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b11      	cmp	r3, #17
 8001312:	d903      	bls.n	800131c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e1f6      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
 8001318:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800131c:	4ba9      	ldr	r3, [pc, #676]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 800131e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1ed      	bne.n	8001306 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 80bd 	beq.w	80014b2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800133e:	4ba1      	ldr	r3, [pc, #644]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10e      	bne.n	8001368 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b9e      	ldr	r3, [pc, #632]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	4a9d      	ldr	r2, [pc, #628]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6593      	str	r3, [r2, #88]	; 0x58
 8001356:	4b9b      	ldr	r3, [pc, #620]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001368:	4b97      	ldr	r3, [pc, #604]	; (80015c8 <HAL_RCC_OscConfig+0x774>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001370:	2b00      	cmp	r3, #0
 8001372:	d118      	bne.n	80013a6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001374:	4b94      	ldr	r3, [pc, #592]	; (80015c8 <HAL_RCC_OscConfig+0x774>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a93      	ldr	r2, [pc, #588]	; (80015c8 <HAL_RCC_OscConfig+0x774>)
 800137a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001380:	f7ff fa88 	bl	8000894 <HAL_GetTick>
 8001384:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001388:	f7ff fa84 	bl	8000894 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1b5      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139a:	4b8b      	ldr	r3, [pc, #556]	; (80015c8 <HAL_RCC_OscConfig+0x774>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d02c      	beq.n	800140c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80013b2:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c4:	497f      	ldr	r1, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d010      	beq.n	80013fa <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80013d8:	4b7a      	ldr	r3, [pc, #488]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013de:	4a79      	ldr	r2, [pc, #484]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013e8:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ee:	4a75      	ldr	r2, [pc, #468]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013f8:	e018      	b.n	800142c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80013fa:	4b72      	ldr	r3, [pc, #456]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80013fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001400:	4a70      	ldr	r2, [pc, #448]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001402:	f043 0301 	orr.w	r3, r3, #1
 8001406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800140a:	e00f      	b.n	800142c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800140c:	4b6d      	ldr	r3, [pc, #436]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 800140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001412:	4a6c      	ldr	r2, [pc, #432]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001414:	f023 0301 	bic.w	r3, r3, #1
 8001418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800141c:	4b69      	ldr	r3, [pc, #420]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 800141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001422:	4a68      	ldr	r2, [pc, #416]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d016      	beq.n	8001462 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001434:	f7ff fa2e 	bl	8000894 <HAL_GetTick>
 8001438:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143c:	f7ff fa2a 	bl	8000894 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	f241 3288 	movw	r2, #5000	; 0x1388
 800144a:	4293      	cmp	r3, r2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e159      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001452:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0ed      	beq.n	800143c <HAL_RCC_OscConfig+0x5e8>
 8001460:	e01d      	b.n	800149e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001462:	f7ff fa17 	bl	8000894 <HAL_GetTick>
 8001466:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fa13 	bl	8000894 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e142      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001480:	4b50      	ldr	r3, [pc, #320]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ed      	bne.n	800146a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800148e:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001494:	4a4b      	ldr	r2, [pc, #300]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800149a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d105      	bne.n	80014b2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	4a46      	ldr	r2, [pc, #280]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80014ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0320 	and.w	r3, r3, #32
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d03c      	beq.n	8001538 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d01c      	beq.n	8001500 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80014c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014cc:	4a3d      	ldr	r2, [pc, #244]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d6:	f7ff f9dd 	bl	8000894 <HAL_GetTick>
 80014da:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014de:	f7ff f9d9 	bl	8000894 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e10a      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80014f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ef      	beq.n	80014de <HAL_RCC_OscConfig+0x68a>
 80014fe:	e01b      	b.n	8001538 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001502:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001506:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 8001508:	f023 0301 	bic.w	r3, r3, #1
 800150c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001510:	f7ff f9c0 	bl	8000894 <HAL_GetTick>
 8001514:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001518:	f7ff f9bc 	bl	8000894 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0ed      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 800152c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1ef      	bne.n	8001518 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80e1 	beq.w	8001704 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	2b02      	cmp	r3, #2
 8001548:	f040 80b5 	bne.w	80016b6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f003 0203 	and.w	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	429a      	cmp	r2, r3
 800155e:	d124      	bne.n	80015aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156a:	3b01      	subs	r3, #1
 800156c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800156e:	429a      	cmp	r2, r3
 8001570:	d11b      	bne.n	80015aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800157e:	429a      	cmp	r2, r3
 8001580:	d113      	bne.n	80015aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	3b01      	subs	r3, #1
 8001590:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d109      	bne.n	80015aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	085b      	lsrs	r3, r3, #1
 80015a2:	3b01      	subs	r3, #1
 80015a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d05f      	beq.n	800166a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	d05a      	beq.n	8001666 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <HAL_RCC_OscConfig+0x770>)
 80015b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015bc:	f7ff f96a 	bl	8000894 <HAL_GetTick>
 80015c0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c2:	e00c      	b.n	80015de <HAL_RCC_OscConfig+0x78a>
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015cc:	f7ff f962 	bl	8000894 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e093      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015de:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015ea:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	4b49      	ldr	r3, [pc, #292]	; (8001714 <HAL_RCC_OscConfig+0x8c0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015fa:	3a01      	subs	r2, #1
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	4311      	orrs	r1, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001604:	0212      	lsls	r2, r2, #8
 8001606:	4311      	orrs	r1, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800160c:	0852      	lsrs	r2, r2, #1
 800160e:	3a01      	subs	r2, #1
 8001610:	0552      	lsls	r2, r2, #21
 8001612:	4311      	orrs	r1, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001618:	0852      	lsrs	r2, r2, #1
 800161a:	3a01      	subs	r2, #1
 800161c:	0652      	lsls	r2, r2, #25
 800161e:	430a      	orrs	r2, r1
 8001620:	493b      	ldr	r1, [pc, #236]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a39      	ldr	r2, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 800162c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001630:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	4a36      	ldr	r2, [pc, #216]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 8001638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800163e:	f7ff f929 	bl	8000894 <HAL_GetTick>
 8001642:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f925 	bl	8000894 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e056      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001658:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001664:	e04e      	b.n	8001704 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e04d      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d146      	bne.n	8001704 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 800167c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001680:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	4a22      	ldr	r2, [pc, #136]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 8001688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800168c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800168e:	f7ff f901 	bl	8000894 <HAL_GetTick>
 8001692:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff f8fd 	bl	8000894 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e02e      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x842>
 80016b4:	e026      	b.n	8001704 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016b6:	6a3b      	ldr	r3, [r7, #32]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d021      	beq.n	8001700 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a13      	ldr	r2, [pc, #76]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80016c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff f8e4 	bl	8000894 <HAL_GetTick>
 80016cc:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff f8e0 	bl	8000894 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e011      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_RCC_OscConfig+0x8bc>)
 80016f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016f8:	f023 0303 	bic.w	r3, r3, #3
 80016fc:	60d3      	str	r3, [r2, #12]
 80016fe:	e001      	b.n	8001704 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000
 8001714:	f99f808c 	.word	0xf99f808c

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0e7      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b75      	ldr	r3, [pc, #468]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d910      	bls.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b72      	ldr	r3, [pc, #456]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0207 	bic.w	r2, r3, #7
 8001742:	4970      	ldr	r1, [pc, #448]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b6e      	ldr	r3, [pc, #440]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0cf      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d010      	beq.n	800178a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001774:	429a      	cmp	r2, r3
 8001776:	d908      	bls.n	800178a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b63      	ldr	r3, [pc, #396]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4960      	ldr	r1, [pc, #384]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d04c      	beq.n	8001830 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	4b5a      	ldr	r3, [pc, #360]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d121      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e0a6      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017b6:	4b54      	ldr	r3, [pc, #336]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d115      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e09a      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d109      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e08e      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017de:	4b4a      	ldr	r3, [pc, #296]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e086      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017ee:	4b46      	ldr	r3, [pc, #280]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f023 0203 	bic.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	4943      	ldr	r1, [pc, #268]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001800:	f7ff f848 	bl	8000894 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	e00a      	b.n	800181e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001808:	f7ff f844 	bl	8000894 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f241 3288 	movw	r2, #5000	; 0x1388
 8001816:	4293      	cmp	r3, r2
 8001818:	d901      	bls.n	800181e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e06e      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 020c 	and.w	r2, r3, #12
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	429a      	cmp	r2, r3
 800182e:	d1eb      	bne.n	8001808 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d010      	beq.n	800185e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001848:	429a      	cmp	r2, r3
 800184a:	d208      	bcs.n	800185e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	492b      	ldr	r1, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d210      	bcs.n	800188e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f023 0207 	bic.w	r2, r3, #7
 8001874:	4923      	ldr	r1, [pc, #140]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_ClockConfig+0x1ec>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d001      	beq.n	800188e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e036      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800189a:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4918      	ldr	r1, [pc, #96]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d009      	beq.n	80018cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4910      	ldr	r1, [pc, #64]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018cc:	f000 f824 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d0:	4602      	mov	r2, r0
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_RCC_ClockConfig+0x1f0>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	490b      	ldr	r1, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x1f4>)
 80018de:	5ccb      	ldrb	r3, [r1, r3]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1f8>)
 80018ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1fc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe ff7f 	bl	80007f4 <HAL_InitTick>
 80018f6:	4603      	mov	r3, r0
 80018f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018fa:	7afb      	ldrb	r3, [r7, #11]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40022000 	.word	0x40022000
 8001908:	40021000 	.word	0x40021000
 800190c:	08002940 	.word	0x08002940
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001930:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_GetSysClockFreq+0x34>
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d121      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d11e      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d107      	bne.n	8001968 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001958:	4b31      	ldr	r3, [pc, #196]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800195a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e005      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001974:	4a2b      	ldr	r2, [pc, #172]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10d      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b04      	cmp	r3, #4
 800198e:	d102      	bne.n	8001996 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001990:	4b25      	ldr	r3, [pc, #148]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x110>)
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	e004      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b08      	cmp	r3, #8
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x114>)
 800199e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d134      	bne.n	8001a10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d003      	beq.n	80019be <HAL_RCC_GetSysClockFreq+0xa6>
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d003      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0xac>
 80019bc:	e005      	b.n	80019ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019be:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_RCC_GetSysClockFreq+0x110>)
 80019c0:	617b      	str	r3, [r7, #20]
      break;
 80019c2:	e005      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x114>)
 80019c6:	617b      	str	r3, [r7, #20]
      break;
 80019c8:	e002      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	617b      	str	r3, [r7, #20]
      break;
 80019ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	3301      	adds	r3, #1
 80019dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	fb03 f202 	mul.w	r2, r3, r2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	0e5b      	lsrs	r3, r3, #25
 80019fc:	f003 0303 	and.w	r3, r3, #3
 8001a00:	3301      	adds	r3, #1
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a10:	69bb      	ldr	r3, [r7, #24]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	08002950 	.word	0x08002950
 8001a28:	00f42400 	.word	0x00f42400
 8001a2c:	007a1200 	.word	0x007a1200

08001a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a48:	f7ff f9a0 	bl	8000d8c <HAL_PWREx_GetVoltageRange>
 8001a4c:	6178      	str	r0, [r7, #20]
 8001a4e:	e014      	b.n	8001a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5c:	4b22      	ldr	r3, [pc, #136]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a68:	f7ff f990 	bl	8000d8c <HAL_PWREx_GetVoltageRange>
 8001a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a80:	d10b      	bne.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b80      	cmp	r3, #128	; 0x80
 8001a86:	d919      	bls.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a8c:	d902      	bls.n	8001a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a8e:	2302      	movs	r3, #2
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e013      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a94:	2301      	movs	r3, #1
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e010      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b80      	cmp	r3, #128	; 0x80
 8001a9e:	d902      	bls.n	8001aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e00a      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b80      	cmp	r3, #128	; 0x80
 8001aaa:	d102      	bne.n	8001ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aac:	2302      	movs	r3, #2
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e004      	b.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b70      	cmp	r3, #112	; 0x70
 8001ab6:	d101      	bne.n	8001abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab8:	2301      	movs	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 0207 	bic.w	r2, r3, #7
 8001ac4:	4909      	ldr	r1, [pc, #36]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40022000 	.word	0x40022000

08001af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e049      	b.n	8001b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fd5e 	bl	80005d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f000 fa74 	bl	800201c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e049      	b.n	8001c44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d106      	bne.n	8001bca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 f841 	bl	8001c4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f000 fa1d 	bl	800201c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e0ff      	b.n	8001e7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b14      	cmp	r3, #20
 8001c8a:	f200 80f0 	bhi.w	8001e6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001c8e:	a201      	add	r2, pc, #4	; (adr r2, 8001c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c94:	08001ce9 	.word	0x08001ce9
 8001c98:	08001e6f 	.word	0x08001e6f
 8001c9c:	08001e6f 	.word	0x08001e6f
 8001ca0:	08001e6f 	.word	0x08001e6f
 8001ca4:	08001d29 	.word	0x08001d29
 8001ca8:	08001e6f 	.word	0x08001e6f
 8001cac:	08001e6f 	.word	0x08001e6f
 8001cb0:	08001e6f 	.word	0x08001e6f
 8001cb4:	08001d6b 	.word	0x08001d6b
 8001cb8:	08001e6f 	.word	0x08001e6f
 8001cbc:	08001e6f 	.word	0x08001e6f
 8001cc0:	08001e6f 	.word	0x08001e6f
 8001cc4:	08001dab 	.word	0x08001dab
 8001cc8:	08001e6f 	.word	0x08001e6f
 8001ccc:	08001e6f 	.word	0x08001e6f
 8001cd0:	08001e6f 	.word	0x08001e6f
 8001cd4:	08001ded 	.word	0x08001ded
 8001cd8:	08001e6f 	.word	0x08001e6f
 8001cdc:	08001e6f 	.word	0x08001e6f
 8001ce0:	08001e6f 	.word	0x08001e6f
 8001ce4:	08001e2d 	.word	0x08001e2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f9f8 	bl	80020e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0208 	orr.w	r2, r2, #8
 8001d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0204 	bic.w	r2, r2, #4
 8001d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6999      	ldr	r1, [r3, #24]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	619a      	str	r2, [r3, #24]
      break;
 8001d26:	e0a5      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 fa54 	bl	80021dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6999      	ldr	r1, [r3, #24]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	021a      	lsls	r2, r3, #8
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	619a      	str	r2, [r3, #24]
      break;
 8001d68:	e084      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 faad 	bl	80022d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69da      	ldr	r2, [r3, #28]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0208 	orr.w	r2, r2, #8
 8001d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0204 	bic.w	r2, r2, #4
 8001d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69d9      	ldr	r1, [r3, #28]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	61da      	str	r2, [r3, #28]
      break;
 8001da8:	e064      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fb05 	bl	80023c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69d9      	ldr	r1, [r3, #28]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	021a      	lsls	r2, r3, #8
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	61da      	str	r2, [r3, #28]
      break;
 8001dea:	e043      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fb42 	bl	800247c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0208 	orr.w	r2, r2, #8
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0204 	bic.w	r2, r2, #4
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e2a:	e023      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 fb7a 	bl	800252c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	021a      	lsls	r2, r3, #8
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001e6c:	e002      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
      break;
 8001e72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop

08001e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e0b6      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x18a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee0:	d03e      	beq.n	8001f60 <HAL_TIM_ConfigClockSource+0xd8>
 8001ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee6:	f200 8087 	bhi.w	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eee:	f000 8086 	beq.w	8001ffe <HAL_TIM_ConfigClockSource+0x176>
 8001ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef6:	d87f      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001ef8:	2b70      	cmp	r3, #112	; 0x70
 8001efa:	d01a      	beq.n	8001f32 <HAL_TIM_ConfigClockSource+0xaa>
 8001efc:	2b70      	cmp	r3, #112	; 0x70
 8001efe:	d87b      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001f00:	2b60      	cmp	r3, #96	; 0x60
 8001f02:	d050      	beq.n	8001fa6 <HAL_TIM_ConfigClockSource+0x11e>
 8001f04:	2b60      	cmp	r3, #96	; 0x60
 8001f06:	d877      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001f08:	2b50      	cmp	r3, #80	; 0x50
 8001f0a:	d03c      	beq.n	8001f86 <HAL_TIM_ConfigClockSource+0xfe>
 8001f0c:	2b50      	cmp	r3, #80	; 0x50
 8001f0e:	d873      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d058      	beq.n	8001fc6 <HAL_TIM_ConfigClockSource+0x13e>
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d86f      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001f18:	2b30      	cmp	r3, #48	; 0x30
 8001f1a:	d064      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8001f1c:	2b30      	cmp	r3, #48	; 0x30
 8001f1e:	d86b      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d060      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8001f24:	2b20      	cmp	r3, #32
 8001f26:	d867      	bhi.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d05c      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8001f2c:	2b10      	cmp	r3, #16
 8001f2e:	d05a      	beq.n	8001fe6 <HAL_TIM_ConfigClockSource+0x15e>
 8001f30:	e062      	b.n	8001ff8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f000 fbc7 	bl	80026d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	609a      	str	r2, [r3, #8]
      break;
 8001f5e:	e04f      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6899      	ldr	r1, [r3, #8]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f000 fbb0 	bl	80026d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f82:	609a      	str	r2, [r3, #8]
      break;
 8001f84:	e03c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f000 fb24 	bl	80025e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2150      	movs	r1, #80	; 0x50
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 fb7d 	bl	800269e <TIM_ITRx_SetConfig>
      break;
 8001fa4:	e02c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f000 fb43 	bl	800263e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2160      	movs	r1, #96	; 0x60
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fb6d 	bl	800269e <TIM_ITRx_SetConfig>
      break;
 8001fc4:	e01c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6859      	ldr	r1, [r3, #4]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f000 fb04 	bl	80025e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2140      	movs	r1, #64	; 0x40
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 fb5d 	bl	800269e <TIM_ITRx_SetConfig>
      break;
 8001fe4:	e00c      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f000 fb54 	bl	800269e <TIM_ITRx_SetConfig>
      break;
 8001ff6:	e003      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffc:	e000      	b.n	8002000 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8001ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a2a      	ldr	r2, [pc, #168]	; (80020d8 <TIM_Base_SetConfig+0xbc>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x20>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203a:	d108      	bne.n	800204e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <TIM_Base_SetConfig+0xbc>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00b      	beq.n	800206e <TIM_Base_SetConfig+0x52>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d007      	beq.n	800206e <TIM_Base_SetConfig+0x52>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <TIM_Base_SetConfig+0xc0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <TIM_Base_SetConfig+0x52>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1d      	ldr	r2, [pc, #116]	; (80020e0 <TIM_Base_SetConfig+0xc4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <TIM_Base_SetConfig+0xbc>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d007      	beq.n	80020bc <TIM_Base_SetConfig+0xa0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <TIM_Base_SetConfig+0xc0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_Base_SetConfig+0xa0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <TIM_Base_SetConfig+0xc4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d103      	bne.n	80020c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	615a      	str	r2, [r3, #20]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40014400 	.word	0x40014400

080020e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	f023 0201 	bic.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0303 	bic.w	r3, r3, #3
 800211e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f023 0302 	bic.w	r3, r3, #2
 8002130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <TIM_OC1_SetConfig+0xec>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d007      	beq.n	8002154 <TIM_OC1_SetConfig+0x70>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <TIM_OC1_SetConfig+0xf0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <TIM_OC1_SetConfig+0x70>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <TIM_OC1_SetConfig+0xf4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d10c      	bne.n	800216e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f023 0308 	bic.w	r3, r3, #8
 800215a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a17      	ldr	r2, [pc, #92]	; (80021d0 <TIM_OC1_SetConfig+0xec>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <TIM_OC1_SetConfig+0xa2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <TIM_OC1_SetConfig+0xf0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d003      	beq.n	8002186 <TIM_OC1_SetConfig+0xa2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <TIM_OC1_SetConfig+0xf4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d111      	bne.n	80021aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800218c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	621a      	str	r2, [r3, #32]
}
 80021c4:	bf00      	nop
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	40014000 	.word	0x40014000
 80021d8:	40014400 	.word	0x40014400

080021dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f023 0210 	bic.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800220a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800220e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0320 	bic.w	r3, r3, #32
 800222a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a22      	ldr	r2, [pc, #136]	; (80022c4 <TIM_OC2_SetConfig+0xe8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d10d      	bne.n	800225c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	4313      	orrs	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800225a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <TIM_OC2_SetConfig+0xe8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <TIM_OC2_SetConfig+0x98>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a18      	ldr	r2, [pc, #96]	; (80022c8 <TIM_OC2_SetConfig+0xec>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_OC2_SetConfig+0x98>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <TIM_OC2_SetConfig+0xf0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d113      	bne.n	800229c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800227a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	621a      	str	r2, [r3, #32]
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40014000 	.word	0x40014000
 80022cc:	40014400 	.word	0x40014400

080022d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800231c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <TIM_OC3_SetConfig+0xe4>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10d      	bne.n	800234e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	4313      	orrs	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800234c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <TIM_OC3_SetConfig+0xe4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d007      	beq.n	8002366 <TIM_OC3_SetConfig+0x96>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a17      	ldr	r2, [pc, #92]	; (80023b8 <TIM_OC3_SetConfig+0xe8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d003      	beq.n	8002366 <TIM_OC3_SetConfig+0x96>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a16      	ldr	r2, [pc, #88]	; (80023bc <TIM_OC3_SetConfig+0xec>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d113      	bne.n	800238e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800236c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	621a      	str	r2, [r3, #32]
}
 80023a8:	bf00      	nop
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40014400 	.word	0x40014400

080023c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
 80023da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800240e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	031b      	lsls	r3, r3, #12
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a14      	ldr	r2, [pc, #80]	; (8002470 <TIM_OC4_SetConfig+0xb0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <TIM_OC4_SetConfig+0x74>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <TIM_OC4_SetConfig+0xb4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d003      	beq.n	8002434 <TIM_OC4_SetConfig+0x74>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a12      	ldr	r2, [pc, #72]	; (8002478 <TIM_OC4_SetConfig+0xb8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d109      	bne.n	8002448 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800243a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	019b      	lsls	r3, r3, #6
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	621a      	str	r2, [r3, #32]
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40014000 	.word	0x40014000
 8002478:	40014400 	.word	0x40014400

0800247c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <TIM_OC5_SetConfig+0xa4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <TIM_OC5_SetConfig+0x6a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <TIM_OC5_SetConfig+0xa8>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d003      	beq.n	80024e6 <TIM_OC5_SetConfig+0x6a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <TIM_OC5_SetConfig+0xac>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d109      	bne.n	80024fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	621a      	str	r2, [r3, #32]
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40014000 	.word	0x40014000
 8002528:	40014400 	.word	0x40014400

0800252c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a1b      	ldr	r3, [r3, #32]
 800253a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800255e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	051b      	lsls	r3, r3, #20
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <TIM_OC6_SetConfig+0xa8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <TIM_OC6_SetConfig+0x6c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <TIM_OC6_SetConfig+0xac>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_OC6_SetConfig+0x6c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <TIM_OC6_SetConfig+0xb0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d109      	bne.n	80025ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800259e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	697a      	ldr	r2, [r7, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	621a      	str	r2, [r3, #32]
}
 80025c6:	bf00      	nop
 80025c8:	371c      	adds	r7, #28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40012c00 	.word	0x40012c00
 80025d8:	40014000 	.word	0x40014000
 80025dc:	40014400 	.word	0x40014400

080025e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b087      	sub	sp, #28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	f023 0201 	bic.w	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f023 030a 	bic.w	r3, r3, #10
 800261c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	621a      	str	r2, [r3, #32]
}
 8002632:	bf00      	nop
 8002634:	371c      	adds	r7, #28
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800263e:	b480      	push	{r7}
 8002640:	b087      	sub	sp, #28
 8002642:	af00      	add	r7, sp, #0
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f023 0210 	bic.w	r2, r3, #16
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	031b      	lsls	r3, r3, #12
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800267a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f043 0307 	orr.w	r3, r3, #7
 80026c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	021a      	lsls	r2, r3, #8
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	431a      	orrs	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	609a      	str	r2, [r3, #8]
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002728:	2302      	movs	r3, #2
 800272a:	e04f      	b.n	80027cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800275c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a14      	ldr	r2, [pc, #80]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d004      	beq.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d10c      	bne.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	40012c00 	.word	0x40012c00
 80027dc:	40014000 	.word	0x40014000

080027e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e060      	b.n	80028be <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	4313      	orrs	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	041b      	lsls	r3, r3, #16
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d115      	bne.n	80028ac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	051b      	lsls	r3, r3, #20
 800288c:	4313      	orrs	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00

080028d0 <__libc_init_array>:
 80028d0:	b570      	push	{r4, r5, r6, lr}
 80028d2:	4d0d      	ldr	r5, [pc, #52]	; (8002908 <__libc_init_array+0x38>)
 80028d4:	4c0d      	ldr	r4, [pc, #52]	; (800290c <__libc_init_array+0x3c>)
 80028d6:	1b64      	subs	r4, r4, r5
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	2600      	movs	r6, #0
 80028dc:	42a6      	cmp	r6, r4
 80028de:	d109      	bne.n	80028f4 <__libc_init_array+0x24>
 80028e0:	4d0b      	ldr	r5, [pc, #44]	; (8002910 <__libc_init_array+0x40>)
 80028e2:	4c0c      	ldr	r4, [pc, #48]	; (8002914 <__libc_init_array+0x44>)
 80028e4:	f000 f820 	bl	8002928 <_init>
 80028e8:	1b64      	subs	r4, r4, r5
 80028ea:	10a4      	asrs	r4, r4, #2
 80028ec:	2600      	movs	r6, #0
 80028ee:	42a6      	cmp	r6, r4
 80028f0:	d105      	bne.n	80028fe <__libc_init_array+0x2e>
 80028f2:	bd70      	pop	{r4, r5, r6, pc}
 80028f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028f8:	4798      	blx	r3
 80028fa:	3601      	adds	r6, #1
 80028fc:	e7ee      	b.n	80028dc <__libc_init_array+0xc>
 80028fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002902:	4798      	blx	r3
 8002904:	3601      	adds	r6, #1
 8002906:	e7f2      	b.n	80028ee <__libc_init_array+0x1e>
 8002908:	08002980 	.word	0x08002980
 800290c:	08002980 	.word	0x08002980
 8002910:	08002980 	.word	0x08002980
 8002914:	08002984 	.word	0x08002984

08002918 <memset>:
 8002918:	4402      	add	r2, r0
 800291a:	4603      	mov	r3, r0
 800291c:	4293      	cmp	r3, r2
 800291e:	d100      	bne.n	8002922 <memset+0xa>
 8002920:	4770      	bx	lr
 8002922:	f803 1b01 	strb.w	r1, [r3], #1
 8002926:	e7f9      	b.n	800291c <memset+0x4>

08002928 <_init>:
 8002928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292a:	bf00      	nop
 800292c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800292e:	bc08      	pop	{r3}
 8002930:	469e      	mov	lr, r3
 8002932:	4770      	bx	lr

08002934 <_fini>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr
