
2023_TP1A_H7A3_IO_v02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000012c  24000074  08006080  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001a0  08006080  000201a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000e833  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0000fce3  00000000  00000000  0002e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001ee4  00000000  00000000  0003e5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ad0  00000000  00000000  000404a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    001333c0  00000000  00000000  00040f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e8  00000000  00000000  00174330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f49c  00000000  00000000  00174d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a41b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ee4  00000000  00000000  001a4204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08005f6c 	.word	0x08005f6c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	08005f6c 	.word	0x08005f6c

080002f0 <LED_GreenEnable>:
	.type LED_GreenEnable, %function
	.global LED_GreenEnable
LED_GreenEnable:
	PUSH {R4,R5,R6,LR}
 80002f0:	b570      	push	{r4, r5, r6, lr}
	LDR R4,=0x58024540
 80002f2:	4c03      	ldr	r4, [pc, #12]	; (8000300 <LED_GreenEnable+0x10>)
	LDR R5,[R4]
 80002f4:	6825      	ldr	r5, [r4, #0]
	MOV R6,#0x2
 80002f6:	2602      	movs	r6, #2
	ORR R5,R5,R6
 80002f8:	4335      	orrs	r5, r6
	STR R5,[R4]
 80002fa:	6025      	str	r5, [r4, #0]
	POP {R4,R5,R6,PC}
 80002fc:	bd70      	pop	{r4, r5, r6, pc}
 80002fe:	0000      	.short	0x0000
	LDR R4,=0x58024540
 8000300:	58024540 	.word	0x58024540

08000304 <strlen>:
 8000304:	4603      	mov	r3, r0
 8000306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800030a:	2a00      	cmp	r2, #0
 800030c:	d1fb      	bne.n	8000306 <strlen+0x2>
 800030e:	1a18      	subs	r0, r3, r0
 8000310:	3801      	subs	r0, #1
 8000312:	4770      	bx	lr
	...

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <LED_Configure>:

// HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3, GPIO_PIN_RESET);

#include "stm32h7xx.h"

void LED_Configure(){
 80006c4:	b480      	push	{r7}
 80006c6:	b087      	sub	sp, #28
 80006c8:	af00      	add	r7, sp, #0
	int* pt_GPIOB_OSPEEDR;
	int* pt_GPIOB_PUPDR;
	int* pt_GPIOB_ODR;
	int* pt_GPIOB_IDR;

	pt_GPIOB_MODER = (int*) 0x58020400;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <LED_Configure+0x80>)
 80006cc:	617b      	str	r3, [r7, #20]
	pt_GPIOB_OTYPER = (int*) 0x58020404;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <LED_Configure+0x84>)
 80006d0:	613b      	str	r3, [r7, #16]
	pt_GPIOB_OSPEEDR = (int*) 0x58020408;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <LED_Configure+0x88>)
 80006d4:	60fb      	str	r3, [r7, #12]
	pt_GPIOB_PUPDR = (int*) 0x5802040C;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <LED_Configure+0x8c>)
 80006d8:	60bb      	str	r3, [r7, #8]
	pt_GPIOB_IDR = (int*) 0x58020410;
 80006da:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <LED_Configure+0x90>)
 80006dc:	607b      	str	r3, [r7, #4]
	pt_GPIOB_ODR = (int*) 0x58020414;
 80006de:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <LED_Configure+0x94>)
 80006e0:	603b      	str	r3, [r7, #0]


	*pt_GPIOB_MODER &=0xFFFFFFFC;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 0203 	bic.w	r2, r3, #3
 80006ea:	697b      	ldr	r3, [r7, #20]
 80006ec:	601a      	str	r2, [r3, #0]
	*pt_GPIOB_OTYPER &=0xFFFFFFFE;
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 0201 	bic.w	r2, r3, #1
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	601a      	str	r2, [r3, #0]
	*pt_GPIOB_OSPEEDR &=0xFFFFFFFC;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 0203 	bic.w	r2, r3, #3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	601a      	str	r2, [r3, #0]
	*pt_GPIOB_PUPDR &=0xFFFFFFFC;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f023 0203 	bic.w	r2, r3, #3
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	601a      	str	r2, [r3, #0]
	*pt_GPIOB_IDR &=0xFFFFFFFE;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 0201 	bic.w	r2, r3, #1
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
	*pt_GPIOB_ODR &=0xFFFFFFFE;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f023 0201 	bic.w	r2, r3, #1
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	601a      	str	r2, [r3, #0]


	*pt_GPIOB_MODER |=0x1;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f043 0201 	orr.w	r2, r3, #1
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	601a      	str	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	371c      	adds	r7, #28
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	58020400 	.word	0x58020400
 8000748:	58020404 	.word	0x58020404
 800074c:	58020408 	.word	0x58020408
 8000750:	5802040c 	.word	0x5802040c
 8000754:	58020410 	.word	0x58020410
 8000758:	58020414 	.word	0x58020414

0800075c <LED_DisplayGreen>:



void LED_DisplayGreen(int val){
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if (val & 1){  //condition donnant le LSB de val
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d006      	beq.n	800077c <LED_DisplayGreen+0x20>
		GPIOB->ODR |=0x1;  //active le bit ON0 pour éclairer la LED verte
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <LED_DisplayGreen+0x38>)
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <LED_DisplayGreen+0x38>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6153      	str	r3, [r2, #20]
	}
	else {
		GPIOB->ODR &=0xFFFFFFFE;  //désactive le bit On0 pour éteindre la LED verte
	}
}
 800077a:	e005      	b.n	8000788 <LED_DisplayGreen+0x2c>
		GPIOB->ODR &=0xFFFFFFFE;  //désactive le bit On0 pour éteindre la LED verte
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <LED_DisplayGreen+0x38>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <LED_DisplayGreen+0x38>)
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	6153      	str	r3, [r2, #20]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	58020400 	.word	0x58020400

08000798 <LED_InitYellow>:

void LED_InitYellow(void){
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef myGPIO;
	__GPIOE_CLK_ENABLE();
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <LED_InitYellow+0x48>)
 80007a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <LED_InitYellow+0x48>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <LED_InitYellow+0x48>)
 80007b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007b4:	f003 0310 	and.w	r3, r3, #16
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]
	myGPIO.Speed = GPIO_SPEED_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
	myGPIO.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
	myGPIO.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
	myGPIO.Pin = GPIO_PIN_1;
 80007c8:	2302      	movs	r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOE, &myGPIO);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <LED_InitYellow+0x4c>)
 80007d2:	f000 fd01 	bl	80011d8 <HAL_GPIO_Init>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	58024400 	.word	0x58024400
 80007e4:	58021000 	.word	0x58021000

080007e8 <LED_DisplayYellow>:


void LED_DisplayYellow(int val){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
	if (val & 1){
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d005      	beq.n	8000806 <LED_DisplayYellow+0x1e>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2102      	movs	r1, #2
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <LED_DisplayYellow+0x30>)
 8000800:	f000 fe9a 	bl	8001538 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
	}
}
 8000804:	e004      	b.n	8000810 <LED_DisplayYellow+0x28>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2102      	movs	r1, #2
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <LED_DisplayYellow+0x30>)
 800080c:	f000 fe94 	bl	8001538 <HAL_GPIO_WritePin>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58021000 	.word	0x58021000

0800081c <LED_Init>:

void LED_Init(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	LED_GreenEnable();
 8000820:	f7ff fd66 	bl	80002f0 <LED_GreenEnable>
	LED_Configure();
 8000824:	f7ff ff4e 	bl	80006c4 <LED_Configure>
	LED_InitYellow();
 8000828:	f7ff ffb6 	bl	8000798 <LED_InitYellow>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <LED_Disp3LED>:


void LED_Disp3LED(int pattern) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	while(1){
		LED_DisplayGreen(pattern & 1); //lecture du LSB de pattern pour commander la LED verte
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff8c 	bl	800075c <LED_DisplayGreen>
		LED_DisplayYellow((pattern & 2)/2); //lecture du deuxième LSB pour commander la LED jaune
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	2b00      	cmp	r3, #0
 800084c:	da00      	bge.n	8000850 <LED_Disp3LED+0x20>
 800084e:	3301      	adds	r3, #1
 8000850:	105b      	asrs	r3, r3, #1
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ffc8 	bl	80007e8 <LED_DisplayYellow>

		pattern = (pattern+1)%4;  //animation du pattern
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3301      	adds	r3, #1
 800085c:	425a      	negs	r2, r3
 800085e:	f003 0303 	and.w	r3, r3, #3
 8000862:	f002 0203 	and.w	r2, r2, #3
 8000866:	bf58      	it	pl
 8000868:	4253      	negpl	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
		waitN(10000000);  // timer pour ralentir et le clignotement de la LED d'une seconde
 800086c:	4801      	ldr	r0, [pc, #4]	; (8000874 <LED_Disp3LED+0x44>)
 800086e:	f000 f803 	bl	8000878 <waitN>
	while(1){
 8000872:	e7e1      	b.n	8000838 <LED_Disp3LED+0x8>
 8000874:	00989680 	.word	0x00989680

08000878 <waitN>:



void waitN(int N){
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	while (N>0){
 8000880:	e002      	b.n	8000888 <waitN+0x10>
		  N--;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	3b01      	subs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
	while (N>0){
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	dcf9      	bgt.n	8000882 <waitN+0xa>
	}
}
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a2:	f000 fb23 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f821 	bl	80008ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f000 f8df 	bl	8000a6c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008ae:	f000 f891 	bl	80009d4 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf(UART_buf,"STM32H7A3>>");
 80008b2:	490b      	ldr	r1, [pc, #44]	; (80008e0 <main+0x44>)
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <main+0x48>)
 80008b6:	f004 feeb 	bl	8005690 <siprintf>
  HAL_UART_Transmit(&huart3, (unsigned char *)UART_buf, strlen(UART_buf), 1);
 80008ba:	480a      	ldr	r0, [pc, #40]	; (80008e4 <main+0x48>)
 80008bc:	f7ff fd22 	bl	8000304 <strlen>
 80008c0:	4603      	mov	r3, r0
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	2301      	movs	r3, #1
 80008c6:	4907      	ldr	r1, [pc, #28]	; (80008e4 <main+0x48>)
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <main+0x4c>)
 80008ca:	f003 fc97 	bl	80041fc <HAL_UART_Transmit>
  // Write your code here!


LED_Init();
 80008ce:	f7ff ffa5 	bl	800081c <LED_Init>
int pattern = 0; //l'initialisation de pattern détermine juste le point de départ de l'animation
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
LED_Disp3LED(pattern);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffaa 	bl	8000830 <LED_Disp3LED>

while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x40>
 80008de:	bf00      	nop
 80008e0:	08005f84 	.word	0x08005f84
 80008e4:	24000124 	.word	0x24000124
 80008e8:	24000090 	.word	0x24000090

080008ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b09c      	sub	sp, #112	; 0x70
 80008f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	224c      	movs	r2, #76	; 0x4c
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f004 fec0 	bl	8005680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f004 feba 	bl	8005680 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800090c:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <SystemClock_Config+0xe0>)
 800090e:	f04f 32ff 	mov.w	r2, #4294967295
 8000912:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000916:	2004      	movs	r0, #4
 8000918:	f000 fe28 	bl	800156c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <SystemClock_Config+0xe4>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <SystemClock_Config+0xe4>)
 8000926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <SystemClock_Config+0xe4>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000938:	bf00      	nop
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <SystemClock_Config+0xe4>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000946:	d1f8      	bne.n	800093a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800094c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	2302      	movs	r3, #2
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800095e:	2318      	movs	r3, #24
 8000960:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000966:	2304      	movs	r3, #4
 8000968:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800096e:	230c      	movs	r3, #12
 8000970:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000972:	2300      	movs	r3, #0
 8000974:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fe4e 	bl	8001620 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800098a:	f000 f923 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	233f      	movs	r3, #63	; 0x3f
 8000990:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2102      	movs	r1, #2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fa66 	bl	8001e84 <HAL_RCC_ClockConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80009be:	f000 f909 	bl	8000bd4 <Error_Handler>
  }
}
 80009c2:	bf00      	nop
 80009c4:	3770      	adds	r7, #112	; 0x70
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58024800 	.word	0x58024800

080009d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <MX_USART3_UART_Init+0x94>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a1c:	4811      	ldr	r0, [pc, #68]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a1e:	f003 fb9d 	bl	800415c <HAL_UART_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a28:	f000 f8d4 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a30:	f004 fd31 	bl	8005496 <HAL_UARTEx_SetTxFifoThreshold>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3a:	f000 f8cb 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4808      	ldr	r0, [pc, #32]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a42:	f004 fd66 	bl	8005512 <HAL_UARTEx_SetRxFifoThreshold>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a4c:	f000 f8c2 	bl	8000bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_USART3_UART_Init+0x90>)
 8000a52:	f004 fce7 	bl	8005424 <HAL_UARTEx_DisableFifoMode>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a5c:	f000 f8ba 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	24000090 	.word	0x24000090
 8000a68:	40004800 	.word	0x40004800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b50      	ldr	r3, [pc, #320]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000a84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a88:	4a4e      	ldr	r2, [pc, #312]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a92:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000a94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aa0:	4b48      	ldr	r3, [pc, #288]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000aa6:	4a47      	ldr	r2, [pc, #284]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ab0:	4b44      	ldr	r3, [pc, #272]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000ab2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ab6:	f003 0320 	and.w	r3, r3, #32
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ac4:	4a3f      	ldr	r2, [pc, #252]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ace:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000ad0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000adc:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ae2:	4a38      	ldr	r2, [pc, #224]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000aec:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	4b32      	ldr	r3, [pc, #200]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000afc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b00:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b0a:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000b0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b1e:	4a29      	ldr	r2, [pc, #164]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <MX_GPIO_Init+0x158>)
 8000b2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	4822      	ldr	r0, [pc, #136]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b3e:	f000 fcfb 	bl	8001538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <MX_GPIO_Init+0x15c>)
 8000b5c:	f000 fb3c 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <MX_GPIO_Init+0x160>)
 8000b76:	f000 fb2f 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <MX_GPIO_Init+0x164>)
 8000b98:	f000 fb1e 	bl	80011d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <MX_GPIO_Init+0x164>)
 8000bb6:	f000 fb0f 	bl	80011d8 <HAL_GPIO_Init>

}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	; 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58024400 	.word	0x58024400
 8000bc8:	58021400 	.word	0x58021400
 8000bcc:	58021800 	.word	0x58021800
 8000bd0:	58020000 	.word	0x58020000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <Error_Handler+0x8>
	...

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_MspInit+0x30>)
 8000be8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_MspInit+0x30>)
 8000bee:	f043 0302 	orr.w	r3, r3, #2
 8000bf2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_MspInit+0x30>)
 8000bf8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	58024400 	.word	0x58024400

08000c14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0ba      	sub	sp, #232	; 0xe8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	22c0      	movs	r2, #192	; 0xc0
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fd23 	bl	8005680 <memset>
  if(huart->Instance==USART3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a27      	ldr	r2, [pc, #156]	; (8000cdc <HAL_UART_MspInit+0xc8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d146      	bne.n	8000cd2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c44:	f04f 0202 	mov.w	r2, #2
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fc9e 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c66:	f7ff ffb5 	bl	8000bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0xcc>)
 8000c6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c70:	4a1b      	ldr	r2, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0xcc>)
 8000c72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c76:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_UART_MspInit+0xcc>)
 8000c7c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0xcc>)
 8000c8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0xcc>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_UART_MspInit+0xcc>)
 8000c9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ca6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_UART_MspInit+0xd0>)
 8000cce:	f000 fa83 	bl	80011d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	37e8      	adds	r7, #232	; 0xe8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	58024400 	.word	0x58024400
 8000ce4:	58020c00 	.word	0x58020c00

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <NMI_Handler+0x4>

08000cee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <HardFault_Handler+0x4>

08000cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <MemManage_Handler+0x4>

08000cfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <BusFault_Handler+0x4>

08000d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <UsageFault_Handler+0x4>

08000d06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f94c 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f004 fc5e 	bl	800562c <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	24100000 	.word	0x24100000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	24000188 	.word	0x24000188
 8000da4:	240001a0 	.word	0x240001a0

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dac:	4b32      	ldr	r3, [pc, #200]	; (8000e78 <SystemInit+0xd0>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a31      	ldr	r2, [pc, #196]	; (8000e78 <SystemInit+0xd0>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <SystemInit+0xd4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 030f 	and.w	r3, r3, #15
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d807      	bhi.n	8000dd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dc8:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <SystemInit+0xd4>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 030f 	bic.w	r3, r3, #15
 8000dd0:	4a2a      	ldr	r2, [pc, #168]	; (8000e7c <SystemInit+0xd4>)
 8000dd2:	f043 0303 	orr.w	r3, r3, #3
 8000dd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dd8:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <SystemInit+0xd8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <SystemInit+0xd8>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <SystemInit+0xd8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <SystemInit+0xd8>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4924      	ldr	r1, [pc, #144]	; (8000e80 <SystemInit+0xd8>)
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <SystemInit+0xdc>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <SystemInit+0xd4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d007      	beq.n	8000e12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e02:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <SystemInit+0xd4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f023 030f 	bic.w	r3, r3, #15
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <SystemInit+0xd4>)
 8000e0c:	f043 0303 	orr.w	r3, r3, #3
 8000e10:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <SystemInit+0xd8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <SystemInit+0xd8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <SystemInit+0xd8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <SystemInit+0xd8>)
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <SystemInit+0xe0>)
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <SystemInit+0xd8>)
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <SystemInit+0xe4>)
 8000e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <SystemInit+0xd8>)
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <SystemInit+0xe8>)
 8000e34:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <SystemInit+0xd8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <SystemInit+0xd8>)
 8000e3e:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <SystemInit+0xe8>)
 8000e40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <SystemInit+0xd8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <SystemInit+0xd8>)
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <SystemInit+0xe8>)
 8000e4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <SystemInit+0xd8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <SystemInit+0xd8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <SystemInit+0xd8>)
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <SystemInit+0xd8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <SystemInit+0xec>)
 8000e68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00
 8000e7c:	52002000 	.word	0x52002000
 8000e80:	58024400 	.word	0x58024400
 8000e84:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e88:	02020200 	.word	0x02020200
 8000e8c:	01ff0000 	.word	0x01ff0000
 8000e90:	01010280 	.word	0x01010280
 8000e94:	52004000 	.word	0x52004000

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e9c:	f7ff ff84 	bl	8000da8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f004 fbb7 	bl	8005638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fce7 	bl	800089c <main>
  bx  lr
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8000ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ed8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000edc:	0800600c 	.word	0x0800600c
  ldr r2, =_sbss
 8000ee0:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000ee4:	240001a0 	.word	0x240001a0

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 f93e 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8000ef8:	f001 f97a 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_Init+0x68>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	f003 030f 	and.w	r3, r3, #15
 8000f08:	4913      	ldr	r1, [pc, #76]	; (8000f58 <HAL_Init+0x6c>)
 8000f0a:	5ccb      	ldrb	r3, [r1, r3]
 8000f0c:	f003 031f 	and.w	r3, r3, #31
 8000f10:	fa22 f303 	lsr.w	r3, r2, r3
 8000f14:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_Init+0x68>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_Init+0x6c>)
 8000f20:	5cd3      	ldrb	r3, [r2, r3]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_Init+0x70>)
 8000f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <HAL_Init+0x74>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f814 	bl	8000f64 <HAL_InitTick>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e002      	b.n	8000f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f46:	f7ff fe4b 	bl	8000be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400
 8000f58:	08005f90 	.word	0x08005f90
 8000f5c:	24000004 	.word	0x24000004
 8000f60:	24000000 	.word	0x24000000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <HAL_InitTick+0x60>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e021      	b.n	8000fbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_InitTick+0x64>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <HAL_InitTick+0x60>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f915 	bl	80011be <HAL_SYSTICK_Config>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00e      	b.n	8000fbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d80a      	bhi.n	8000fba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f8ed 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_InitTick+0x68>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2400000c 	.word	0x2400000c
 8000fc8:	24000000 	.word	0x24000000
 8000fcc:	24000008 	.word	0x24000008

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2400000c 	.word	0x2400000c
 8000ff4:	2400018c 	.word	0x2400018c

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2400018c 	.word	0x2400018c

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	4313      	orrs	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	05fa0000 	.word	0x05fa0000

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff47 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff5e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffb2 	bl	8001130 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	; 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011e6:	4b89      	ldr	r3, [pc, #548]	; (800140c <HAL_GPIO_Init+0x234>)
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011ea:	e194      	b.n	8001516 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8186 	beq.w	8001510 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <HAL_GPIO_Init+0x44>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b03      	cmp	r3, #3
 8001288:	d017      	beq.n	80012ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d123      	bne.n	800130e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	69b9      	ldr	r1, [r7, #24]
 800130a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0203 	and.w	r2, r3, #3
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 80e0 	beq.w	8001510 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_GPIO_Init+0x238>)
 8001352:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001356:	4a2e      	ldr	r2, [pc, #184]	; (8001410 <HAL_GPIO_Init+0x238>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_GPIO_Init+0x238>)
 8001362:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136e:	4a29      	ldr	r2, [pc, #164]	; (8001414 <HAL_GPIO_Init+0x23c>)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	220f      	movs	r2, #15
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <HAL_GPIO_Init+0x240>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d052      	beq.n	8001440 <HAL_GPIO_Init+0x268>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_GPIO_Init+0x244>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d031      	beq.n	8001406 <HAL_GPIO_Init+0x22e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <HAL_GPIO_Init+0x248>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d02b      	beq.n	8001402 <HAL_GPIO_Init+0x22a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <HAL_GPIO_Init+0x24c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d025      	beq.n	80013fe <HAL_GPIO_Init+0x226>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_GPIO_Init+0x250>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01f      	beq.n	80013fa <HAL_GPIO_Init+0x222>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_GPIO_Init+0x254>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <HAL_GPIO_Init+0x21e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1a      	ldr	r2, [pc, #104]	; (8001430 <HAL_GPIO_Init+0x258>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d013      	beq.n	80013f2 <HAL_GPIO_Init+0x21a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_GPIO_Init+0x25c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d00d      	beq.n	80013ee <HAL_GPIO_Init+0x216>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_GPIO_Init+0x260>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x212>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a17      	ldr	r2, [pc, #92]	; (800143c <HAL_GPIO_Init+0x264>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_GPIO_Init+0x20e>
 80013e2:	2309      	movs	r3, #9
 80013e4:	e02d      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013e6:	230a      	movs	r3, #10
 80013e8:	e02b      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013ea:	2308      	movs	r3, #8
 80013ec:	e029      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013ee:	2307      	movs	r3, #7
 80013f0:	e027      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013f2:	2306      	movs	r3, #6
 80013f4:	e025      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013f6:	2305      	movs	r3, #5
 80013f8:	e023      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e021      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 80013fe:	2303      	movs	r3, #3
 8001400:	e01f      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 8001402:	2302      	movs	r3, #2
 8001404:	e01d      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 8001406:	2301      	movs	r3, #1
 8001408:	e01b      	b.n	8001442 <HAL_GPIO_Init+0x26a>
 800140a:	bf00      	nop
 800140c:	58000080 	.word	0x58000080
 8001410:	58024400 	.word	0x58024400
 8001414:	58000400 	.word	0x58000400
 8001418:	58020000 	.word	0x58020000
 800141c:	58020400 	.word	0x58020400
 8001420:	58020800 	.word	0x58020800
 8001424:	58020c00 	.word	0x58020c00
 8001428:	58021000 	.word	0x58021000
 800142c:	58021400 	.word	0x58021400
 8001430:	58021800 	.word	0x58021800
 8001434:	58021c00 	.word	0x58021c00
 8001438:	58022000 	.word	0x58022000
 800143c:	58022400 	.word	0x58022400
 8001440:	2300      	movs	r3, #0
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	f002 0203 	and.w	r2, r2, #3
 8001448:	0092      	lsls	r2, r2, #2
 800144a:	4093      	lsls	r3, r2
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001452:	4938      	ldr	r1, [pc, #224]	; (8001534 <HAL_GPIO_Init+0x35c>)
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	3302      	adds	r3, #2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	3301      	adds	r3, #1
 8001514:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	f47f ae63 	bne.w	80011ec <HAL_GPIO_Init+0x14>
  }
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3724      	adds	r7, #36	; 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	58000400 	.word	0x58000400

08001538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001548:	787b      	ldrb	r3, [r7, #1]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001554:	e003      	b.n	800155e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001556:	887b      	ldrh	r3, [r7, #2]
 8001558:	041a      	lsls	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001574:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	2b06      	cmp	r3, #6
 800157e:	d00a      	beq.n	8001596 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d001      	beq.n	8001592 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e040      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e03e      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001596:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800159e:	491f      	ldr	r1, [pc, #124]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015a6:	f7ff fd27 	bl	8000ff8 <HAL_GetTick>
 80015aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015ac:	e009      	b.n	80015c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015ae:	f7ff fd23 	bl	8000ff8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015bc:	d901      	bls.n	80015c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e028      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ce:	d1ee      	bne.n	80015ae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2b1e      	cmp	r3, #30
 80015d4:	d008      	beq.n	80015e8 <HAL_PWREx_ConfigSupply+0x7c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b2e      	cmp	r3, #46	; 0x2e
 80015da:	d005      	beq.n	80015e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b1d      	cmp	r3, #29
 80015e0:	d002      	beq.n	80015e8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b2d      	cmp	r3, #45	; 0x2d
 80015e6:	d114      	bne.n	8001612 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80015e8:	f7ff fd06 	bl	8000ff8 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80015ee:	e009      	b.n	8001604 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015f0:	f7ff fd02 	bl	8000ff8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015fe:	d901      	bls.n	8001604 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e007      	b.n	8001614 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_PWREx_ConfigSupply+0xb0>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d1ee      	bne.n	80015f0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	58024800 	.word	0x58024800

08001620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	f000 bc1f 	b.w	8001e72 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80b3 	beq.w	80017a8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001642:	4b95      	ldr	r3, [pc, #596]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001654:	2b10      	cmp	r3, #16
 8001656:	d007      	beq.n	8001668 <HAL_RCC_OscConfig+0x48>
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	2b18      	cmp	r3, #24
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x64>
 800165e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d10d      	bne.n	8001684 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001668:	4b8b      	ldr	r3, [pc, #556]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001670:	2b00      	cmp	r3, #0
 8001672:	f000 8098 	beq.w	80017a6 <HAL_RCC_OscConfig+0x186>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 8093 	bne.w	80017a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e3f6      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x7c>
 800168e:	4b82      	ldr	r3, [pc, #520]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a81      	ldr	r2, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e058      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d112      	bne.n	80016ca <HAL_RCC_OscConfig+0xaa>
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a7b      	ldr	r2, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b79      	ldr	r3, [pc, #484]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a78      	ldr	r2, [pc, #480]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a75      	ldr	r2, [pc, #468]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e041      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d2:	d112      	bne.n	80016fa <HAL_RCC_OscConfig+0xda>
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a6f      	ldr	r2, [pc, #444]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b6d      	ldr	r3, [pc, #436]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a6c      	ldr	r2, [pc, #432]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b6a      	ldr	r3, [pc, #424]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a69      	ldr	r2, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e029      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001702:	d112      	bne.n	800172a <HAL_RCC_OscConfig+0x10a>
 8001704:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a63      	ldr	r2, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800170a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b61      	ldr	r3, [pc, #388]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a60      	ldr	r2, [pc, #384]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a5d      	ldr	r2, [pc, #372]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e011      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5a      	ldr	r2, [pc, #360]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800173c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b55      	ldr	r3, [pc, #340]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a54      	ldr	r2, [pc, #336]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001748:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800174c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d013      	beq.n	800177e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fc4f 	bl	8000ff8 <HAL_GetTick>
 800175a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175e:	f7ff fc4b 	bl	8000ff8 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b64      	cmp	r3, #100	; 0x64
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e380      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001770:	4b49      	ldr	r3, [pc, #292]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x13e>
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fc3b 	bl	8000ff8 <HAL_GetTick>
 8001782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001786:	f7ff fc37 	bl	8000ff8 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	; 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e36c      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x166>
 80017a4:	e000      	b.n	80017a8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 808c 	beq.w	80018ce <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80017c6:	6a3b      	ldr	r3, [r7, #32]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_RCC_OscConfig+0x1bc>
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	2b18      	cmp	r3, #24
 80017d0:	d137      	bne.n	8001842 <HAL_RCC_OscConfig+0x222>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d132      	bne.n	8001842 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_OscConfig+0x1d4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e33e      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 0219 	bic.w	r2, r3, #25
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4925      	ldr	r1, [pc, #148]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fbf7 	bl	8000ff8 <HAL_GetTick>
 800180a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fbf3 	bl	8000ff8 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e328      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	061b      	lsls	r3, r3, #24
 800183a:	4917      	ldr	r1, [pc, #92]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001840:	e045      	b.n	80018ce <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d028      	beq.n	800189c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0219 	bic.w	r2, r3, #25
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4910      	ldr	r1, [pc, #64]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001858:	4313      	orrs	r3, r2
 800185a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fbcc 	bl	8000ff8 <HAL_GetTick>
 8001860:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001864:	f7ff fbc8 	bl	8000ff8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e2fd      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	061b      	lsls	r3, r3, #24
 8001890:	4901      	ldr	r1, [pc, #4]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e01a      	b.n	80018ce <HAL_RCC_OscConfig+0x2ae>
 8001898:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189c:	4b97      	ldr	r3, [pc, #604]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a96      	ldr	r2, [pc, #600]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	f023 0301 	bic.w	r3, r3, #1
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fba6 	bl	8000ff8 <HAL_GetTick>
 80018ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fba2 	bl	8000ff8 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e2d7      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c2:	4b8e      	ldr	r3, [pc, #568]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d06a      	beq.n	80019b0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018da:	4b88      	ldr	r3, [pc, #544]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e4:	4b85      	ldr	r3, [pc, #532]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_OscConfig+0x2e0>
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b18      	cmp	r3, #24
 80018f4:	d11b      	bne.n	800192e <HAL_RCC_OscConfig+0x30e>
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d116      	bne.n	800192e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001900:	4b7e      	ldr	r3, [pc, #504]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x2f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b80      	cmp	r3, #128	; 0x80
 8001912:	d001      	beq.n	8001918 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e2ac      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001918:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	4975      	ldr	r1, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800192c:	e040      	b.n	80019b0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d023      	beq.n	800197e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001936:	4b71      	ldr	r3, [pc, #452]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a70      	ldr	r2, [pc, #448]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fb59 	bl	8000ff8 <HAL_GetTick>
 8001946:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800194a:	f7ff fb55 	bl	8000ff8 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e28a      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001968:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	4961      	ldr	r1, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
 800197c:	e018      	b.n	80019b0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800197e:	4b5f      	ldr	r3, [pc, #380]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5e      	ldr	r2, [pc, #376]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff fb35 	bl	8000ff8 <HAL_GetTick>
 800198e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001992:	f7ff fb31 	bl	8000ff8 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e266      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019a4:	4b55      	ldr	r3, [pc, #340]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d036      	beq.n	8001a2a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d019      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c4:	4b4d      	ldr	r3, [pc, #308]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c8:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fb12 	bl	8000ff8 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fb0e 	bl	8000ff8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e243      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019ea:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x3b8>
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fc:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff faf8 	bl	8000ff8 <HAL_GetTick>
 8001a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff faf4 	bl	8000ff8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e229      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d036      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2e      	ldr	r2, [pc, #184]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fad5 	bl	8000ff8 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a52:	f7ff fad1 	bl	8000ff8 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e206      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x432>
 8001a70:	e018      	b.n	8001aa4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a21      	ldr	r2, [pc, #132]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff fabb 	bl	8000ff8 <HAL_GetTick>
 8001a82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a86:	f7ff fab7 	bl	8000ff8 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1ec      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80af 	beq.w	8001c10 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ab2:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <HAL_RCC_OscConfig+0x4e0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <HAL_RCC_OscConfig+0x4e0>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001abe:	f7ff fa9b 	bl	8000ff8 <HAL_GetTick>
 8001ac2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7ff fa97 	bl	8000ff8 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b64      	cmp	r3, #100	; 0x64
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e1cc      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_RCC_OscConfig+0x4e0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10b      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4e4>
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af0:	4a02      	ldr	r2, [pc, #8]	; (8001afc <HAL_RCC_OscConfig+0x4dc>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	; 0x70
 8001af8:	e05b      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001afa:	bf00      	nop
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58024800 	.word	0x58024800
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d112      	bne.n	8001b32 <HAL_RCC_OscConfig+0x512>
 8001b0c:	4b9d      	ldr	r3, [pc, #628]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	4a9c      	ldr	r2, [pc, #624]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	6713      	str	r3, [r2, #112]	; 0x70
 8001b18:	4b9a      	ldr	r3, [pc, #616]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	4a99      	ldr	r2, [pc, #612]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b22:	6713      	str	r3, [r2, #112]	; 0x70
 8001b24:	4b97      	ldr	r3, [pc, #604]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b28:	4a96      	ldr	r2, [pc, #600]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b30:	e03f      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d112      	bne.n	8001b60 <HAL_RCC_OscConfig+0x540>
 8001b3a:	4b92      	ldr	r3, [pc, #584]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a91      	ldr	r2, [pc, #580]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
 8001b46:	4b8f      	ldr	r3, [pc, #572]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	4a8e      	ldr	r2, [pc, #568]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a8b      	ldr	r2, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	e028      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b85      	cmp	r3, #133	; 0x85
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x56e>
 8001b68:	4b86      	ldr	r3, [pc, #536]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	4a85      	ldr	r2, [pc, #532]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b6e:	f043 0304 	orr.w	r3, r3, #4
 8001b72:	6713      	str	r3, [r2, #112]	; 0x70
 8001b74:	4b83      	ldr	r3, [pc, #524]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a82      	ldr	r2, [pc, #520]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b80      	ldr	r3, [pc, #512]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a7f      	ldr	r2, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b8c:	e011      	b.n	8001bb2 <HAL_RCC_OscConfig+0x592>
 8001b8e:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b92:	4a7c      	ldr	r2, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	4a79      	ldr	r2, [pc, #484]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ba0:	f023 0304 	bic.w	r3, r3, #4
 8001ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba6:	4b77      	ldr	r3, [pc, #476]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	4a76      	ldr	r2, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d015      	beq.n	8001be6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bba:	f7ff fa1d 	bl	8000ff8 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fa19 	bl	8000ff8 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e14c      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0ee      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x5a2>
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be6:	f7ff fa07 	bl	8000ff8 <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bec:	e00a      	b.n	8001c04 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fa03 	bl	8000ff8 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e136      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c04:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ee      	bne.n	8001bee <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 812b 	beq.w	8001e70 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c22:	2b18      	cmp	r3, #24
 8001c24:	f000 80bb 	beq.w	8001d9e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	f040 8095 	bne.w	8001d5c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a53      	ldr	r2, [pc, #332]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f9db 	bl	8000ff8 <HAL_GetTick>
 8001c42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c46:	f7ff f9d7 	bl	8000ff8 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e10c      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c58:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f0      	bne.n	8001c46 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_OscConfig+0x768>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c74:	0112      	lsls	r2, r2, #4
 8001c76:	430a      	orrs	r2, r1
 8001c78:	4942      	ldr	r1, [pc, #264]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	628b      	str	r3, [r1, #40]	; 0x28
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	025b      	lsls	r3, r3, #9
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001cae:	4935      	ldr	r1, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cb4:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	4a32      	ldr	r2, [pc, #200]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cc0:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_OscConfig+0x76c>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ccc:	00d2      	lsls	r2, r2, #3
 8001cce:	492d      	ldr	r1, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	f023 020c 	bic.w	r2, r3, #12
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4928      	ldr	r1, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ce6:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f023 0202 	bic.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4924      	ldr	r1, [pc, #144]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d04:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d10:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d1c:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff f960 	bl	8000ff8 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f95c 	bl	8000ff8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e091      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x71c>
 8001d5a:	e089      	b.n	8001e70 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x764>)
 8001d62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7ff f946 	bl	8000ff8 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f942 	bl	8000ff8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e077      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
 8001d82:	bf00      	nop
 8001d84:	58024400 	.word	0x58024400
 8001d88:	fffffc0c 	.word	0xfffffc0c
 8001d8c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e9      	bne.n	8001d70 <HAL_RCC_OscConfig+0x750>
 8001d9c:	e068      	b.n	8001e70 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d9e:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d031      	beq.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d12a      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	091b      	lsrs	r3, r3, #4
 8001dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d122      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d11a      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0a5b      	lsrs	r3, r3, #9
 8001de4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d111      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d108      	bne.n	8001e16 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0e1b      	lsrs	r3, r3, #24
 8001e08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e10:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e02b      	b.n	8001e72 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e24:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d01f      	beq.n	8001e70 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e30:	4b12      	ldr	r3, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e34:	4a11      	ldr	r2, [pc, #68]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e3c:	f7ff f8dc 	bl	8000ff8 <HAL_GetTick>
 8001e40:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e42:	bf00      	nop
 8001e44:	f7ff f8d8 	bl	8000ff8 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d0f9      	beq.n	8001e44 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_OscConfig+0x860>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e5c:	00d2      	lsls	r2, r2, #3
 8001e5e:	4907      	ldr	r1, [pc, #28]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_RCC_OscConfig+0x85c>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3730      	adds	r7, #48	; 0x30
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	58024400 	.word	0x58024400
 8001e80:	ffff0007 	.word	0xffff0007

08001e84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e19c      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b8a      	ldr	r3, [pc, #552]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b87      	ldr	r3, [pc, #540]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 020f 	bic.w	r2, r3, #15
 8001eae:	4985      	ldr	r1, [pc, #532]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b83      	ldr	r3, [pc, #524]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e184      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d908      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ee4:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	4975      	ldr	r1, [pc, #468]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695a      	ldr	r2, [r3, #20]
 8001f06:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d908      	bls.n	8001f24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f12:	4b6d      	ldr	r3, [pc, #436]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	496a      	ldr	r1, [pc, #424]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d908      	bls.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f40:	4b61      	ldr	r3, [pc, #388]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	495e      	ldr	r1, [pc, #376]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	4b59      	ldr	r3, [pc, #356]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d908      	bls.n	8001f80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f6e:	4b56      	ldr	r3, [pc, #344]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4953      	ldr	r1, [pc, #332]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d010      	beq.n	8001fae <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b4d      	ldr	r3, [pc, #308]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d908      	bls.n	8001fae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b4a      	ldr	r3, [pc, #296]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f023 020f 	bic.w	r2, r3, #15
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4947      	ldr	r1, [pc, #284]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d055      	beq.n	8002066 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4940      	ldr	r1, [pc, #256]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001fd4:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d121      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0f6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d115      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0ea      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0de      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e0d6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002024:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f023 0207 	bic.w	r2, r3, #7
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4925      	ldr	r1, [pc, #148]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002032:	4313      	orrs	r3, r2
 8002034:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002036:	f7fe ffdf 	bl	8000ff8 <HAL_GetTick>
 800203a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203c:	e00a      	b.n	8002054 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7fe ffdb 	bl	8000ff8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002054:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	429a      	cmp	r2, r3
 8002064:	d1eb      	bne.n	800203e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d010      	beq.n	8002094 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	429a      	cmp	r2, r3
 8002080:	d208      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f023 020f 	bic.w	r2, r3, #15
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	490e      	ldr	r1, [pc, #56]	; (80020c8 <HAL_RCC_ClockConfig+0x244>)
 8002090:	4313      	orrs	r3, r2
 8002092:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d214      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020f 	bic.w	r2, r3, #15
 80020aa:	4906      	ldr	r1, [pc, #24]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_RCC_ClockConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d005      	beq.n	80020cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e086      	b.n	80021d2 <HAL_RCC_ClockConfig+0x34e>
 80020c4:	52002000 	.word	0x52002000
 80020c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	4b3f      	ldr	r3, [pc, #252]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d208      	bcs.n	80020fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020e8:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4939      	ldr	r1, [pc, #228]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695a      	ldr	r2, [r3, #20]
 800210a:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002112:	429a      	cmp	r2, r3
 8002114:	d208      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	492e      	ldr	r1, [pc, #184]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002124:	4313      	orrs	r3, r2
 8002126:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0310 	and.w	r3, r3, #16
 8002130:	2b00      	cmp	r3, #0
 8002132:	d010      	beq.n	8002156 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002140:	429a      	cmp	r2, r3
 8002142:	d208      	bcs.n	8002156 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002146:	69db      	ldr	r3, [r3, #28]
 8002148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	4922      	ldr	r1, [pc, #136]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002152:	4313      	orrs	r3, r2
 8002154:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0320 	and.w	r3, r3, #32
 800215e:	2b00      	cmp	r3, #0
 8002160:	d010      	beq.n	8002184 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800216e:	429a      	cmp	r2, r3
 8002170:	d208      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	4917      	ldr	r1, [pc, #92]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 8002180:	4313      	orrs	r3, r2
 8002182:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002184:	f000 f834 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	4912      	ldr	r1, [pc, #72]	; (80021e0 <HAL_RCC_ClockConfig+0x35c>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
 80021a0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_RCC_ClockConfig+0x358>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_RCC_ClockConfig+0x35c>)
 80021ac:	5cd3      	ldrb	r3, [r2, r3]
 80021ae:	f003 031f 	and.w	r3, r3, #31
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x360>)
 80021ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <HAL_RCC_ClockConfig+0x364>)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x368>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fecc 	bl	8000f64 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	58024400 	.word	0x58024400
 80021e0:	08005f90 	.word	0x08005f90
 80021e4:	24000004 	.word	0x24000004
 80021e8:	24000000 	.word	0x24000000
 80021ec:	24000008 	.word	0x24000008

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f6:	4bb3      	ldr	r3, [pc, #716]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021fe:	2b18      	cmp	r3, #24
 8002200:	f200 8155 	bhi.w	80024ae <HAL_RCC_GetSysClockFreq+0x2be>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002271 	.word	0x08002271
 8002210:	080024af 	.word	0x080024af
 8002214:	080024af 	.word	0x080024af
 8002218:	080024af 	.word	0x080024af
 800221c:	080024af 	.word	0x080024af
 8002220:	080024af 	.word	0x080024af
 8002224:	080024af 	.word	0x080024af
 8002228:	080024af 	.word	0x080024af
 800222c:	08002297 	.word	0x08002297
 8002230:	080024af 	.word	0x080024af
 8002234:	080024af 	.word	0x080024af
 8002238:	080024af 	.word	0x080024af
 800223c:	080024af 	.word	0x080024af
 8002240:	080024af 	.word	0x080024af
 8002244:	080024af 	.word	0x080024af
 8002248:	080024af 	.word	0x080024af
 800224c:	0800229d 	.word	0x0800229d
 8002250:	080024af 	.word	0x080024af
 8002254:	080024af 	.word	0x080024af
 8002258:	080024af 	.word	0x080024af
 800225c:	080024af 	.word	0x080024af
 8002260:	080024af 	.word	0x080024af
 8002264:	080024af 	.word	0x080024af
 8002268:	080024af 	.word	0x080024af
 800226c:	080022a3 	.word	0x080022a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002270:	4b94      	ldr	r3, [pc, #592]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800227c:	4b91      	ldr	r3, [pc, #580]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	08db      	lsrs	r3, r3, #3
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	4a90      	ldr	r2, [pc, #576]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800228e:	e111      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002290:	4b8d      	ldr	r3, [pc, #564]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002292:	61bb      	str	r3, [r7, #24]
      break;
 8002294:	e10e      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002296:	4b8d      	ldr	r3, [pc, #564]	; (80024cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002298:	61bb      	str	r3, [r7, #24]
      break;
 800229a:	e10b      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800229c:	4b8c      	ldr	r3, [pc, #560]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800229e:	61bb      	str	r3, [r7, #24]
      break;
 80022a0:	e108      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022a2:	4b88      	ldr	r3, [pc, #544]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022ac:	4b85      	ldr	r3, [pc, #532]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022b8:	4b82      	ldr	r3, [pc, #520]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022c2:	4b80      	ldr	r3, [pc, #512]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	08db      	lsrs	r3, r3, #3
 80022c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	fb02 f303 	mul.w	r3, r2, r3
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80e1 	beq.w	80024a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	f000 8083 	beq.w	80023f4 <HAL_RCC_GetSysClockFreq+0x204>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	f200 80a1 	bhi.w	8002438 <HAL_RCC_GetSysClockFreq+0x248>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x114>
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d056      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002302:	e099      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002304:	4b6f      	ldr	r3, [pc, #444]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0320 	and.w	r3, r3, #32
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02d      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002310:	4b6c      	ldr	r3, [pc, #432]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	08db      	lsrs	r3, r3, #3
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	4a6b      	ldr	r2, [pc, #428]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233a:	4b62      	ldr	r3, [pc, #392]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234a:	ed97 6a02 	vldr	s12, [r7, #8]
 800234e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800235e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800236a:	e087      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002376:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800237a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800237e:	4b51      	ldr	r3, [pc, #324]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002392:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800239a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800239e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ae:	e065      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80024dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80023be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c2:	4b40      	ldr	r3, [pc, #256]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023f2:	e043      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80024e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002416:	ed97 6a02 	vldr	s12, [r7, #8]
 800241a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800241e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800242a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002436:	e021      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002442:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800244a:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245a:	ed97 6a02 	vldr	s12, [r7, #8]
 800245e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800246a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800246e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800247a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	0a5b      	lsrs	r3, r3, #9
 8002482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002486:	3301      	adds	r3, #1
 8002488:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002494:	edd7 6a07 	vldr	s13, [r7, #28]
 8002498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a0:	ee17 3a90 	vmov	r3, s15
 80024a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024a6:	e005      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
      break;
 80024ac:	e002      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024b0:	61bb      	str	r3, [r7, #24]
      break;
 80024b2:	bf00      	nop
  }

  return sysclockfreq;
 80024b4:	69bb      	ldr	r3, [r7, #24]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	58024400 	.word	0x58024400
 80024c8:	03d09000 	.word	0x03d09000
 80024cc:	003d0900 	.word	0x003d0900
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	46000000 	.word	0x46000000
 80024d8:	4c742400 	.word	0x4c742400
 80024dc:	4a742400 	.word	0x4a742400
 80024e0:	4af42400 	.word	0x4af42400

080024e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80024ea:	f7ff fe81 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_RCC_GetHCLKFreq+0x50>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490f      	ldr	r1, [pc, #60]	; (8002538 <HAL_RCC_GetHCLKFreq+0x54>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	f003 031f 	and.w	r3, r3, #31
 8002502:	fa22 f303 	lsr.w	r3, r2, r3
 8002506:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_GetHCLKFreq+0x50>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <HAL_RCC_GetHCLKFreq+0x54>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	f003 031f 	and.w	r3, r3, #31
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	4a07      	ldr	r2, [pc, #28]	; (800253c <HAL_RCC_GetHCLKFreq+0x58>)
 8002520:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002522:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_RCC_GetHCLKFreq+0x58>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	58024400 	.word	0x58024400
 8002538:	08005f90 	.word	0x08005f90
 800253c:	24000004 	.word	0x24000004
 8002540:	24000000 	.word	0x24000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002548:	f7ff ffcc 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4904      	ldr	r1, [pc, #16]	; (800256c <HAL_RCC_GetPCLK1Freq+0x28>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	58024400 	.word	0x58024400
 800256c:	08005f90 	.word	0x08005f90

08002570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002574:	f7ff ffb6 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	; (8002598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58024400 	.word	0x58024400
 8002598:	08005f90 	.word	0x08005f90

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a0:	b0c8      	sub	sp, #288	; 0x120
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80025c0:	2500      	movs	r5, #0
 80025c2:	ea54 0305 	orrs.w	r3, r4, r5
 80025c6:	d049      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80025c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80025cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025d2:	d02f      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80025d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025d8:	d828      	bhi.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025de:	d01a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e4:	d822      	bhi.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80025ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ee:	d007      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f0:	e01c      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025f2:	4ba7      	ldr	r3, [pc, #668]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	4aa6      	ldr	r2, [pc, #664]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025fe:	e01a      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002604:	3308      	adds	r3, #8
 8002606:	2102      	movs	r1, #2
 8002608:	4618      	mov	r0, r3
 800260a:	f001 fc43 	bl	8003e94 <RCCEx_PLL2_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002614:	e00f      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002616:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800261a:	3328      	adds	r3, #40	; 0x28
 800261c:	2102      	movs	r1, #2
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fcea 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800262a:	e004      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002632:	e000      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002636:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10a      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800263e:	4b94      	ldr	r3, [pc, #592]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002642:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800264a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264c:	4a90      	ldr	r2, [pc, #576]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800264e:	430b      	orrs	r3, r1
 8002650:	6513      	str	r3, [r2, #80]	; 0x50
 8002652:	e003      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002654:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002658:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800265c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002668:	f04f 0900 	mov.w	r9, #0
 800266c:	ea58 0309 	orrs.w	r3, r8, r9
 8002670:	d047      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	2b04      	cmp	r3, #4
 800267a:	d82a      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	08002699 	.word	0x08002699
 8002688:	080026a7 	.word	0x080026a7
 800268c:	080026bd 	.word	0x080026bd
 8002690:	080026db 	.word	0x080026db
 8002694:	080026db 	.word	0x080026db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002698:	4b7d      	ldr	r3, [pc, #500]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	4a7c      	ldr	r2, [pc, #496]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800269e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026a4:	e01a      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026aa:	3308      	adds	r3, #8
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 fbf0 	bl	8003e94 <RCCEx_PLL2_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026ba:	e00f      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c0:	3328      	adds	r3, #40	; 0x28
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f001 fc97 	bl	8003ff8 <RCCEx_PLL3_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026d0:	e004      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80026d8:	e000      	b.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80026da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e8:	f023 0107 	bic.w	r1, r3, #7
 80026ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f2:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6513      	str	r3, [r2, #80]	; 0x50
 80026f8:	e003      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80026fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800270e:	f04f 0b00 	mov.w	fp, #0
 8002712:	ea5a 030b 	orrs.w	r3, sl, fp
 8002716:	d054      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002722:	d036      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002724:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002728:	d82f      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800272a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800272e:	d032      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002734:	d829      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002736:	2bc0      	cmp	r3, #192	; 0xc0
 8002738:	d02f      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800273a:	2bc0      	cmp	r3, #192	; 0xc0
 800273c:	d825      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800273e:	2b80      	cmp	r3, #128	; 0x80
 8002740:	d018      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002742:	2b80      	cmp	r3, #128	; 0x80
 8002744:	d821      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800274a:	2b40      	cmp	r3, #64	; 0x40
 800274c:	d007      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800274e:	e01c      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002750:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800275c:	e01e      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800275e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002762:	3308      	adds	r3, #8
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f001 fb94 	bl	8003e94 <RCCEx_PLL2_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002772:	e013      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002778:	3328      	adds	r3, #40	; 0x28
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f001 fc3b 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002788:	e008      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002790:	e004      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800279a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800279c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80027a4:	4b3a      	ldr	r3, [pc, #232]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80027ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	4a37      	ldr	r2, [pc, #220]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027b4:	430b      	orrs	r3, r1
 80027b6:	6513      	str	r3, [r2, #80]	; 0x50
 80027b8:	e003      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80027c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80027ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027d2:	2300      	movs	r3, #0
 80027d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027d8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80027dc:	460b      	mov	r3, r1
 80027de:	4313      	orrs	r3, r2
 80027e0:	d05c      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80027e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027ec:	d03b      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80027ee:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027f2:	d834      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80027f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f8:	d037      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80027fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fe:	d82e      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002800:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002804:	d033      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002806:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800280a:	d828      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800280c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002810:	d01a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002816:	d822      	bhi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800281c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002820:	d007      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002822:	e01c      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002824:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800282a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002830:	e01e      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002836:	3308      	adds	r3, #8
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f001 fb2a 	bl	8003e94 <RCCEx_PLL2_Config>
 8002840:	4603      	mov	r3, r0
 8002842:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002846:	e013      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800284c:	3328      	adds	r3, #40	; 0x28
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f001 fbd1 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800285c:	e008      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002864:	e004      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002866:	bf00      	nop
 8002868:	e002      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800286a:	bf00      	nop
 800286c:	e000      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800286e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002870:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800287a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	4a02      	ldr	r2, [pc, #8]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002888:	430b      	orrs	r3, r1
 800288a:	6513      	str	r3, [r2, #80]	; 0x50
 800288c:	e006      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800288e:	bf00      	nop
 8002890:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002894:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002898:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800289c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80028a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80028b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80028b6:	460b      	mov	r3, r1
 80028b8:	4313      	orrs	r3, r2
 80028ba:	d03a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80028bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	2b30      	cmp	r3, #48	; 0x30
 80028c4:	d01f      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80028c6:	2b30      	cmp	r3, #48	; 0x30
 80028c8:	d819      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d00c      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d815      	bhi.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x362>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d019      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d111      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028da:	4bae      	ldr	r3, [pc, #696]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	4aad      	ldr	r2, [pc, #692]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80028e6:	e011      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028ec:	3308      	adds	r3, #8
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 facf 	bl	8003e94 <RCCEx_PLL2_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80028fc:	e006      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002904:	e002      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800290a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800290c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002914:	4b9f      	ldr	r3, [pc, #636]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002918:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800291c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	4a9c      	ldr	r2, [pc, #624]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002924:	430b      	orrs	r3, r1
 8002926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002928:	e003      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800292e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800293e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002948:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800294c:	460b      	mov	r3, r1
 800294e:	4313      	orrs	r3, r2
 8002950:	d051      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002958:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800295c:	d035      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800295e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002962:	d82e      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002964:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002968:	d031      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x432>
 800296a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800296e:	d828      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002974:	d01a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	d822      	bhi.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002984:	d007      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002986:	e01c      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002988:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a81      	ldr	r2, [pc, #516]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002994:	e01c      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800299a:	3308      	adds	r3, #8
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 fa78 	bl	8003e94 <RCCEx_PLL2_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029aa:	e011      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029b0:	3328      	adds	r3, #40	; 0x28
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 fb1f 	bl	8003ff8 <RCCEx_PLL3_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029c0:	e006      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80029c8:	e002      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80029ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029d8:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80029e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e6:	4a6b      	ldr	r2, [pc, #428]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6513      	str	r3, [r2, #80]	; 0x50
 80029ec:	e003      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80029f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a10:	460b      	mov	r3, r1
 8002a12:	4313      	orrs	r3, r2
 8002a14:	d053      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a20:	d033      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002a22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a26:	d82c      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a2c:	d02f      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002a2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a32:	d826      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a38:	d02b      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002a3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a3e:	d820      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a44:	d012      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a4a:	d81a      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d022      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d115      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a5a:	3308      	adds	r3, #8
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 fa18 	bl	8003e94 <RCCEx_PLL2_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a6a:	e015      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a70:	3328      	adds	r3, #40	; 0x28
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 fabf 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a80:	e00a      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a88:	e006      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a8a:	bf00      	nop
 8002a8c:	e004      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002aa0:	4b3c      	ldr	r3, [pc, #240]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002aa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002aae:	4a39      	ldr	r2, [pc, #228]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ab4:	e003      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002aba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002aca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ad4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4313      	orrs	r3, r2
 8002adc:	d060      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ae2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ae6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002aea:	d039      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002aec:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002af0:	d832      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af6:	d035      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afc:	d82c      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d031      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b08:	d826      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b0e:	d02d      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002b10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b14:	d820      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1a:	d012      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b20:	d81a      	bhi.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d024      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2a:	d115      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b30:	3308      	adds	r3, #8
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f9ad 	bl	8003e94 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b40:	e017      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b46:	3328      	adds	r3, #40	; 0x28
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fa54 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b56:	e00c      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b5e:	e008      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b60:	bf00      	nop
 8002b62:	e006      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b64:	bf00      	nop
 8002b66:	e004      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b68:	bf00      	nop
 8002b6a:	e002      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10e      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b7a:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b8a:	4a02      	ldr	r2, [pc, #8]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b90:	e006      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002b92:	bf00      	nop
 8002b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b9c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002bb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	d037      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bca:	d00e      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd0:	d816      	bhi.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d018      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bda:	d111      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bdc:	4bc4      	ldr	r3, [pc, #784]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	4ac3      	ldr	r2, [pc, #780]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002be8:	e00f      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bee:	3308      	adds	r3, #8
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f94e 	bl	8003e94 <RCCEx_PLL2_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002bfe:	e004      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c06:	e000      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c12:	4bb7      	ldr	r3, [pc, #732]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c16:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c20:	4ab3      	ldr	r2, [pc, #716]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c22:	430b      	orrs	r3, r1
 8002c24:	6513      	str	r3, [r2, #80]	; 0x50
 8002c26:	e003      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c2c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	d039      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d81c      	bhi.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c5a:	a201      	add	r2, pc, #4	; (adr r2, 8002c60 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c60:	08002c9d 	.word	0x08002c9d
 8002c64:	08002c71 	.word	0x08002c71
 8002c68:	08002c7f 	.word	0x08002c7f
 8002c6c:	08002c9d 	.word	0x08002c9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c70:	4b9f      	ldr	r3, [pc, #636]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	4a9e      	ldr	r2, [pc, #632]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c7c:	e00f      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c82:	3308      	adds	r3, #8
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f001 f904 	bl	8003e94 <RCCEx_PLL2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c92:	e004      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c9a:	e000      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002ca6:	4b92      	ldr	r3, [pc, #584]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	f023 0103 	bic.w	r1, r3, #3
 8002cae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb4:	4a8e      	ldr	r2, [pc, #568]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cba:	e003      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002cda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f000 8099 	beq.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce6:	4b83      	ldr	r3, [pc, #524]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a82      	ldr	r2, [pc, #520]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe f981 	bl	8000ff8 <HAL_GetTick>
 8002cf6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe f97c 	bl	8000ff8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b64      	cmp	r3, #100	; 0x64
 8002d0a:	d903      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d12:	e005      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d14:	4b77      	ldr	r3, [pc, #476]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0ed      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002d20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d173      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d28:	4b71      	ldr	r3, [pc, #452]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d34:	4053      	eors	r3, r2
 8002d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d015      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d46:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d4a:	4b69      	ldr	r3, [pc, #420]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a68      	ldr	r2, [pc, #416]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d56:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a65      	ldr	r2, [pc, #404]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d62:	4a63      	ldr	r2, [pc, #396]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d118      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f93e 	bl	8000ff8 <HAL_GetTick>
 8002d7c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d80:	e00d      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7fe f939 	bl	8000ff8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002d8c:	1ad2      	subs	r2, r2, r3
 8002d8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d903      	bls.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002d9c:	e005      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d9e:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0eb      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002daa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d129      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dc2:	d10e      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002dc4:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dd4:	091a      	lsrs	r2, r3, #4
 8002dd6:	4b48      	ldr	r3, [pc, #288]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6113      	str	r3, [r2, #16]
 8002de0:	e005      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	4a42      	ldr	r2, [pc, #264]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002de8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002dec:	6113      	str	r3, [r2, #16]
 8002dee:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002df0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfe:	4a3c      	ldr	r2, [pc, #240]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	e008      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e06:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e0a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002e0e:	e003      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	f002 0301 	and.w	r3, r2, #1
 8002e24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f000 8090 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e42:	2b28      	cmp	r3, #40	; 0x28
 8002e44:	d870      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002f31 	.word	0x08002f31
 8002e50:	08002f29 	.word	0x08002f29
 8002e54:	08002f29 	.word	0x08002f29
 8002e58:	08002f29 	.word	0x08002f29
 8002e5c:	08002f29 	.word	0x08002f29
 8002e60:	08002f29 	.word	0x08002f29
 8002e64:	08002f29 	.word	0x08002f29
 8002e68:	08002f29 	.word	0x08002f29
 8002e6c:	08002efd 	.word	0x08002efd
 8002e70:	08002f29 	.word	0x08002f29
 8002e74:	08002f29 	.word	0x08002f29
 8002e78:	08002f29 	.word	0x08002f29
 8002e7c:	08002f29 	.word	0x08002f29
 8002e80:	08002f29 	.word	0x08002f29
 8002e84:	08002f29 	.word	0x08002f29
 8002e88:	08002f29 	.word	0x08002f29
 8002e8c:	08002f13 	.word	0x08002f13
 8002e90:	08002f29 	.word	0x08002f29
 8002e94:	08002f29 	.word	0x08002f29
 8002e98:	08002f29 	.word	0x08002f29
 8002e9c:	08002f29 	.word	0x08002f29
 8002ea0:	08002f29 	.word	0x08002f29
 8002ea4:	08002f29 	.word	0x08002f29
 8002ea8:	08002f29 	.word	0x08002f29
 8002eac:	08002f31 	.word	0x08002f31
 8002eb0:	08002f29 	.word	0x08002f29
 8002eb4:	08002f29 	.word	0x08002f29
 8002eb8:	08002f29 	.word	0x08002f29
 8002ebc:	08002f29 	.word	0x08002f29
 8002ec0:	08002f29 	.word	0x08002f29
 8002ec4:	08002f29 	.word	0x08002f29
 8002ec8:	08002f29 	.word	0x08002f29
 8002ecc:	08002f31 	.word	0x08002f31
 8002ed0:	08002f29 	.word	0x08002f29
 8002ed4:	08002f29 	.word	0x08002f29
 8002ed8:	08002f29 	.word	0x08002f29
 8002edc:	08002f29 	.word	0x08002f29
 8002ee0:	08002f29 	.word	0x08002f29
 8002ee4:	08002f29 	.word	0x08002f29
 8002ee8:	08002f29 	.word	0x08002f29
 8002eec:	08002f31 	.word	0x08002f31
 8002ef0:	58024400 	.word	0x58024400
 8002ef4:	58024800 	.word	0x58024800
 8002ef8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f00:	3308      	adds	r3, #8
 8002f02:	2101      	movs	r1, #1
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 ffc5 	bl	8003e94 <RCCEx_PLL2_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f10:	e00f      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f16:	3328      	adds	r3, #40	; 0x28
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f86c 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f26:	e004      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f2e:	e000      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f32:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10b      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f3a:	4bc0      	ldr	r3, [pc, #768]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	4abc      	ldr	r2, [pc, #752]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6553      	str	r3, [r2, #84]	; 0x54
 8002f50:	e003      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	f002 0302 	and.w	r3, r2, #2
 8002f66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f70:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002f74:	460b      	mov	r3, r1
 8002f76:	4313      	orrs	r3, r2
 8002f78:	d043      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d824      	bhi.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fd9 	.word	0x08002fd9
 8002f90:	08002fa5 	.word	0x08002fa5
 8002f94:	08002fbb 	.word	0x08002fbb
 8002f98:	08002fd9 	.word	0x08002fd9
 8002f9c:	08002fd9 	.word	0x08002fd9
 8002fa0:	08002fd9 	.word	0x08002fd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa8:	3308      	adds	r3, #8
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 ff71 	bl	8003e94 <RCCEx_PLL2_Config>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002fb8:	e00f      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fbe:	3328      	adds	r3, #40	; 0x28
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f001 f818 	bl	8003ff8 <RCCEx_PLL3_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002fce:	e004      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002fd6:	e000      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8002fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10b      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fe2:	4b96      	ldr	r3, [pc, #600]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	f023 0107 	bic.w	r1, r3, #7
 8002fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff2:	4a92      	ldr	r2, [pc, #584]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	6553      	str	r3, [r2, #84]	; 0x54
 8002ff8:	e003      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ffe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	f002 0304 	and.w	r3, r2, #4
 800300e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003012:	2300      	movs	r3, #0
 8003014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003018:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800301c:	460b      	mov	r3, r1
 800301e:	4313      	orrs	r3, r2
 8003020:	d043      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800302a:	2b05      	cmp	r3, #5
 800302c:	d824      	bhi.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800302e:	a201      	add	r2, pc, #4	; (adr r2, 8003034 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003034:	08003081 	.word	0x08003081
 8003038:	0800304d 	.word	0x0800304d
 800303c:	08003063 	.word	0x08003063
 8003040:	08003081 	.word	0x08003081
 8003044:	08003081 	.word	0x08003081
 8003048:	08003081 	.word	0x08003081
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800304c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003050:	3308      	adds	r3, #8
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f000 ff1d 	bl	8003e94 <RCCEx_PLL2_Config>
 800305a:	4603      	mov	r3, r0
 800305c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003060:	e00f      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003066:	3328      	adds	r3, #40	; 0x28
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f000 ffc4 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003076:	e004      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800307e:	e000      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003082:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10b      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800308a:	4b6c      	ldr	r3, [pc, #432]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	f023 0107 	bic.w	r1, r3, #7
 8003092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003096:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800309a:	4a68      	ldr	r2, [pc, #416]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800309c:	430b      	orrs	r3, r1
 800309e:	6593      	str	r3, [r2, #88]	; 0x58
 80030a0:	e003      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	f002 0320 	and.w	r3, r2, #32
 80030b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030c4:	460b      	mov	r3, r1
 80030c6:	4313      	orrs	r3, r2
 80030c8:	d055      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80030ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030d6:	d033      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80030d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030dc:	d82c      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e2:	d02f      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d826      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030ee:	d02b      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80030f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030f4:	d820      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80030f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030fa:	d012      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80030fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003100:	d81a      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d022      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003106:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800310a:	d115      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800310c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003110:	3308      	adds	r3, #8
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f000 febd 	bl	8003e94 <RCCEx_PLL2_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003120:	e015      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003122:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003126:	3328      	adds	r3, #40	; 0x28
 8003128:	2102      	movs	r1, #2
 800312a:	4618      	mov	r0, r3
 800312c:	f000 ff64 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003136:	e00a      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800313e:	e006      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003140:	bf00      	nop
 8003142:	e004      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003144:	bf00      	nop
 8003146:	e002      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003148:	bf00      	nop
 800314a:	e000      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800314c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10b      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003156:	4b39      	ldr	r3, [pc, #228]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800315e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003166:	4a35      	ldr	r2, [pc, #212]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003168:	430b      	orrs	r3, r1
 800316a:	6553      	str	r3, [r2, #84]	; 0x54
 800316c:	e003      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003172:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800318c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003190:	460b      	mov	r3, r1
 8003192:	4313      	orrs	r3, r2
 8003194:	d058      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003196:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800319e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031a2:	d033      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80031a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031a8:	d82c      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80031aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ae:	d02f      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b4:	d826      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80031b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ba:	d02b      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80031bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031c0:	d820      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	d012      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80031c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031cc:	d81a      	bhi.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d022      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d115      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031dc:	3308      	adds	r3, #8
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fe57 	bl	8003e94 <RCCEx_PLL2_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031ec:	e015      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f2:	3328      	adds	r3, #40	; 0x28
 80031f4:	2102      	movs	r1, #2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fefe 	bl	8003ff8 <RCCEx_PLL3_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003202:	e00a      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800320a:	e006      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800320c:	bf00      	nop
 800320e:	e004      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003210:	bf00      	nop
 8003212:	e002      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800321a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10e      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003226:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800322a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800322e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003232:	4a02      	ldr	r2, [pc, #8]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003234:	430b      	orrs	r3, r1
 8003236:	6593      	str	r3, [r2, #88]	; 0x58
 8003238:	e006      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800323a:	bf00      	nop
 800323c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003244:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003250:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800325e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003262:	460b      	mov	r3, r1
 8003264:	4313      	orrs	r3, r2
 8003266:	d055      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800326c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003270:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003274:	d033      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003276:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800327a:	d82c      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003280:	d02f      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003286:	d826      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003288:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800328c:	d02b      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800328e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003292:	d820      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003298:	d012      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800329a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800329e:	d81a      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d022      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80032a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a8:	d115      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032ae:	3308      	adds	r3, #8
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fdee 	bl	8003e94 <RCCEx_PLL2_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032be:	e015      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c4:	3328      	adds	r3, #40	; 0x28
 80032c6:	2102      	movs	r1, #2
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fe95 	bl	8003ff8 <RCCEx_PLL3_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032d4:	e00a      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032dc:	e006      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032de:	bf00      	nop
 80032e0:	e004      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032e2:	bf00      	nop
 80032e4:	e002      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032e6:	bf00      	nop
 80032e8:	e000      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80032ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032f4:	4ba1      	ldr	r3, [pc, #644]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80032fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003300:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003304:	4a9d      	ldr	r2, [pc, #628]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003306:	430b      	orrs	r3, r1
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
 800330a:	e003      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003310:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f002 0308 	and.w	r3, r2, #8
 8003320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800332a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800332e:	460b      	mov	r3, r1
 8003330:	4313      	orrs	r3, r2
 8003332:	d01e      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003346:	3328      	adds	r3, #40	; 0x28
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fe54 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d002      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800335c:	4b87      	ldr	r3, [pc, #540]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800335e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003360:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800336c:	4a83      	ldr	r2, [pc, #524]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f002 0310 	and.w	r3, r2, #16
 800337e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003388:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800338c:	460b      	mov	r3, r1
 800338e:	4313      	orrs	r3, r2
 8003390:	d01e      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800339a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800339e:	d10c      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a4:	3328      	adds	r3, #40	; 0x28
 80033a6:	2102      	movs	r1, #2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fe25 	bl	8003ff8 <RCCEx_PLL3_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033ba:	4b70      	ldr	r3, [pc, #448]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033ca:	4a6c      	ldr	r2, [pc, #432]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80033dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80033ea:	460b      	mov	r3, r1
 80033ec:	4313      	orrs	r3, r2
 80033ee:	d03e      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80033f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033fc:	d022      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80033fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003402:	d81b      	bhi.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d00b      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800340e:	e015      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003414:	3308      	adds	r3, #8
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fd3b 	bl	8003e94 <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003424:	e00f      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342a:	3328      	adds	r3, #40	; 0x28
 800342c:	2102      	movs	r1, #2
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fde2 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003434:	4603      	mov	r3, r0
 8003436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800343a:	e004      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003442:	e000      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800344e:	4b4b      	ldr	r3, [pc, #300]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800345e:	4a47      	ldr	r2, [pc, #284]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003460:	430b      	orrs	r3, r1
 8003462:	6593      	str	r3, [r2, #88]	; 0x58
 8003464:	e003      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003466:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800346a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800346e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800347a:	67bb      	str	r3, [r7, #120]	; 0x78
 800347c:	2300      	movs	r3, #0
 800347e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003480:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003484:	460b      	mov	r3, r1
 8003486:	4313      	orrs	r3, r2
 8003488:	d03b      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800348a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003496:	d01f      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800349c:	d818      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800349e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034a2:	d003      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80034a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a8:	d007      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80034aa:	e011      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ac:	4b33      	ldr	r3, [pc, #204]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	4a32      	ldr	r2, [pc, #200]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80034b8:	e00f      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034be:	3328      	adds	r3, #40	; 0x28
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fd98 	bl	8003ff8 <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80034ce:	e004      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80034d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6553      	str	r3, [r2, #84]	; 0x54
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003502:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800350e:	673b      	str	r3, [r7, #112]	; 0x70
 8003510:	2300      	movs	r3, #0
 8003512:	677b      	str	r3, [r7, #116]	; 0x74
 8003514:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003518:	460b      	mov	r3, r1
 800351a:	4313      	orrs	r3, r2
 800351c:	d034      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800351e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d007      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800352e:	e011      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a11      	ldr	r2, [pc, #68]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800353c:	e00e      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800353e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003542:	3308      	adds	r3, #8
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fca4 	bl	8003e94 <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003552:	e003      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800355a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10d      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	4a02      	ldr	r2, [pc, #8]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003574:	430b      	orrs	r3, r1
 8003576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800357a:	bf00      	nop
 800357c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003584:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003594:	66bb      	str	r3, [r7, #104]	; 0x68
 8003596:	2300      	movs	r3, #0
 8003598:	66fb      	str	r3, [r7, #108]	; 0x6c
 800359a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800359e:	460b      	mov	r3, r1
 80035a0:	4313      	orrs	r3, r2
 80035a2:	d00c      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a8:	3328      	adds	r3, #40	; 0x28
 80035aa:	2102      	movs	r1, #2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fd23 	bl	8003ff8 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80035ca:	663b      	str	r3, [r7, #96]	; 0x60
 80035cc:	2300      	movs	r3, #0
 80035ce:	667b      	str	r3, [r7, #100]	; 0x64
 80035d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80035d4:	460b      	mov	r3, r1
 80035d6:	4313      	orrs	r3, r2
 80035d8:	d038      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80035da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035e6:	d018      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80035e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ec:	d811      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80035ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f2:	d014      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f8:	d80b      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d011      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d106      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003604:	4bc3      	ldr	r3, [pc, #780]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	4ac2      	ldr	r2, [pc, #776]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003610:	e008      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003618:	e004      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003624:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10b      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800362c:	4bb9      	ldr	r3, [pc, #740]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003634:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	4ab5      	ldr	r2, [pc, #724]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800363e:	430b      	orrs	r3, r1
 8003640:	6553      	str	r3, [r2, #84]	; 0x54
 8003642:	e003      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003648:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800364c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003658:	65bb      	str	r3, [r7, #88]	; 0x58
 800365a:	2300      	movs	r3, #0
 800365c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800365e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003668:	4baa      	ldr	r3, [pc, #680]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003676:	4aa7      	ldr	r2, [pc, #668]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800367c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
 800368a:	2300      	movs	r3, #0
 800368c:	657b      	str	r3, [r7, #84]	; 0x54
 800368e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d009      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003698:	4b9e      	ldr	r3, [pc, #632]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80036a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a9b      	ldr	r2, [pc, #620]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80036ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80036b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80036ba:	2300      	movs	r3, #0
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80036c2:	460b      	mov	r3, r1
 80036c4:	4313      	orrs	r3, r2
 80036c6:	d009      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80036c8:	4b92      	ldr	r3, [pc, #584]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	4a8f      	ldr	r2, [pc, #572]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036d8:	430b      	orrs	r3, r1
 80036da:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80036e8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ea:	2300      	movs	r3, #0
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
 80036ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036f8:	4b86      	ldr	r3, [pc, #536]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	4a85      	ldr	r2, [pc, #532]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80036fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003702:	6113      	str	r3, [r2, #16]
 8003704:	4b83      	ldr	r3, [pc, #524]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003706:	6919      	ldr	r1, [r3, #16]
 8003708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800370c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003710:	4a80      	ldr	r2, [pc, #512]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38
 8003724:	2300      	movs	r3, #0
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003728:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800372c:	460b      	mov	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	d009      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003732:	4b78      	ldr	r3, [pc, #480]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003736:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800373a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	4a74      	ldr	r2, [pc, #464]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003742:	430b      	orrs	r3, r1
 8003744:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
 8003754:	2300      	movs	r3, #0
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
 8003758:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800376a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	4a68      	ldr	r2, [pc, #416]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003774:	430b      	orrs	r3, r1
 8003776:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	2100      	movs	r1, #0
 8003782:	62b9      	str	r1, [r7, #40]	; 0x28
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800378a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800378e:	460b      	mov	r3, r1
 8003790:	4313      	orrs	r3, r2
 8003792:	d011      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003798:	3308      	adds	r3, #8
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fb79 	bl	8003e94 <RCCEx_PLL2_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80037b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	2100      	movs	r1, #0
 80037c2:	6239      	str	r1, [r7, #32]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037ce:	460b      	mov	r3, r1
 80037d0:	4313      	orrs	r3, r2
 80037d2:	d011      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d8:	3308      	adds	r3, #8
 80037da:	2101      	movs	r1, #1
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fb59 	bl	8003e94 <RCCEx_PLL2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80037e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80037f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	2100      	movs	r1, #0
 8003802:	61b9      	str	r1, [r7, #24]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d011      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003818:	3308      	adds	r3, #8
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fb39 	bl	8003e94 <RCCEx_PLL2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003828:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003834:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003838:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	2100      	movs	r1, #0
 8003842:	6139      	str	r1, [r7, #16]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d011      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003858:	3328      	adds	r3, #40	; 0x28
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fbcb 	bl	8003ff8 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003868:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003874:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003880:	2100      	movs	r1, #0
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800388e:	460b      	mov	r3, r1
 8003890:	4313      	orrs	r3, r2
 8003892:	d011      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003898:	3328      	adds	r3, #40	; 0x28
 800389a:	2101      	movs	r1, #1
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fbab 	bl	8003ff8 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038b4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80038b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	2100      	movs	r1, #0
 80038c2:	6039      	str	r1, [r7, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	607b      	str	r3, [r7, #4]
 80038ca:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038ce:	460b      	mov	r3, r1
 80038d0:	4313      	orrs	r3, r2
 80038d2:	d011      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d8:	3328      	adds	r3, #40	; 0x28
 80038da:	2102      	movs	r1, #2
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fb8b 	bl	8003ff8 <RCCEx_PLL3_Config>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80038e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 80038f8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003912:	bf00      	nop
 8003914:	58024400 	.word	0x58024400

08003918 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800391c:	f7fe fde2 	bl	80024e4 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4904      	ldr	r1, [pc, #16]	; (8003940 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	58024400 	.word	0x58024400
 8003940:	08005f90 	.word	0x08005f90

08003944 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800394c:	4ba1      	ldr	r3, [pc, #644]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003956:	4b9f      	ldr	r3, [pc, #636]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	0b1b      	lsrs	r3, r3, #12
 800395c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003960:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003962:	4b9c      	ldr	r3, [pc, #624]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800396e:	4b99      	ldr	r3, [pc, #612]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	08db      	lsrs	r3, r3, #3
 8003974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003986:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8111 	beq.w	8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	f000 8083 	beq.w	8003aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b02      	cmp	r3, #2
 800399e:	f200 80a1 	bhi.w	8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d056      	beq.n	8003a5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80039ae:	e099      	b.n	8003ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b0:	4b88      	ldr	r3, [pc, #544]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02d      	beq.n	8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039bc:	4b85      	ldr	r3, [pc, #532]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	08db      	lsrs	r3, r3, #3
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	4a84      	ldr	r2, [pc, #528]	; (8003bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e6:	4b7b      	ldr	r3, [pc, #492]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a16:	e087      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003be0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a5a:	e065      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	ee07 3a90 	vmov	s15, r3
 8003a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6e:	4b59      	ldr	r3, [pc, #356]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a9e:	e043      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab2:	4b48      	ldr	r3, [pc, #288]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ac6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ae2:	e021      	b.n	8003b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003be4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af6:	4b37      	ldr	r3, [pc, #220]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003bdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b28:	4b2a      	ldr	r3, [pc, #168]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	0a5b      	lsrs	r3, r3, #9
 8003b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b4e:	ee17 2a90 	vmov	r2, s15
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b60:	ee07 3a90 	vmov	s15, r3
 8003b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b7c:	ee17 2a90 	vmov	r2, s15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b84:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 2a90 	vmov	r2, s15
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	3724      	adds	r7, #36	; 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	58024400 	.word	0x58024400
 8003bd8:	03d09000 	.word	0x03d09000
 8003bdc:	46000000 	.word	0x46000000
 8003be0:	4c742400 	.word	0x4c742400
 8003be4:	4a742400 	.word	0x4a742400
 8003be8:	4af42400 	.word	0x4af42400

08003bec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	; 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bf4:	4ba1      	ldr	r3, [pc, #644]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f003 0303 	and.w	r3, r3, #3
 8003bfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003bfe:	4b9f      	ldr	r3, [pc, #636]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	0d1b      	lsrs	r3, r3, #20
 8003c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c0a:	4b9c      	ldr	r3, [pc, #624]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c16:	4b99      	ldr	r3, [pc, #612]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	08db      	lsrs	r3, r3, #3
 8003c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8111 	beq.w	8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f000 8083 	beq.w	8003d48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	f200 80a1 	bhi.w	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d056      	beq.n	8003d04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c56:	e099      	b.n	8003d8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c58:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02d      	beq.n	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c64:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	4a84      	ldr	r2, [pc, #528]	; (8003e80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
 8003c74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b7b      	ldr	r3, [pc, #492]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cbe:	e087      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d02:	e065      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b59      	ldr	r3, [pc, #356]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d46:	e043      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d8a:	e021      	b.n	8003dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9e:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003db2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	0a5b      	lsrs	r3, r3, #9
 8003dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003de6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df6:	ee17 2a90 	vmov	r2, s15
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e08:	ee07 3a90 	vmov	s15, r3
 8003e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e24:	ee17 2a90 	vmov	r2, s15
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e2c:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	0e1b      	lsrs	r3, r3, #24
 8003e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e36:	ee07 3a90 	vmov	s15, r3
 8003e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e52:	ee17 2a90 	vmov	r2, s15
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e5a:	e008      	b.n	8003e6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	03d09000 	.word	0x03d09000
 8003e84:	46000000 	.word	0x46000000
 8003e88:	4c742400 	.word	0x4c742400
 8003e8c:	4a742400 	.word	0x4a742400
 8003e90:	4af42400 	.word	0x4af42400

08003e94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ea2:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d101      	bne.n	8003eb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e099      	b.n	8003fe6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003eb2:	4b4f      	ldr	r3, [pc, #316]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4e      	ldr	r2, [pc, #312]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003eb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ebe:	f7fd f89b 	bl	8000ff8 <HAL_GetTick>
 8003ec2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ec6:	f7fd f897 	bl	8000ff8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e086      	b.n	8003fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ed8:	4b45      	ldr	r3, [pc, #276]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ee4:	4b42      	ldr	r3, [pc, #264]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	031b      	lsls	r3, r3, #12
 8003ef2:	493f      	ldr	r1, [pc, #252]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	025b      	lsls	r3, r3, #9
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f28:	4931      	ldr	r1, [pc, #196]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f2e:	4b30      	ldr	r3, [pc, #192]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	492d      	ldr	r1, [pc, #180]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	f023 0220 	bic.w	r2, r3, #32
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	4928      	ldr	r1, [pc, #160]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f52:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f62:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <RCCEx_PLL2_Config+0x160>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	69d2      	ldr	r2, [r2, #28]
 8003f6a:	00d2      	lsls	r2, r2, #3
 8003f6c:	4920      	ldr	r1, [pc, #128]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f72:	4b1f      	ldr	r3, [pc, #124]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	4a1e      	ldr	r2, [pc, #120]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	f043 0310 	orr.w	r3, r3, #16
 8003f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d106      	bne.n	8003f92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f90:	e00f      	b.n	8003fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a14      	ldr	r2, [pc, #80]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fa4:	e005      	b.n	8003fb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003fa6:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fbe:	f7fd f81b 	bl	8000ff8 <HAL_GetTick>
 8003fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fc4:	e008      	b.n	8003fd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003fc6:	f7fd f817 	bl	8000ff8 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e006      	b.n	8003fe6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <RCCEx_PLL2_Config+0x15c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	ffff0007 	.word	0xffff0007

08003ff8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004006:	4b53      	ldr	r3, [pc, #332]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b03      	cmp	r3, #3
 8004010:	d101      	bne.n	8004016 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e099      	b.n	800414a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004016:	4b4f      	ldr	r3, [pc, #316]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a4e      	ldr	r2, [pc, #312]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 800401c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004020:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004022:	f7fc ffe9 	bl	8000ff8 <HAL_GetTick>
 8004026:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004028:	e008      	b.n	800403c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800402a:	f7fc ffe5 	bl	8000ff8 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e086      	b.n	800414a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800403c:	4b45      	ldr	r3, [pc, #276]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004048:	4b42      	ldr	r3, [pc, #264]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 800404a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	051b      	lsls	r3, r3, #20
 8004056:	493f      	ldr	r1, [pc, #252]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004058:	4313      	orrs	r3, r2
 800405a:	628b      	str	r3, [r1, #40]	; 0x28
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	3b01      	subs	r3, #1
 8004062:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	3b01      	subs	r3, #1
 800406c:	025b      	lsls	r3, r3, #9
 800406e:	b29b      	uxth	r3, r3
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	3b01      	subs	r3, #1
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	3b01      	subs	r3, #1
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800408c:	4931      	ldr	r1, [pc, #196]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 800408e:	4313      	orrs	r3, r2
 8004090:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004092:	4b30      	ldr	r3, [pc, #192]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	492d      	ldr	r1, [pc, #180]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040a4:	4b2b      	ldr	r3, [pc, #172]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	4928      	ldr	r1, [pc, #160]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80040b6:	4b27      	ldr	r3, [pc, #156]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	4a26      	ldr	r2, [pc, #152]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80040c2:	4b24      	ldr	r3, [pc, #144]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <RCCEx_PLL3_Config+0x160>)
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	69d2      	ldr	r2, [r2, #28]
 80040ce:	00d2      	lsls	r2, r2, #3
 80040d0:	4920      	ldr	r1, [pc, #128]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80040d6:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d106      	bne.n	80040f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80040e8:	4b1a      	ldr	r3, [pc, #104]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040f4:	e00f      	b.n	8004116 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d106      	bne.n	800410a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040fc:	4b15      	ldr	r3, [pc, #84]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004102:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004108:	e005      	b.n	8004116 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800410a:	4b12      	ldr	r3, [pc, #72]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	4a11      	ldr	r2, [pc, #68]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004114:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 800411c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004122:	f7fc ff69 	bl	8000ff8 <HAL_GetTick>
 8004126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004128:	e008      	b.n	800413c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800412a:	f7fc ff65 	bl	8000ff8 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <RCCEx_PLL3_Config+0x15c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004148:	7bfb      	ldrb	r3, [r7, #15]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	58024400 	.word	0x58024400
 8004158:	ffff0007 	.word	0xffff0007

0800415c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e042      	b.n	80041f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fc fd47 	bl	8000c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2224      	movs	r2, #36	; 0x24
 800418a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8ba 	bl	8004318 <UART_SetConfig>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e022      	b.n	80041f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 ff1a 	bl	8004ff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 ffa1 	bl	8005134 <UART_CheckIdleState>
 80041f2:	4603      	mov	r3, r0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08a      	sub	sp, #40	; 0x28
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	2b20      	cmp	r3, #32
 8004214:	d17b      	bne.n	800430e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <HAL_UART_Transmit+0x26>
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e074      	b.n	8004310 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2221      	movs	r2, #33	; 0x21
 8004232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004236:	f7fc fedf 	bl	8000ff8 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004254:	d108      	bne.n	8004268 <HAL_UART_Transmit+0x6c>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	e003      	b.n	8004270 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004270:	e030      	b.n	80042d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2180      	movs	r1, #128	; 0x80
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f001 f803 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e03d      	b.n	8004310 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	461a      	mov	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	3302      	adds	r3, #2
 80042ae:	61bb      	str	r3, [r7, #24]
 80042b0:	e007      	b.n	80042c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	3301      	adds	r3, #1
 80042c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1c8      	bne.n	8004272 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 ffcc 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e006      	b.n	8004310 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	e000      	b.n	8004310 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800430e:	2302      	movs	r3, #2
  }
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431c:	b092      	sub	sp, #72	; 0x48
 800431e:	af00      	add	r7, sp, #0
 8004320:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	431a      	orrs	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4313      	orrs	r3, r2
 800433e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4bbe      	ldr	r3, [pc, #760]	; (8004640 <UART_SetConfig+0x328>)
 8004348:	4013      	ands	r3, r2
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004350:	430b      	orrs	r3, r1
 8004352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4ab3      	ldr	r2, [pc, #716]	; (8004644 <UART_SetConfig+0x32c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004380:	4313      	orrs	r3, r2
 8004382:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	4baf      	ldr	r3, [pc, #700]	; (8004648 <UART_SetConfig+0x330>)
 800438c:	4013      	ands	r3, r2
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004394:	430b      	orrs	r3, r1
 8004396:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	f023 010f 	bic.w	r1, r3, #15
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4aa6      	ldr	r2, [pc, #664]	; (800464c <UART_SetConfig+0x334>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d177      	bne.n	80044a8 <UART_SetConfig+0x190>
 80043b8:	4ba5      	ldr	r3, [pc, #660]	; (8004650 <UART_SetConfig+0x338>)
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043c0:	2b28      	cmp	r3, #40	; 0x28
 80043c2:	d86d      	bhi.n	80044a0 <UART_SetConfig+0x188>
 80043c4:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <UART_SetConfig+0xb4>)
 80043c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ca:	bf00      	nop
 80043cc:	08004471 	.word	0x08004471
 80043d0:	080044a1 	.word	0x080044a1
 80043d4:	080044a1 	.word	0x080044a1
 80043d8:	080044a1 	.word	0x080044a1
 80043dc:	080044a1 	.word	0x080044a1
 80043e0:	080044a1 	.word	0x080044a1
 80043e4:	080044a1 	.word	0x080044a1
 80043e8:	080044a1 	.word	0x080044a1
 80043ec:	08004479 	.word	0x08004479
 80043f0:	080044a1 	.word	0x080044a1
 80043f4:	080044a1 	.word	0x080044a1
 80043f8:	080044a1 	.word	0x080044a1
 80043fc:	080044a1 	.word	0x080044a1
 8004400:	080044a1 	.word	0x080044a1
 8004404:	080044a1 	.word	0x080044a1
 8004408:	080044a1 	.word	0x080044a1
 800440c:	08004481 	.word	0x08004481
 8004410:	080044a1 	.word	0x080044a1
 8004414:	080044a1 	.word	0x080044a1
 8004418:	080044a1 	.word	0x080044a1
 800441c:	080044a1 	.word	0x080044a1
 8004420:	080044a1 	.word	0x080044a1
 8004424:	080044a1 	.word	0x080044a1
 8004428:	080044a1 	.word	0x080044a1
 800442c:	08004489 	.word	0x08004489
 8004430:	080044a1 	.word	0x080044a1
 8004434:	080044a1 	.word	0x080044a1
 8004438:	080044a1 	.word	0x080044a1
 800443c:	080044a1 	.word	0x080044a1
 8004440:	080044a1 	.word	0x080044a1
 8004444:	080044a1 	.word	0x080044a1
 8004448:	080044a1 	.word	0x080044a1
 800444c:	08004491 	.word	0x08004491
 8004450:	080044a1 	.word	0x080044a1
 8004454:	080044a1 	.word	0x080044a1
 8004458:	080044a1 	.word	0x080044a1
 800445c:	080044a1 	.word	0x080044a1
 8004460:	080044a1 	.word	0x080044a1
 8004464:	080044a1 	.word	0x080044a1
 8004468:	080044a1 	.word	0x080044a1
 800446c:	08004499 	.word	0x08004499
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004476:	e326      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004478:	2304      	movs	r3, #4
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447e:	e322      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004480:	2308      	movs	r3, #8
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e31e      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e31a      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004490:	2320      	movs	r3, #32
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e316      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004498:	2340      	movs	r3, #64	; 0x40
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e312      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e30e      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a69      	ldr	r2, [pc, #420]	; (8004654 <UART_SetConfig+0x33c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d130      	bne.n	8004514 <UART_SetConfig+0x1fc>
 80044b2:	4b67      	ldr	r3, [pc, #412]	; (8004650 <UART_SetConfig+0x338>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d826      	bhi.n	800450c <UART_SetConfig+0x1f4>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0x1ac>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044dd 	.word	0x080044dd
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	080044ed 	.word	0x080044ed
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	08004505 	.word	0x08004505
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e2:	e2f0      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ea:	e2ec      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044f2:	e2e8      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044fa:	e2e4      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80044fc:	2320      	movs	r3, #32
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004502:	e2e0      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004504:	2340      	movs	r3, #64	; 0x40
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800450a:	e2dc      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004512:	e2d8      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a4f      	ldr	r2, [pc, #316]	; (8004658 <UART_SetConfig+0x340>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d130      	bne.n	8004580 <UART_SetConfig+0x268>
 800451e:	4b4c      	ldr	r3, [pc, #304]	; (8004650 <UART_SetConfig+0x338>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b05      	cmp	r3, #5
 8004528:	d826      	bhi.n	8004578 <UART_SetConfig+0x260>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <UART_SetConfig+0x218>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004549 	.word	0x08004549
 8004534:	08004551 	.word	0x08004551
 8004538:	08004559 	.word	0x08004559
 800453c:	08004561 	.word	0x08004561
 8004540:	08004569 	.word	0x08004569
 8004544:	08004571 	.word	0x08004571
 8004548:	2300      	movs	r3, #0
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454e:	e2ba      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004550:	2304      	movs	r3, #4
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004556:	e2b6      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004558:	2308      	movs	r3, #8
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455e:	e2b2      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004560:	2310      	movs	r3, #16
 8004562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004566:	e2ae      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004568:	2320      	movs	r3, #32
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456e:	e2aa      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004576:	e2a6      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800457e:	e2a2      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a35      	ldr	r2, [pc, #212]	; (800465c <UART_SetConfig+0x344>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d130      	bne.n	80045ec <UART_SetConfig+0x2d4>
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <UART_SetConfig+0x338>)
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	2b05      	cmp	r3, #5
 8004594:	d826      	bhi.n	80045e4 <UART_SetConfig+0x2cc>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0x284>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045b5 	.word	0x080045b5
 80045a0:	080045bd 	.word	0x080045bd
 80045a4:	080045c5 	.word	0x080045c5
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045dd 	.word	0x080045dd
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ba:	e284      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80045bc:	2304      	movs	r3, #4
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c2:	e280      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80045c4:	2308      	movs	r3, #8
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ca:	e27c      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80045cc:	2310      	movs	r3, #16
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e278      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80045d4:	2320      	movs	r3, #32
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e274      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80045dc:	2340      	movs	r3, #64	; 0x40
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e2:	e270      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80045e4:	2380      	movs	r3, #128	; 0x80
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ea:	e26c      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1b      	ldr	r2, [pc, #108]	; (8004660 <UART_SetConfig+0x348>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d142      	bne.n	800467c <UART_SetConfig+0x364>
 80045f6:	4b16      	ldr	r3, [pc, #88]	; (8004650 <UART_SetConfig+0x338>)
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d838      	bhi.n	8004674 <UART_SetConfig+0x35c>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0x2f0>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004621 	.word	0x08004621
 800460c:	08004629 	.word	0x08004629
 8004610:	08004631 	.word	0x08004631
 8004614:	08004639 	.word	0x08004639
 8004618:	08004665 	.word	0x08004665
 800461c:	0800466d 	.word	0x0800466d
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004626:	e24e      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004628:	2304      	movs	r3, #4
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462e:	e24a      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004630:	2308      	movs	r3, #8
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004636:	e246      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004638:	2310      	movs	r3, #16
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e242      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004640:	cfff69f3 	.word	0xcfff69f3
 8004644:	58000c00 	.word	0x58000c00
 8004648:	11fff4ff 	.word	0x11fff4ff
 800464c:	40011000 	.word	0x40011000
 8004650:	58024400 	.word	0x58024400
 8004654:	40004400 	.word	0x40004400
 8004658:	40004800 	.word	0x40004800
 800465c:	40004c00 	.word	0x40004c00
 8004660:	40005000 	.word	0x40005000
 8004664:	2320      	movs	r3, #32
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466a:	e22c      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004672:	e228      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800467a:	e224      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4ab1      	ldr	r2, [pc, #708]	; (8004948 <UART_SetConfig+0x630>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d176      	bne.n	8004774 <UART_SetConfig+0x45c>
 8004686:	4bb1      	ldr	r3, [pc, #708]	; (800494c <UART_SetConfig+0x634>)
 8004688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800468e:	2b28      	cmp	r3, #40	; 0x28
 8004690:	d86c      	bhi.n	800476c <UART_SetConfig+0x454>
 8004692:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <UART_SetConfig+0x380>)
 8004694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004698:	0800473d 	.word	0x0800473d
 800469c:	0800476d 	.word	0x0800476d
 80046a0:	0800476d 	.word	0x0800476d
 80046a4:	0800476d 	.word	0x0800476d
 80046a8:	0800476d 	.word	0x0800476d
 80046ac:	0800476d 	.word	0x0800476d
 80046b0:	0800476d 	.word	0x0800476d
 80046b4:	0800476d 	.word	0x0800476d
 80046b8:	08004745 	.word	0x08004745
 80046bc:	0800476d 	.word	0x0800476d
 80046c0:	0800476d 	.word	0x0800476d
 80046c4:	0800476d 	.word	0x0800476d
 80046c8:	0800476d 	.word	0x0800476d
 80046cc:	0800476d 	.word	0x0800476d
 80046d0:	0800476d 	.word	0x0800476d
 80046d4:	0800476d 	.word	0x0800476d
 80046d8:	0800474d 	.word	0x0800474d
 80046dc:	0800476d 	.word	0x0800476d
 80046e0:	0800476d 	.word	0x0800476d
 80046e4:	0800476d 	.word	0x0800476d
 80046e8:	0800476d 	.word	0x0800476d
 80046ec:	0800476d 	.word	0x0800476d
 80046f0:	0800476d 	.word	0x0800476d
 80046f4:	0800476d 	.word	0x0800476d
 80046f8:	08004755 	.word	0x08004755
 80046fc:	0800476d 	.word	0x0800476d
 8004700:	0800476d 	.word	0x0800476d
 8004704:	0800476d 	.word	0x0800476d
 8004708:	0800476d 	.word	0x0800476d
 800470c:	0800476d 	.word	0x0800476d
 8004710:	0800476d 	.word	0x0800476d
 8004714:	0800476d 	.word	0x0800476d
 8004718:	0800475d 	.word	0x0800475d
 800471c:	0800476d 	.word	0x0800476d
 8004720:	0800476d 	.word	0x0800476d
 8004724:	0800476d 	.word	0x0800476d
 8004728:	0800476d 	.word	0x0800476d
 800472c:	0800476d 	.word	0x0800476d
 8004730:	0800476d 	.word	0x0800476d
 8004734:	0800476d 	.word	0x0800476d
 8004738:	08004765 	.word	0x08004765
 800473c:	2301      	movs	r3, #1
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004742:	e1c0      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474a:	e1bc      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e1b8      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e1b4      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800475c:	2320      	movs	r3, #32
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e1b0      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476a:	e1ac      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e1a8      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a75      	ldr	r2, [pc, #468]	; (8004950 <UART_SetConfig+0x638>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d130      	bne.n	80047e0 <UART_SetConfig+0x4c8>
 800477e:	4b73      	ldr	r3, [pc, #460]	; (800494c <UART_SetConfig+0x634>)
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	2b05      	cmp	r3, #5
 8004788:	d826      	bhi.n	80047d8 <UART_SetConfig+0x4c0>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x478>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a9 	.word	0x080047a9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047b9 	.word	0x080047b9
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ae:	e18a      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80047b0:	2304      	movs	r3, #4
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e186      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80047b8:	2308      	movs	r3, #8
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e182      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80047c0:	2310      	movs	r3, #16
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e17e      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80047c8:	2320      	movs	r3, #32
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e17a      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e176      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e172      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5b      	ldr	r2, [pc, #364]	; (8004954 <UART_SetConfig+0x63c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d130      	bne.n	800484c <UART_SetConfig+0x534>
 80047ea:	4b58      	ldr	r3, [pc, #352]	; (800494c <UART_SetConfig+0x634>)
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d826      	bhi.n	8004844 <UART_SetConfig+0x52c>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x4e4>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004815 	.word	0x08004815
 8004800:	0800481d 	.word	0x0800481d
 8004804:	08004825 	.word	0x08004825
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481a:	e154      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004822:	e150      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482a:	e14c      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e148      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004834:	2320      	movs	r3, #32
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e144      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e140      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e13c      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a41      	ldr	r2, [pc, #260]	; (8004958 <UART_SetConfig+0x640>)
 8004852:	4293      	cmp	r3, r2
 8004854:	f040 8082 	bne.w	800495c <UART_SetConfig+0x644>
 8004858:	4b3c      	ldr	r3, [pc, #240]	; (800494c <UART_SetConfig+0x634>)
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004860:	2b28      	cmp	r3, #40	; 0x28
 8004862:	d86d      	bhi.n	8004940 <UART_SetConfig+0x628>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <UART_SetConfig+0x554>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004911 	.word	0x08004911
 8004870:	08004941 	.word	0x08004941
 8004874:	08004941 	.word	0x08004941
 8004878:	08004941 	.word	0x08004941
 800487c:	08004941 	.word	0x08004941
 8004880:	08004941 	.word	0x08004941
 8004884:	08004941 	.word	0x08004941
 8004888:	08004941 	.word	0x08004941
 800488c:	08004919 	.word	0x08004919
 8004890:	08004941 	.word	0x08004941
 8004894:	08004941 	.word	0x08004941
 8004898:	08004941 	.word	0x08004941
 800489c:	08004941 	.word	0x08004941
 80048a0:	08004941 	.word	0x08004941
 80048a4:	08004941 	.word	0x08004941
 80048a8:	08004941 	.word	0x08004941
 80048ac:	08004921 	.word	0x08004921
 80048b0:	08004941 	.word	0x08004941
 80048b4:	08004941 	.word	0x08004941
 80048b8:	08004941 	.word	0x08004941
 80048bc:	08004941 	.word	0x08004941
 80048c0:	08004941 	.word	0x08004941
 80048c4:	08004941 	.word	0x08004941
 80048c8:	08004941 	.word	0x08004941
 80048cc:	08004929 	.word	0x08004929
 80048d0:	08004941 	.word	0x08004941
 80048d4:	08004941 	.word	0x08004941
 80048d8:	08004941 	.word	0x08004941
 80048dc:	08004941 	.word	0x08004941
 80048e0:	08004941 	.word	0x08004941
 80048e4:	08004941 	.word	0x08004941
 80048e8:	08004941 	.word	0x08004941
 80048ec:	08004931 	.word	0x08004931
 80048f0:	08004941 	.word	0x08004941
 80048f4:	08004941 	.word	0x08004941
 80048f8:	08004941 	.word	0x08004941
 80048fc:	08004941 	.word	0x08004941
 8004900:	08004941 	.word	0x08004941
 8004904:	08004941 	.word	0x08004941
 8004908:	08004941 	.word	0x08004941
 800490c:	08004939 	.word	0x08004939
 8004910:	2301      	movs	r3, #1
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004916:	e0d6      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004918:	2304      	movs	r3, #4
 800491a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491e:	e0d2      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004920:	2308      	movs	r3, #8
 8004922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004926:	e0ce      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004928:	2310      	movs	r3, #16
 800492a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492e:	e0ca      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004930:	2320      	movs	r3, #32
 8004932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004936:	e0c6      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004938:	2340      	movs	r3, #64	; 0x40
 800493a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493e:	e0c2      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004946:	e0be      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004948:	40011400 	.word	0x40011400
 800494c:	58024400 	.word	0x58024400
 8004950:	40007800 	.word	0x40007800
 8004954:	40007c00 	.word	0x40007c00
 8004958:	40011800 	.word	0x40011800
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4aad      	ldr	r2, [pc, #692]	; (8004c18 <UART_SetConfig+0x900>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d176      	bne.n	8004a54 <UART_SetConfig+0x73c>
 8004966:	4bad      	ldr	r3, [pc, #692]	; (8004c1c <UART_SetConfig+0x904>)
 8004968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800496e:	2b28      	cmp	r3, #40	; 0x28
 8004970:	d86c      	bhi.n	8004a4c <UART_SetConfig+0x734>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x660>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	08004a1d 	.word	0x08004a1d
 800497c:	08004a4d 	.word	0x08004a4d
 8004980:	08004a4d 	.word	0x08004a4d
 8004984:	08004a4d 	.word	0x08004a4d
 8004988:	08004a4d 	.word	0x08004a4d
 800498c:	08004a4d 	.word	0x08004a4d
 8004990:	08004a4d 	.word	0x08004a4d
 8004994:	08004a4d 	.word	0x08004a4d
 8004998:	08004a25 	.word	0x08004a25
 800499c:	08004a4d 	.word	0x08004a4d
 80049a0:	08004a4d 	.word	0x08004a4d
 80049a4:	08004a4d 	.word	0x08004a4d
 80049a8:	08004a4d 	.word	0x08004a4d
 80049ac:	08004a4d 	.word	0x08004a4d
 80049b0:	08004a4d 	.word	0x08004a4d
 80049b4:	08004a4d 	.word	0x08004a4d
 80049b8:	08004a2d 	.word	0x08004a2d
 80049bc:	08004a4d 	.word	0x08004a4d
 80049c0:	08004a4d 	.word	0x08004a4d
 80049c4:	08004a4d 	.word	0x08004a4d
 80049c8:	08004a4d 	.word	0x08004a4d
 80049cc:	08004a4d 	.word	0x08004a4d
 80049d0:	08004a4d 	.word	0x08004a4d
 80049d4:	08004a4d 	.word	0x08004a4d
 80049d8:	08004a35 	.word	0x08004a35
 80049dc:	08004a4d 	.word	0x08004a4d
 80049e0:	08004a4d 	.word	0x08004a4d
 80049e4:	08004a4d 	.word	0x08004a4d
 80049e8:	08004a4d 	.word	0x08004a4d
 80049ec:	08004a4d 	.word	0x08004a4d
 80049f0:	08004a4d 	.word	0x08004a4d
 80049f4:	08004a4d 	.word	0x08004a4d
 80049f8:	08004a3d 	.word	0x08004a3d
 80049fc:	08004a4d 	.word	0x08004a4d
 8004a00:	08004a4d 	.word	0x08004a4d
 8004a04:	08004a4d 	.word	0x08004a4d
 8004a08:	08004a4d 	.word	0x08004a4d
 8004a0c:	08004a4d 	.word	0x08004a4d
 8004a10:	08004a4d 	.word	0x08004a4d
 8004a14:	08004a4d 	.word	0x08004a4d
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a22:	e050      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a24:	2304      	movs	r3, #4
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2a:	e04c      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e048      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e044      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a42:	e040      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4a:	e03c      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a52:	e038      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a71      	ldr	r2, [pc, #452]	; (8004c20 <UART_SetConfig+0x908>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d130      	bne.n	8004ac0 <UART_SetConfig+0x7a8>
 8004a5e:	4b6f      	ldr	r3, [pc, #444]	; (8004c1c <UART_SetConfig+0x904>)
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d826      	bhi.n	8004ab8 <UART_SetConfig+0x7a0>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <UART_SetConfig+0x758>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	2302      	movs	r3, #2
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8e:	e01a      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a96:	e016      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e012      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e00e      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e00a      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004ab0:	2340      	movs	r3, #64	; 0x40
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab6:	e006      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004abe:	e002      	b.n	8004ac6 <UART_SetConfig+0x7ae>
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a55      	ldr	r2, [pc, #340]	; (8004c20 <UART_SetConfig+0x908>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	f040 80f8 	bne.w	8004cc2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ad2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ad6:	2b20      	cmp	r3, #32
 8004ad8:	dc46      	bgt.n	8004b68 <UART_SetConfig+0x850>
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	db75      	blt.n	8004bca <UART_SetConfig+0x8b2>
 8004ade:	3b02      	subs	r3, #2
 8004ae0:	2b1e      	cmp	r3, #30
 8004ae2:	d872      	bhi.n	8004bca <UART_SetConfig+0x8b2>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <UART_SetConfig+0x7d4>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b6f 	.word	0x08004b6f
 8004af0:	08004bcb 	.word	0x08004bcb
 8004af4:	08004b77 	.word	0x08004b77
 8004af8:	08004bcb 	.word	0x08004bcb
 8004afc:	08004bcb 	.word	0x08004bcb
 8004b00:	08004bcb 	.word	0x08004bcb
 8004b04:	08004b87 	.word	0x08004b87
 8004b08:	08004bcb 	.word	0x08004bcb
 8004b0c:	08004bcb 	.word	0x08004bcb
 8004b10:	08004bcb 	.word	0x08004bcb
 8004b14:	08004bcb 	.word	0x08004bcb
 8004b18:	08004bcb 	.word	0x08004bcb
 8004b1c:	08004bcb 	.word	0x08004bcb
 8004b20:	08004bcb 	.word	0x08004bcb
 8004b24:	08004b97 	.word	0x08004b97
 8004b28:	08004bcb 	.word	0x08004bcb
 8004b2c:	08004bcb 	.word	0x08004bcb
 8004b30:	08004bcb 	.word	0x08004bcb
 8004b34:	08004bcb 	.word	0x08004bcb
 8004b38:	08004bcb 	.word	0x08004bcb
 8004b3c:	08004bcb 	.word	0x08004bcb
 8004b40:	08004bcb 	.word	0x08004bcb
 8004b44:	08004bcb 	.word	0x08004bcb
 8004b48:	08004bcb 	.word	0x08004bcb
 8004b4c:	08004bcb 	.word	0x08004bcb
 8004b50:	08004bcb 	.word	0x08004bcb
 8004b54:	08004bcb 	.word	0x08004bcb
 8004b58:	08004bcb 	.word	0x08004bcb
 8004b5c:	08004bcb 	.word	0x08004bcb
 8004b60:	08004bcb 	.word	0x08004bcb
 8004b64:	08004bbd 	.word	0x08004bbd
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d02a      	beq.n	8004bc2 <UART_SetConfig+0x8aa>
 8004b6c:	e02d      	b.n	8004bca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004b6e:	f7fe fed3 	bl	8003918 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b74:	e02f      	b.n	8004bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fee2 	bl	8003944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b84:	e027      	b.n	8004bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff f82e 	bl	8003bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b94:	e01f      	b.n	8004bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b96:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <UART_SetConfig+0x904>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <UART_SetConfig+0x904>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	4a1d      	ldr	r2, [pc, #116]	; (8004c24 <UART_SetConfig+0x90c>)
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bb4:	e00f      	b.n	8004bd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <UART_SetConfig+0x90c>)
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bba:	e00c      	b.n	8004bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <UART_SetConfig+0x910>)
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc0:	e009      	b.n	8004bd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc8:	e005      	b.n	8004bd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 81ee 	beq.w	8004fba <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	4a12      	ldr	r2, [pc, #72]	; (8004c2c <UART_SetConfig+0x914>)
 8004be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be8:	461a      	mov	r2, r3
 8004bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bf0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4413      	add	r3, r2
 8004bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d305      	bcc.n	8004c0e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d910      	bls.n	8004c30 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c14:	e1d1      	b.n	8004fba <UART_SetConfig+0xca2>
 8004c16:	bf00      	nop
 8004c18:	40011c00 	.word	0x40011c00
 8004c1c:	58024400 	.word	0x58024400
 8004c20:	58000c00 	.word	0x58000c00
 8004c24:	03d09000 	.word	0x03d09000
 8004c28:	003d0900 	.word	0x003d0900
 8004c2c:	08005fa0 	.word	0x08005fa0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c32:	2200      	movs	r2, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	60fa      	str	r2, [r7, #12]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	4ac0      	ldr	r2, [pc, #768]	; (8004f40 <UART_SetConfig+0xc28>)
 8004c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2200      	movs	r2, #0
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c52:	f7fb fbb5 	bl	80003c0 <__aeabi_uldivmod>
 8004c56:	4602      	mov	r2, r0
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	020b      	lsls	r3, r1, #8
 8004c68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c6c:	0202      	lsls	r2, r0, #8
 8004c6e:	6979      	ldr	r1, [r7, #20]
 8004c70:	6849      	ldr	r1, [r1, #4]
 8004c72:	0849      	lsrs	r1, r1, #1
 8004c74:	2000      	movs	r0, #0
 8004c76:	460c      	mov	r4, r1
 8004c78:	4605      	mov	r5, r0
 8004c7a:	eb12 0804 	adds.w	r8, r2, r4
 8004c7e:	eb43 0905 	adc.w	r9, r3, r5
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	469a      	mov	sl, r3
 8004c8a:	4693      	mov	fp, r2
 8004c8c:	4652      	mov	r2, sl
 8004c8e:	465b      	mov	r3, fp
 8004c90:	4640      	mov	r0, r8
 8004c92:	4649      	mov	r1, r9
 8004c94:	f7fb fb94 	bl	80003c0 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca6:	d308      	bcc.n	8004cba <UART_SetConfig+0x9a2>
 8004ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cae:	d204      	bcs.n	8004cba <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cb6:	60da      	str	r2, [r3, #12]
 8004cb8:	e17f      	b.n	8004fba <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004cc0:	e17b      	b.n	8004fba <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cca:	f040 80bd 	bne.w	8004e48 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004cce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	dc48      	bgt.n	8004d68 <UART_SetConfig+0xa50>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	db7b      	blt.n	8004dd2 <UART_SetConfig+0xaba>
 8004cda:	2b20      	cmp	r3, #32
 8004cdc:	d879      	bhi.n	8004dd2 <UART_SetConfig+0xaba>
 8004cde:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <UART_SetConfig+0x9cc>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d6f 	.word	0x08004d6f
 8004ce8:	08004d77 	.word	0x08004d77
 8004cec:	08004dd3 	.word	0x08004dd3
 8004cf0:	08004dd3 	.word	0x08004dd3
 8004cf4:	08004d7f 	.word	0x08004d7f
 8004cf8:	08004dd3 	.word	0x08004dd3
 8004cfc:	08004dd3 	.word	0x08004dd3
 8004d00:	08004dd3 	.word	0x08004dd3
 8004d04:	08004d8f 	.word	0x08004d8f
 8004d08:	08004dd3 	.word	0x08004dd3
 8004d0c:	08004dd3 	.word	0x08004dd3
 8004d10:	08004dd3 	.word	0x08004dd3
 8004d14:	08004dd3 	.word	0x08004dd3
 8004d18:	08004dd3 	.word	0x08004dd3
 8004d1c:	08004dd3 	.word	0x08004dd3
 8004d20:	08004dd3 	.word	0x08004dd3
 8004d24:	08004d9f 	.word	0x08004d9f
 8004d28:	08004dd3 	.word	0x08004dd3
 8004d2c:	08004dd3 	.word	0x08004dd3
 8004d30:	08004dd3 	.word	0x08004dd3
 8004d34:	08004dd3 	.word	0x08004dd3
 8004d38:	08004dd3 	.word	0x08004dd3
 8004d3c:	08004dd3 	.word	0x08004dd3
 8004d40:	08004dd3 	.word	0x08004dd3
 8004d44:	08004dd3 	.word	0x08004dd3
 8004d48:	08004dd3 	.word	0x08004dd3
 8004d4c:	08004dd3 	.word	0x08004dd3
 8004d50:	08004dd3 	.word	0x08004dd3
 8004d54:	08004dd3 	.word	0x08004dd3
 8004d58:	08004dd3 	.word	0x08004dd3
 8004d5c:	08004dd3 	.word	0x08004dd3
 8004d60:	08004dd3 	.word	0x08004dd3
 8004d64:	08004dc5 	.word	0x08004dc5
 8004d68:	2b40      	cmp	r3, #64	; 0x40
 8004d6a:	d02e      	beq.n	8004dca <UART_SetConfig+0xab2>
 8004d6c:	e031      	b.n	8004dd2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d6e:	f7fd fbe9 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8004d72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d74:	e033      	b.n	8004dde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d76:	f7fd fbfb 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 8004d7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d7c:	e02f      	b.n	8004dde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe fdde 	bl	8003944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d8c:	e027      	b.n	8004dde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d8e:	f107 0318 	add.w	r3, r7, #24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe ff2a 	bl	8003bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d9c:	e01f      	b.n	8004dde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d9e:	4b69      	ldr	r3, [pc, #420]	; (8004f44 <UART_SetConfig+0xc2c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004daa:	4b66      	ldr	r3, [pc, #408]	; (8004f44 <UART_SetConfig+0xc2c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	4a64      	ldr	r2, [pc, #400]	; (8004f48 <UART_SetConfig+0xc30>)
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dbc:	e00f      	b.n	8004dde <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8004dbe:	4b62      	ldr	r3, [pc, #392]	; (8004f48 <UART_SetConfig+0xc30>)
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc2:	e00c      	b.n	8004dde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004dc4:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <UART_SetConfig+0xc34>)
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc8:	e009      	b.n	8004dde <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd0:	e005      	b.n	8004dde <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80ea 	beq.w	8004fba <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	4a55      	ldr	r2, [pc, #340]	; (8004f40 <UART_SetConfig+0xc28>)
 8004dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004df8:	005a      	lsls	r2, r3, #1
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	085b      	lsrs	r3, r3, #1
 8004e00:	441a      	add	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	2b0f      	cmp	r3, #15
 8004e10:	d916      	bls.n	8004e40 <UART_SetConfig+0xb28>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d212      	bcs.n	8004e40 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f023 030f 	bic.w	r3, r3, #15
 8004e22:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e32:	4313      	orrs	r3, r2
 8004e34:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	e0bc      	b.n	8004fba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e46:	e0b8      	b.n	8004fba <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	dc4b      	bgt.n	8004ee8 <UART_SetConfig+0xbd0>
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f2c0 8087 	blt.w	8004f64 <UART_SetConfig+0xc4c>
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	f200 8084 	bhi.w	8004f64 <UART_SetConfig+0xc4c>
 8004e5c:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <UART_SetConfig+0xb4c>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004eef 	.word	0x08004eef
 8004e68:	08004ef7 	.word	0x08004ef7
 8004e6c:	08004f65 	.word	0x08004f65
 8004e70:	08004f65 	.word	0x08004f65
 8004e74:	08004eff 	.word	0x08004eff
 8004e78:	08004f65 	.word	0x08004f65
 8004e7c:	08004f65 	.word	0x08004f65
 8004e80:	08004f65 	.word	0x08004f65
 8004e84:	08004f0f 	.word	0x08004f0f
 8004e88:	08004f65 	.word	0x08004f65
 8004e8c:	08004f65 	.word	0x08004f65
 8004e90:	08004f65 	.word	0x08004f65
 8004e94:	08004f65 	.word	0x08004f65
 8004e98:	08004f65 	.word	0x08004f65
 8004e9c:	08004f65 	.word	0x08004f65
 8004ea0:	08004f65 	.word	0x08004f65
 8004ea4:	08004f1f 	.word	0x08004f1f
 8004ea8:	08004f65 	.word	0x08004f65
 8004eac:	08004f65 	.word	0x08004f65
 8004eb0:	08004f65 	.word	0x08004f65
 8004eb4:	08004f65 	.word	0x08004f65
 8004eb8:	08004f65 	.word	0x08004f65
 8004ebc:	08004f65 	.word	0x08004f65
 8004ec0:	08004f65 	.word	0x08004f65
 8004ec4:	08004f65 	.word	0x08004f65
 8004ec8:	08004f65 	.word	0x08004f65
 8004ecc:	08004f65 	.word	0x08004f65
 8004ed0:	08004f65 	.word	0x08004f65
 8004ed4:	08004f65 	.word	0x08004f65
 8004ed8:	08004f65 	.word	0x08004f65
 8004edc:	08004f65 	.word	0x08004f65
 8004ee0:	08004f65 	.word	0x08004f65
 8004ee4:	08004f57 	.word	0x08004f57
 8004ee8:	2b40      	cmp	r3, #64	; 0x40
 8004eea:	d037      	beq.n	8004f5c <UART_SetConfig+0xc44>
 8004eec:	e03a      	b.n	8004f64 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eee:	f7fd fb29 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8004ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ef4:	e03c      	b.n	8004f70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ef6:	f7fd fb3b 	bl	8002570 <HAL_RCC_GetPCLK2Freq>
 8004efa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004efc:	e038      	b.n	8004f70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe fd1e 	bl	8003944 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f0c:	e030      	b.n	8004f70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f0e:	f107 0318 	add.w	r3, r7, #24
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fe6a 	bl	8003bec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f1c:	e028      	b.n	8004f70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f1e:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <UART_SetConfig+0xc2c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d012      	beq.n	8004f50 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <UART_SetConfig+0xc2c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <UART_SetConfig+0xc30>)
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f3c:	e018      	b.n	8004f70 <UART_SetConfig+0xc58>
 8004f3e:	bf00      	nop
 8004f40:	08005fa0 	.word	0x08005fa0
 8004f44:	58024400 	.word	0x58024400
 8004f48:	03d09000 	.word	0x03d09000
 8004f4c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8004f50:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <UART_SetConfig+0xccc>)
 8004f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f54:	e00c      	b.n	8004f70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f56:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <UART_SetConfig+0xcd0>)
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f5a:	e009      	b.n	8004f70 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f62:	e005      	b.n	8004f70 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f6e:	bf00      	nop
    }

    if (pclk != 0U)
 8004f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d021      	beq.n	8004fba <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <UART_SetConfig+0xcd4>)
 8004f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	441a      	add	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d909      	bls.n	8004fb4 <UART_SetConfig+0xc9c>
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa6:	d205      	bcs.n	8004fb4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e002      	b.n	8004fba <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fd6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3748      	adds	r7, #72	; 0x48
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe4:	03d09000 	.word	0x03d09000
 8004fe8:	003d0900 	.word	0x003d0900
 8004fec:	08005fa0 	.word	0x08005fa0

08004ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01a      	beq.n	8005106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ee:	d10a      	bne.n	8005106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]
  }
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b098      	sub	sp, #96	; 0x60
 8005138:	af02      	add	r7, sp, #8
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005144:	f7fb ff58 	bl	8000ff8 <HAL_GetTick>
 8005148:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b08      	cmp	r3, #8
 8005156:	d12f      	bne.n	80051b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800515c:	9300      	str	r3, [sp, #0]
 800515e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005160:	2200      	movs	r2, #0
 8005162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f88e 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d022      	beq.n	80051b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005186:	653b      	str	r3, [r7, #80]	; 0x50
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
 8005192:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800519e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e6      	bne.n	8005172 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e063      	b.n	8005280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d149      	bne.n	800525a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ce:	2200      	movs	r2, #0
 80051d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f857 	bl	8005288 <UART_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d03c      	beq.n	800525a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	623b      	str	r3, [r7, #32]
   return(result);
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
 8005200:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e6      	bne.n	80051e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	60fb      	str	r3, [r7, #12]
   return(result);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	64bb      	str	r3, [r7, #72]	; 0x48
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005232:	61fa      	str	r2, [r7, #28]
 8005234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	69b9      	ldr	r1, [r7, #24]
 8005238:	69fa      	ldr	r2, [r7, #28]
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	617b      	str	r3, [r7, #20]
   return(result);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e5      	bne.n	8005212 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e012      	b.n	8005280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2220      	movs	r2, #32
 8005266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3758      	adds	r7, #88	; 0x58
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	4613      	mov	r3, r2
 8005296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005298:	e049      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d045      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a2:	f7fb fea9 	bl	8000ff8 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d302      	bcc.n	80052b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e048      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d031      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d110      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f839 	bl	8005358 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2208      	movs	r2, #8
 80052ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e029      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005308:	d111      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f81f 	bl	8005358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e00f      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d0a6      	beq.n	800529a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005358:	b480      	push	{r7}
 800535a:	b095      	sub	sp, #84	; 0x54
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005374:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537e:	643b      	str	r3, [r7, #64]	; 0x40
 8005380:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005384:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e6      	bne.n	8005360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <UART_EndRxTransfer+0xc8>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e5      	bne.n	8005392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d118      	bne.n	8005400 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	60bb      	str	r3, [r7, #8]
   return(result);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f023 0310 	bic.w	r3, r3, #16
 80053e2:	647b      	str	r3, [r7, #68]	; 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6979      	ldr	r1, [r7, #20]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	613b      	str	r3, [r7, #16]
   return(result);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005414:	bf00      	nop
 8005416:	3754      	adds	r7, #84	; 0x54
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	effffffe 	.word	0xeffffffe

08005424 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_UARTEx_DisableFifoMode+0x16>
 8005436:	2302      	movs	r3, #2
 8005438:	e027      	b.n	800548a <HAL_UARTEx_DisableFifoMode+0x66>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2224      	movs	r2, #36	; 0x24
 8005446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0201 	bic.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005468:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e02d      	b.n	800550a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2224      	movs	r2, #36	; 0x24
 80054ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f850 	bl	8005590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005526:	2302      	movs	r3, #2
 8005528:	e02d      	b.n	8005586 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	; 0x24
 8005536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f022 0201 	bic.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f812 	bl	8005590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559c:	2b00      	cmp	r3, #0
 800559e:	d108      	bne.n	80055b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055b0:	e031      	b.n	8005616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055b2:	2310      	movs	r3, #16
 80055b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055b6:	2310      	movs	r3, #16
 80055b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	0e5b      	lsrs	r3, r3, #25
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 0307 	and.w	r3, r3, #7
 80055c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	0f5b      	lsrs	r3, r3, #29
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055da:	7bbb      	ldrb	r3, [r7, #14]
 80055dc:	7b3a      	ldrb	r2, [r7, #12]
 80055de:	4911      	ldr	r1, [pc, #68]	; (8005624 <UARTEx_SetNbDataToProcess+0x94>)
 80055e0:	5c8a      	ldrb	r2, [r1, r2]
 80055e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055e6:	7b3a      	ldrb	r2, [r7, #12]
 80055e8:	490f      	ldr	r1, [pc, #60]	; (8005628 <UARTEx_SetNbDataToProcess+0x98>)
 80055ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	7b7a      	ldrb	r2, [r7, #13]
 80055fc:	4909      	ldr	r1, [pc, #36]	; (8005624 <UARTEx_SetNbDataToProcess+0x94>)
 80055fe:	5c8a      	ldrb	r2, [r1, r2]
 8005600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005604:	7b7a      	ldrb	r2, [r7, #13]
 8005606:	4908      	ldr	r1, [pc, #32]	; (8005628 <UARTEx_SetNbDataToProcess+0x98>)
 8005608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800560a:	fb93 f3f2 	sdiv	r3, r3, r2
 800560e:	b29a      	uxth	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	08005fb8 	.word	0x08005fb8
 8005628:	08005fc0 	.word	0x08005fc0

0800562c <__errno>:
 800562c:	4b01      	ldr	r3, [pc, #4]	; (8005634 <__errno+0x8>)
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	24000010 	.word	0x24000010

08005638 <__libc_init_array>:
 8005638:	b570      	push	{r4, r5, r6, lr}
 800563a:	4d0d      	ldr	r5, [pc, #52]	; (8005670 <__libc_init_array+0x38>)
 800563c:	4c0d      	ldr	r4, [pc, #52]	; (8005674 <__libc_init_array+0x3c>)
 800563e:	1b64      	subs	r4, r4, r5
 8005640:	10a4      	asrs	r4, r4, #2
 8005642:	2600      	movs	r6, #0
 8005644:	42a6      	cmp	r6, r4
 8005646:	d109      	bne.n	800565c <__libc_init_array+0x24>
 8005648:	4d0b      	ldr	r5, [pc, #44]	; (8005678 <__libc_init_array+0x40>)
 800564a:	4c0c      	ldr	r4, [pc, #48]	; (800567c <__libc_init_array+0x44>)
 800564c:	f000 fc8e 	bl	8005f6c <_init>
 8005650:	1b64      	subs	r4, r4, r5
 8005652:	10a4      	asrs	r4, r4, #2
 8005654:	2600      	movs	r6, #0
 8005656:	42a6      	cmp	r6, r4
 8005658:	d105      	bne.n	8005666 <__libc_init_array+0x2e>
 800565a:	bd70      	pop	{r4, r5, r6, pc}
 800565c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005660:	4798      	blx	r3
 8005662:	3601      	adds	r6, #1
 8005664:	e7ee      	b.n	8005644 <__libc_init_array+0xc>
 8005666:	f855 3b04 	ldr.w	r3, [r5], #4
 800566a:	4798      	blx	r3
 800566c:	3601      	adds	r6, #1
 800566e:	e7f2      	b.n	8005656 <__libc_init_array+0x1e>
 8005670:	08006004 	.word	0x08006004
 8005674:	08006004 	.word	0x08006004
 8005678:	08006004 	.word	0x08006004
 800567c:	08006008 	.word	0x08006008

08005680 <memset>:
 8005680:	4402      	add	r2, r0
 8005682:	4603      	mov	r3, r0
 8005684:	4293      	cmp	r3, r2
 8005686:	d100      	bne.n	800568a <memset+0xa>
 8005688:	4770      	bx	lr
 800568a:	f803 1b01 	strb.w	r1, [r3], #1
 800568e:	e7f9      	b.n	8005684 <memset+0x4>

08005690 <siprintf>:
 8005690:	b40e      	push	{r1, r2, r3}
 8005692:	b500      	push	{lr}
 8005694:	b09c      	sub	sp, #112	; 0x70
 8005696:	ab1d      	add	r3, sp, #116	; 0x74
 8005698:	9002      	str	r0, [sp, #8]
 800569a:	9006      	str	r0, [sp, #24]
 800569c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056a0:	4809      	ldr	r0, [pc, #36]	; (80056c8 <siprintf+0x38>)
 80056a2:	9107      	str	r1, [sp, #28]
 80056a4:	9104      	str	r1, [sp, #16]
 80056a6:	4909      	ldr	r1, [pc, #36]	; (80056cc <siprintf+0x3c>)
 80056a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ac:	9105      	str	r1, [sp, #20]
 80056ae:	6800      	ldr	r0, [r0, #0]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	a902      	add	r1, sp, #8
 80056b4:	f000 f868 	bl	8005788 <_svfiprintf_r>
 80056b8:	9b02      	ldr	r3, [sp, #8]
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	b01c      	add	sp, #112	; 0x70
 80056c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c4:	b003      	add	sp, #12
 80056c6:	4770      	bx	lr
 80056c8:	24000010 	.word	0x24000010
 80056cc:	ffff0208 	.word	0xffff0208

080056d0 <__ssputs_r>:
 80056d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	688e      	ldr	r6, [r1, #8]
 80056d6:	429e      	cmp	r6, r3
 80056d8:	4682      	mov	sl, r0
 80056da:	460c      	mov	r4, r1
 80056dc:	4690      	mov	r8, r2
 80056de:	461f      	mov	r7, r3
 80056e0:	d838      	bhi.n	8005754 <__ssputs_r+0x84>
 80056e2:	898a      	ldrh	r2, [r1, #12]
 80056e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056e8:	d032      	beq.n	8005750 <__ssputs_r+0x80>
 80056ea:	6825      	ldr	r5, [r4, #0]
 80056ec:	6909      	ldr	r1, [r1, #16]
 80056ee:	eba5 0901 	sub.w	r9, r5, r1
 80056f2:	6965      	ldr	r5, [r4, #20]
 80056f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056fc:	3301      	adds	r3, #1
 80056fe:	444b      	add	r3, r9
 8005700:	106d      	asrs	r5, r5, #1
 8005702:	429d      	cmp	r5, r3
 8005704:	bf38      	it	cc
 8005706:	461d      	movcc	r5, r3
 8005708:	0553      	lsls	r3, r2, #21
 800570a:	d531      	bpl.n	8005770 <__ssputs_r+0xa0>
 800570c:	4629      	mov	r1, r5
 800570e:	f000 fb63 	bl	8005dd8 <_malloc_r>
 8005712:	4606      	mov	r6, r0
 8005714:	b950      	cbnz	r0, 800572c <__ssputs_r+0x5c>
 8005716:	230c      	movs	r3, #12
 8005718:	f8ca 3000 	str.w	r3, [sl]
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572c:	6921      	ldr	r1, [r4, #16]
 800572e:	464a      	mov	r2, r9
 8005730:	f000 fabe 	bl	8005cb0 <memcpy>
 8005734:	89a3      	ldrh	r3, [r4, #12]
 8005736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800573a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	6126      	str	r6, [r4, #16]
 8005742:	6165      	str	r5, [r4, #20]
 8005744:	444e      	add	r6, r9
 8005746:	eba5 0509 	sub.w	r5, r5, r9
 800574a:	6026      	str	r6, [r4, #0]
 800574c:	60a5      	str	r5, [r4, #8]
 800574e:	463e      	mov	r6, r7
 8005750:	42be      	cmp	r6, r7
 8005752:	d900      	bls.n	8005756 <__ssputs_r+0x86>
 8005754:	463e      	mov	r6, r7
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	4632      	mov	r2, r6
 800575a:	4641      	mov	r1, r8
 800575c:	f000 fab6 	bl	8005ccc <memmove>
 8005760:	68a3      	ldr	r3, [r4, #8]
 8005762:	1b9b      	subs	r3, r3, r6
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4433      	add	r3, r6
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	2000      	movs	r0, #0
 800576e:	e7db      	b.n	8005728 <__ssputs_r+0x58>
 8005770:	462a      	mov	r2, r5
 8005772:	f000 fba5 	bl	8005ec0 <_realloc_r>
 8005776:	4606      	mov	r6, r0
 8005778:	2800      	cmp	r0, #0
 800577a:	d1e1      	bne.n	8005740 <__ssputs_r+0x70>
 800577c:	6921      	ldr	r1, [r4, #16]
 800577e:	4650      	mov	r0, sl
 8005780:	f000 fabe 	bl	8005d00 <_free_r>
 8005784:	e7c7      	b.n	8005716 <__ssputs_r+0x46>
	...

08005788 <_svfiprintf_r>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	4698      	mov	r8, r3
 800578e:	898b      	ldrh	r3, [r1, #12]
 8005790:	061b      	lsls	r3, r3, #24
 8005792:	b09d      	sub	sp, #116	; 0x74
 8005794:	4607      	mov	r7, r0
 8005796:	460d      	mov	r5, r1
 8005798:	4614      	mov	r4, r2
 800579a:	d50e      	bpl.n	80057ba <_svfiprintf_r+0x32>
 800579c:	690b      	ldr	r3, [r1, #16]
 800579e:	b963      	cbnz	r3, 80057ba <_svfiprintf_r+0x32>
 80057a0:	2140      	movs	r1, #64	; 0x40
 80057a2:	f000 fb19 	bl	8005dd8 <_malloc_r>
 80057a6:	6028      	str	r0, [r5, #0]
 80057a8:	6128      	str	r0, [r5, #16]
 80057aa:	b920      	cbnz	r0, 80057b6 <_svfiprintf_r+0x2e>
 80057ac:	230c      	movs	r3, #12
 80057ae:	603b      	str	r3, [r7, #0]
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295
 80057b4:	e0d1      	b.n	800595a <_svfiprintf_r+0x1d2>
 80057b6:	2340      	movs	r3, #64	; 0x40
 80057b8:	616b      	str	r3, [r5, #20]
 80057ba:	2300      	movs	r3, #0
 80057bc:	9309      	str	r3, [sp, #36]	; 0x24
 80057be:	2320      	movs	r3, #32
 80057c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80057c8:	2330      	movs	r3, #48	; 0x30
 80057ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005974 <_svfiprintf_r+0x1ec>
 80057ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057d2:	f04f 0901 	mov.w	r9, #1
 80057d6:	4623      	mov	r3, r4
 80057d8:	469a      	mov	sl, r3
 80057da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057de:	b10a      	cbz	r2, 80057e4 <_svfiprintf_r+0x5c>
 80057e0:	2a25      	cmp	r2, #37	; 0x25
 80057e2:	d1f9      	bne.n	80057d8 <_svfiprintf_r+0x50>
 80057e4:	ebba 0b04 	subs.w	fp, sl, r4
 80057e8:	d00b      	beq.n	8005802 <_svfiprintf_r+0x7a>
 80057ea:	465b      	mov	r3, fp
 80057ec:	4622      	mov	r2, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	4638      	mov	r0, r7
 80057f2:	f7ff ff6d 	bl	80056d0 <__ssputs_r>
 80057f6:	3001      	adds	r0, #1
 80057f8:	f000 80aa 	beq.w	8005950 <_svfiprintf_r+0x1c8>
 80057fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057fe:	445a      	add	r2, fp
 8005800:	9209      	str	r2, [sp, #36]	; 0x24
 8005802:	f89a 3000 	ldrb.w	r3, [sl]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 80a2 	beq.w	8005950 <_svfiprintf_r+0x1c8>
 800580c:	2300      	movs	r3, #0
 800580e:	f04f 32ff 	mov.w	r2, #4294967295
 8005812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005816:	f10a 0a01 	add.w	sl, sl, #1
 800581a:	9304      	str	r3, [sp, #16]
 800581c:	9307      	str	r3, [sp, #28]
 800581e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005822:	931a      	str	r3, [sp, #104]	; 0x68
 8005824:	4654      	mov	r4, sl
 8005826:	2205      	movs	r2, #5
 8005828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800582c:	4851      	ldr	r0, [pc, #324]	; (8005974 <_svfiprintf_r+0x1ec>)
 800582e:	f7fa fd77 	bl	8000320 <memchr>
 8005832:	9a04      	ldr	r2, [sp, #16]
 8005834:	b9d8      	cbnz	r0, 800586e <_svfiprintf_r+0xe6>
 8005836:	06d0      	lsls	r0, r2, #27
 8005838:	bf44      	itt	mi
 800583a:	2320      	movmi	r3, #32
 800583c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005840:	0711      	lsls	r1, r2, #28
 8005842:	bf44      	itt	mi
 8005844:	232b      	movmi	r3, #43	; 0x2b
 8005846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800584a:	f89a 3000 	ldrb.w	r3, [sl]
 800584e:	2b2a      	cmp	r3, #42	; 0x2a
 8005850:	d015      	beq.n	800587e <_svfiprintf_r+0xf6>
 8005852:	9a07      	ldr	r2, [sp, #28]
 8005854:	4654      	mov	r4, sl
 8005856:	2000      	movs	r0, #0
 8005858:	f04f 0c0a 	mov.w	ip, #10
 800585c:	4621      	mov	r1, r4
 800585e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005862:	3b30      	subs	r3, #48	; 0x30
 8005864:	2b09      	cmp	r3, #9
 8005866:	d94e      	bls.n	8005906 <_svfiprintf_r+0x17e>
 8005868:	b1b0      	cbz	r0, 8005898 <_svfiprintf_r+0x110>
 800586a:	9207      	str	r2, [sp, #28]
 800586c:	e014      	b.n	8005898 <_svfiprintf_r+0x110>
 800586e:	eba0 0308 	sub.w	r3, r0, r8
 8005872:	fa09 f303 	lsl.w	r3, r9, r3
 8005876:	4313      	orrs	r3, r2
 8005878:	9304      	str	r3, [sp, #16]
 800587a:	46a2      	mov	sl, r4
 800587c:	e7d2      	b.n	8005824 <_svfiprintf_r+0x9c>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	1d19      	adds	r1, r3, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	9103      	str	r1, [sp, #12]
 8005886:	2b00      	cmp	r3, #0
 8005888:	bfbb      	ittet	lt
 800588a:	425b      	neglt	r3, r3
 800588c:	f042 0202 	orrlt.w	r2, r2, #2
 8005890:	9307      	strge	r3, [sp, #28]
 8005892:	9307      	strlt	r3, [sp, #28]
 8005894:	bfb8      	it	lt
 8005896:	9204      	strlt	r2, [sp, #16]
 8005898:	7823      	ldrb	r3, [r4, #0]
 800589a:	2b2e      	cmp	r3, #46	; 0x2e
 800589c:	d10c      	bne.n	80058b8 <_svfiprintf_r+0x130>
 800589e:	7863      	ldrb	r3, [r4, #1]
 80058a0:	2b2a      	cmp	r3, #42	; 0x2a
 80058a2:	d135      	bne.n	8005910 <_svfiprintf_r+0x188>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	1d1a      	adds	r2, r3, #4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	9203      	str	r2, [sp, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bfb8      	it	lt
 80058b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80058b4:	3402      	adds	r4, #2
 80058b6:	9305      	str	r3, [sp, #20]
 80058b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005984 <_svfiprintf_r+0x1fc>
 80058bc:	7821      	ldrb	r1, [r4, #0]
 80058be:	2203      	movs	r2, #3
 80058c0:	4650      	mov	r0, sl
 80058c2:	f7fa fd2d 	bl	8000320 <memchr>
 80058c6:	b140      	cbz	r0, 80058da <_svfiprintf_r+0x152>
 80058c8:	2340      	movs	r3, #64	; 0x40
 80058ca:	eba0 000a 	sub.w	r0, r0, sl
 80058ce:	fa03 f000 	lsl.w	r0, r3, r0
 80058d2:	9b04      	ldr	r3, [sp, #16]
 80058d4:	4303      	orrs	r3, r0
 80058d6:	3401      	adds	r4, #1
 80058d8:	9304      	str	r3, [sp, #16]
 80058da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058de:	4826      	ldr	r0, [pc, #152]	; (8005978 <_svfiprintf_r+0x1f0>)
 80058e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058e4:	2206      	movs	r2, #6
 80058e6:	f7fa fd1b 	bl	8000320 <memchr>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d038      	beq.n	8005960 <_svfiprintf_r+0x1d8>
 80058ee:	4b23      	ldr	r3, [pc, #140]	; (800597c <_svfiprintf_r+0x1f4>)
 80058f0:	bb1b      	cbnz	r3, 800593a <_svfiprintf_r+0x1b2>
 80058f2:	9b03      	ldr	r3, [sp, #12]
 80058f4:	3307      	adds	r3, #7
 80058f6:	f023 0307 	bic.w	r3, r3, #7
 80058fa:	3308      	adds	r3, #8
 80058fc:	9303      	str	r3, [sp, #12]
 80058fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005900:	4433      	add	r3, r6
 8005902:	9309      	str	r3, [sp, #36]	; 0x24
 8005904:	e767      	b.n	80057d6 <_svfiprintf_r+0x4e>
 8005906:	fb0c 3202 	mla	r2, ip, r2, r3
 800590a:	460c      	mov	r4, r1
 800590c:	2001      	movs	r0, #1
 800590e:	e7a5      	b.n	800585c <_svfiprintf_r+0xd4>
 8005910:	2300      	movs	r3, #0
 8005912:	3401      	adds	r4, #1
 8005914:	9305      	str	r3, [sp, #20]
 8005916:	4619      	mov	r1, r3
 8005918:	f04f 0c0a 	mov.w	ip, #10
 800591c:	4620      	mov	r0, r4
 800591e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005922:	3a30      	subs	r2, #48	; 0x30
 8005924:	2a09      	cmp	r2, #9
 8005926:	d903      	bls.n	8005930 <_svfiprintf_r+0x1a8>
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0c5      	beq.n	80058b8 <_svfiprintf_r+0x130>
 800592c:	9105      	str	r1, [sp, #20]
 800592e:	e7c3      	b.n	80058b8 <_svfiprintf_r+0x130>
 8005930:	fb0c 2101 	mla	r1, ip, r1, r2
 8005934:	4604      	mov	r4, r0
 8005936:	2301      	movs	r3, #1
 8005938:	e7f0      	b.n	800591c <_svfiprintf_r+0x194>
 800593a:	ab03      	add	r3, sp, #12
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	462a      	mov	r2, r5
 8005940:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <_svfiprintf_r+0x1f8>)
 8005942:	a904      	add	r1, sp, #16
 8005944:	4638      	mov	r0, r7
 8005946:	f3af 8000 	nop.w
 800594a:	1c42      	adds	r2, r0, #1
 800594c:	4606      	mov	r6, r0
 800594e:	d1d6      	bne.n	80058fe <_svfiprintf_r+0x176>
 8005950:	89ab      	ldrh	r3, [r5, #12]
 8005952:	065b      	lsls	r3, r3, #25
 8005954:	f53f af2c 	bmi.w	80057b0 <_svfiprintf_r+0x28>
 8005958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800595a:	b01d      	add	sp, #116	; 0x74
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	ab03      	add	r3, sp, #12
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	462a      	mov	r2, r5
 8005966:	4b06      	ldr	r3, [pc, #24]	; (8005980 <_svfiprintf_r+0x1f8>)
 8005968:	a904      	add	r1, sp, #16
 800596a:	4638      	mov	r0, r7
 800596c:	f000 f87a 	bl	8005a64 <_printf_i>
 8005970:	e7eb      	b.n	800594a <_svfiprintf_r+0x1c2>
 8005972:	bf00      	nop
 8005974:	08005fc8 	.word	0x08005fc8
 8005978:	08005fd2 	.word	0x08005fd2
 800597c:	00000000 	.word	0x00000000
 8005980:	080056d1 	.word	0x080056d1
 8005984:	08005fce 	.word	0x08005fce

08005988 <_printf_common>:
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	4616      	mov	r6, r2
 800598e:	4699      	mov	r9, r3
 8005990:	688a      	ldr	r2, [r1, #8]
 8005992:	690b      	ldr	r3, [r1, #16]
 8005994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005998:	4293      	cmp	r3, r2
 800599a:	bfb8      	it	lt
 800599c:	4613      	movlt	r3, r2
 800599e:	6033      	str	r3, [r6, #0]
 80059a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059a4:	4607      	mov	r7, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	b10a      	cbz	r2, 80059ae <_printf_common+0x26>
 80059aa:	3301      	adds	r3, #1
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	0699      	lsls	r1, r3, #26
 80059b2:	bf42      	ittt	mi
 80059b4:	6833      	ldrmi	r3, [r6, #0]
 80059b6:	3302      	addmi	r3, #2
 80059b8:	6033      	strmi	r3, [r6, #0]
 80059ba:	6825      	ldr	r5, [r4, #0]
 80059bc:	f015 0506 	ands.w	r5, r5, #6
 80059c0:	d106      	bne.n	80059d0 <_printf_common+0x48>
 80059c2:	f104 0a19 	add.w	sl, r4, #25
 80059c6:	68e3      	ldr	r3, [r4, #12]
 80059c8:	6832      	ldr	r2, [r6, #0]
 80059ca:	1a9b      	subs	r3, r3, r2
 80059cc:	42ab      	cmp	r3, r5
 80059ce:	dc26      	bgt.n	8005a1e <_printf_common+0x96>
 80059d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059d4:	1e13      	subs	r3, r2, #0
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	bf18      	it	ne
 80059da:	2301      	movne	r3, #1
 80059dc:	0692      	lsls	r2, r2, #26
 80059de:	d42b      	bmi.n	8005a38 <_printf_common+0xb0>
 80059e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059e4:	4649      	mov	r1, r9
 80059e6:	4638      	mov	r0, r7
 80059e8:	47c0      	blx	r8
 80059ea:	3001      	adds	r0, #1
 80059ec:	d01e      	beq.n	8005a2c <_printf_common+0xa4>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	68e5      	ldr	r5, [r4, #12]
 80059f2:	6832      	ldr	r2, [r6, #0]
 80059f4:	f003 0306 	and.w	r3, r3, #6
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	bf08      	it	eq
 80059fc:	1aad      	subeq	r5, r5, r2
 80059fe:	68a3      	ldr	r3, [r4, #8]
 8005a00:	6922      	ldr	r2, [r4, #16]
 8005a02:	bf0c      	ite	eq
 8005a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a08:	2500      	movne	r5, #0
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	bfc4      	itt	gt
 8005a0e:	1a9b      	subgt	r3, r3, r2
 8005a10:	18ed      	addgt	r5, r5, r3
 8005a12:	2600      	movs	r6, #0
 8005a14:	341a      	adds	r4, #26
 8005a16:	42b5      	cmp	r5, r6
 8005a18:	d11a      	bne.n	8005a50 <_printf_common+0xc8>
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	e008      	b.n	8005a30 <_printf_common+0xa8>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4652      	mov	r2, sl
 8005a22:	4649      	mov	r1, r9
 8005a24:	4638      	mov	r0, r7
 8005a26:	47c0      	blx	r8
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d103      	bne.n	8005a34 <_printf_common+0xac>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a34:	3501      	adds	r5, #1
 8005a36:	e7c6      	b.n	80059c6 <_printf_common+0x3e>
 8005a38:	18e1      	adds	r1, r4, r3
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	2030      	movs	r0, #48	; 0x30
 8005a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a42:	4422      	add	r2, r4
 8005a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	e7c7      	b.n	80059e0 <_printf_common+0x58>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4622      	mov	r2, r4
 8005a54:	4649      	mov	r1, r9
 8005a56:	4638      	mov	r0, r7
 8005a58:	47c0      	blx	r8
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d0e6      	beq.n	8005a2c <_printf_common+0xa4>
 8005a5e:	3601      	adds	r6, #1
 8005a60:	e7d9      	b.n	8005a16 <_printf_common+0x8e>
	...

08005a64 <_printf_i>:
 8005a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	7e0f      	ldrb	r7, [r1, #24]
 8005a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a6c:	2f78      	cmp	r7, #120	; 0x78
 8005a6e:	4691      	mov	r9, r2
 8005a70:	4680      	mov	r8, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	469a      	mov	sl, r3
 8005a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a7a:	d807      	bhi.n	8005a8c <_printf_i+0x28>
 8005a7c:	2f62      	cmp	r7, #98	; 0x62
 8005a7e:	d80a      	bhi.n	8005a96 <_printf_i+0x32>
 8005a80:	2f00      	cmp	r7, #0
 8005a82:	f000 80d8 	beq.w	8005c36 <_printf_i+0x1d2>
 8005a86:	2f58      	cmp	r7, #88	; 0x58
 8005a88:	f000 80a3 	beq.w	8005bd2 <_printf_i+0x16e>
 8005a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a94:	e03a      	b.n	8005b0c <_printf_i+0xa8>
 8005a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a9a:	2b15      	cmp	r3, #21
 8005a9c:	d8f6      	bhi.n	8005a8c <_printf_i+0x28>
 8005a9e:	a101      	add	r1, pc, #4	; (adr r1, 8005aa4 <_printf_i+0x40>)
 8005aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005b11 	.word	0x08005b11
 8005aac:	08005a8d 	.word	0x08005a8d
 8005ab0:	08005a8d 	.word	0x08005a8d
 8005ab4:	08005a8d 	.word	0x08005a8d
 8005ab8:	08005a8d 	.word	0x08005a8d
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005a8d 	.word	0x08005a8d
 8005ac4:	08005a8d 	.word	0x08005a8d
 8005ac8:	08005a8d 	.word	0x08005a8d
 8005acc:	08005a8d 	.word	0x08005a8d
 8005ad0:	08005c1d 	.word	0x08005c1d
 8005ad4:	08005b41 	.word	0x08005b41
 8005ad8:	08005bff 	.word	0x08005bff
 8005adc:	08005a8d 	.word	0x08005a8d
 8005ae0:	08005a8d 	.word	0x08005a8d
 8005ae4:	08005c3f 	.word	0x08005c3f
 8005ae8:	08005a8d 	.word	0x08005a8d
 8005aec:	08005b41 	.word	0x08005b41
 8005af0:	08005a8d 	.word	0x08005a8d
 8005af4:	08005a8d 	.word	0x08005a8d
 8005af8:	08005c07 	.word	0x08005c07
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	1d1a      	adds	r2, r3, #4
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	602a      	str	r2, [r5, #0]
 8005b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e0a3      	b.n	8005c58 <_printf_i+0x1f4>
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	6829      	ldr	r1, [r5, #0]
 8005b14:	0606      	lsls	r6, r0, #24
 8005b16:	f101 0304 	add.w	r3, r1, #4
 8005b1a:	d50a      	bpl.n	8005b32 <_printf_i+0xce>
 8005b1c:	680e      	ldr	r6, [r1, #0]
 8005b1e:	602b      	str	r3, [r5, #0]
 8005b20:	2e00      	cmp	r6, #0
 8005b22:	da03      	bge.n	8005b2c <_printf_i+0xc8>
 8005b24:	232d      	movs	r3, #45	; 0x2d
 8005b26:	4276      	negs	r6, r6
 8005b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b2c:	485e      	ldr	r0, [pc, #376]	; (8005ca8 <_printf_i+0x244>)
 8005b2e:	230a      	movs	r3, #10
 8005b30:	e019      	b.n	8005b66 <_printf_i+0x102>
 8005b32:	680e      	ldr	r6, [r1, #0]
 8005b34:	602b      	str	r3, [r5, #0]
 8005b36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b3a:	bf18      	it	ne
 8005b3c:	b236      	sxthne	r6, r6
 8005b3e:	e7ef      	b.n	8005b20 <_printf_i+0xbc>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	6820      	ldr	r0, [r4, #0]
 8005b44:	1d19      	adds	r1, r3, #4
 8005b46:	6029      	str	r1, [r5, #0]
 8005b48:	0601      	lsls	r1, r0, #24
 8005b4a:	d501      	bpl.n	8005b50 <_printf_i+0xec>
 8005b4c:	681e      	ldr	r6, [r3, #0]
 8005b4e:	e002      	b.n	8005b56 <_printf_i+0xf2>
 8005b50:	0646      	lsls	r6, r0, #25
 8005b52:	d5fb      	bpl.n	8005b4c <_printf_i+0xe8>
 8005b54:	881e      	ldrh	r6, [r3, #0]
 8005b56:	4854      	ldr	r0, [pc, #336]	; (8005ca8 <_printf_i+0x244>)
 8005b58:	2f6f      	cmp	r7, #111	; 0x6f
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2308      	moveq	r3, #8
 8005b5e:	230a      	movne	r3, #10
 8005b60:	2100      	movs	r1, #0
 8005b62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b66:	6865      	ldr	r5, [r4, #4]
 8005b68:	60a5      	str	r5, [r4, #8]
 8005b6a:	2d00      	cmp	r5, #0
 8005b6c:	bfa2      	ittt	ge
 8005b6e:	6821      	ldrge	r1, [r4, #0]
 8005b70:	f021 0104 	bicge.w	r1, r1, #4
 8005b74:	6021      	strge	r1, [r4, #0]
 8005b76:	b90e      	cbnz	r6, 8005b7c <_printf_i+0x118>
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	d04d      	beq.n	8005c18 <_printf_i+0x1b4>
 8005b7c:	4615      	mov	r5, r2
 8005b7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b82:	fb03 6711 	mls	r7, r3, r1, r6
 8005b86:	5dc7      	ldrb	r7, [r0, r7]
 8005b88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b8c:	4637      	mov	r7, r6
 8005b8e:	42bb      	cmp	r3, r7
 8005b90:	460e      	mov	r6, r1
 8005b92:	d9f4      	bls.n	8005b7e <_printf_i+0x11a>
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d10b      	bne.n	8005bb0 <_printf_i+0x14c>
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	07de      	lsls	r6, r3, #31
 8005b9c:	d508      	bpl.n	8005bb0 <_printf_i+0x14c>
 8005b9e:	6923      	ldr	r3, [r4, #16]
 8005ba0:	6861      	ldr	r1, [r4, #4]
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	bfde      	ittt	le
 8005ba6:	2330      	movle	r3, #48	; 0x30
 8005ba8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bac:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bb0:	1b52      	subs	r2, r2, r5
 8005bb2:	6122      	str	r2, [r4, #16]
 8005bb4:	f8cd a000 	str.w	sl, [sp]
 8005bb8:	464b      	mov	r3, r9
 8005bba:	aa03      	add	r2, sp, #12
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f7ff fee2 	bl	8005988 <_printf_common>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d14c      	bne.n	8005c62 <_printf_i+0x1fe>
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bcc:	b004      	add	sp, #16
 8005bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd2:	4835      	ldr	r0, [pc, #212]	; (8005ca8 <_printf_i+0x244>)
 8005bd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005bd8:	6829      	ldr	r1, [r5, #0]
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005be0:	6029      	str	r1, [r5, #0]
 8005be2:	061d      	lsls	r5, r3, #24
 8005be4:	d514      	bpl.n	8005c10 <_printf_i+0x1ac>
 8005be6:	07df      	lsls	r7, r3, #31
 8005be8:	bf44      	itt	mi
 8005bea:	f043 0320 	orrmi.w	r3, r3, #32
 8005bee:	6023      	strmi	r3, [r4, #0]
 8005bf0:	b91e      	cbnz	r6, 8005bfa <_printf_i+0x196>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f023 0320 	bic.w	r3, r3, #32
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	2310      	movs	r3, #16
 8005bfc:	e7b0      	b.n	8005b60 <_printf_i+0xfc>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f043 0320 	orr.w	r3, r3, #32
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	2378      	movs	r3, #120	; 0x78
 8005c08:	4828      	ldr	r0, [pc, #160]	; (8005cac <_printf_i+0x248>)
 8005c0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c0e:	e7e3      	b.n	8005bd8 <_printf_i+0x174>
 8005c10:	0659      	lsls	r1, r3, #25
 8005c12:	bf48      	it	mi
 8005c14:	b2b6      	uxthmi	r6, r6
 8005c16:	e7e6      	b.n	8005be6 <_printf_i+0x182>
 8005c18:	4615      	mov	r5, r2
 8005c1a:	e7bb      	b.n	8005b94 <_printf_i+0x130>
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	6826      	ldr	r6, [r4, #0]
 8005c20:	6961      	ldr	r1, [r4, #20]
 8005c22:	1d18      	adds	r0, r3, #4
 8005c24:	6028      	str	r0, [r5, #0]
 8005c26:	0635      	lsls	r5, r6, #24
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	d501      	bpl.n	8005c30 <_printf_i+0x1cc>
 8005c2c:	6019      	str	r1, [r3, #0]
 8005c2e:	e002      	b.n	8005c36 <_printf_i+0x1d2>
 8005c30:	0670      	lsls	r0, r6, #25
 8005c32:	d5fb      	bpl.n	8005c2c <_printf_i+0x1c8>
 8005c34:	8019      	strh	r1, [r3, #0]
 8005c36:	2300      	movs	r3, #0
 8005c38:	6123      	str	r3, [r4, #16]
 8005c3a:	4615      	mov	r5, r2
 8005c3c:	e7ba      	b.n	8005bb4 <_printf_i+0x150>
 8005c3e:	682b      	ldr	r3, [r5, #0]
 8005c40:	1d1a      	adds	r2, r3, #4
 8005c42:	602a      	str	r2, [r5, #0]
 8005c44:	681d      	ldr	r5, [r3, #0]
 8005c46:	6862      	ldr	r2, [r4, #4]
 8005c48:	2100      	movs	r1, #0
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f7fa fb68 	bl	8000320 <memchr>
 8005c50:	b108      	cbz	r0, 8005c56 <_printf_i+0x1f2>
 8005c52:	1b40      	subs	r0, r0, r5
 8005c54:	6060      	str	r0, [r4, #4]
 8005c56:	6863      	ldr	r3, [r4, #4]
 8005c58:	6123      	str	r3, [r4, #16]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c60:	e7a8      	b.n	8005bb4 <_printf_i+0x150>
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	462a      	mov	r2, r5
 8005c66:	4649      	mov	r1, r9
 8005c68:	4640      	mov	r0, r8
 8005c6a:	47d0      	blx	sl
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d0ab      	beq.n	8005bc8 <_printf_i+0x164>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	079b      	lsls	r3, r3, #30
 8005c74:	d413      	bmi.n	8005c9e <_printf_i+0x23a>
 8005c76:	68e0      	ldr	r0, [r4, #12]
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	4298      	cmp	r0, r3
 8005c7c:	bfb8      	it	lt
 8005c7e:	4618      	movlt	r0, r3
 8005c80:	e7a4      	b.n	8005bcc <_printf_i+0x168>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4632      	mov	r2, r6
 8005c86:	4649      	mov	r1, r9
 8005c88:	4640      	mov	r0, r8
 8005c8a:	47d0      	blx	sl
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d09b      	beq.n	8005bc8 <_printf_i+0x164>
 8005c90:	3501      	adds	r5, #1
 8005c92:	68e3      	ldr	r3, [r4, #12]
 8005c94:	9903      	ldr	r1, [sp, #12]
 8005c96:	1a5b      	subs	r3, r3, r1
 8005c98:	42ab      	cmp	r3, r5
 8005c9a:	dcf2      	bgt.n	8005c82 <_printf_i+0x21e>
 8005c9c:	e7eb      	b.n	8005c76 <_printf_i+0x212>
 8005c9e:	2500      	movs	r5, #0
 8005ca0:	f104 0619 	add.w	r6, r4, #25
 8005ca4:	e7f5      	b.n	8005c92 <_printf_i+0x22e>
 8005ca6:	bf00      	nop
 8005ca8:	08005fd9 	.word	0x08005fd9
 8005cac:	08005fea 	.word	0x08005fea

08005cb0 <memcpy>:
 8005cb0:	440a      	add	r2, r1
 8005cb2:	4291      	cmp	r1, r2
 8005cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cb8:	d100      	bne.n	8005cbc <memcpy+0xc>
 8005cba:	4770      	bx	lr
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cc6:	4291      	cmp	r1, r2
 8005cc8:	d1f9      	bne.n	8005cbe <memcpy+0xe>
 8005cca:	bd10      	pop	{r4, pc}

08005ccc <memmove>:
 8005ccc:	4288      	cmp	r0, r1
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	eb01 0402 	add.w	r4, r1, r2
 8005cd4:	d902      	bls.n	8005cdc <memmove+0x10>
 8005cd6:	4284      	cmp	r4, r0
 8005cd8:	4623      	mov	r3, r4
 8005cda:	d807      	bhi.n	8005cec <memmove+0x20>
 8005cdc:	1e43      	subs	r3, r0, #1
 8005cde:	42a1      	cmp	r1, r4
 8005ce0:	d008      	beq.n	8005cf4 <memmove+0x28>
 8005ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cea:	e7f8      	b.n	8005cde <memmove+0x12>
 8005cec:	4402      	add	r2, r0
 8005cee:	4601      	mov	r1, r0
 8005cf0:	428a      	cmp	r2, r1
 8005cf2:	d100      	bne.n	8005cf6 <memmove+0x2a>
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cfe:	e7f7      	b.n	8005cf0 <memmove+0x24>

08005d00 <_free_r>:
 8005d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d02:	2900      	cmp	r1, #0
 8005d04:	d044      	beq.n	8005d90 <_free_r+0x90>
 8005d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d0a:	9001      	str	r0, [sp, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8005d12:	bfb8      	it	lt
 8005d14:	18e4      	addlt	r4, r4, r3
 8005d16:	f000 f913 	bl	8005f40 <__malloc_lock>
 8005d1a:	4a1e      	ldr	r2, [pc, #120]	; (8005d94 <_free_r+0x94>)
 8005d1c:	9801      	ldr	r0, [sp, #4]
 8005d1e:	6813      	ldr	r3, [r2, #0]
 8005d20:	b933      	cbnz	r3, 8005d30 <_free_r+0x30>
 8005d22:	6063      	str	r3, [r4, #4]
 8005d24:	6014      	str	r4, [r2, #0]
 8005d26:	b003      	add	sp, #12
 8005d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d2c:	f000 b90e 	b.w	8005f4c <__malloc_unlock>
 8005d30:	42a3      	cmp	r3, r4
 8005d32:	d908      	bls.n	8005d46 <_free_r+0x46>
 8005d34:	6825      	ldr	r5, [r4, #0]
 8005d36:	1961      	adds	r1, r4, r5
 8005d38:	428b      	cmp	r3, r1
 8005d3a:	bf01      	itttt	eq
 8005d3c:	6819      	ldreq	r1, [r3, #0]
 8005d3e:	685b      	ldreq	r3, [r3, #4]
 8005d40:	1949      	addeq	r1, r1, r5
 8005d42:	6021      	streq	r1, [r4, #0]
 8005d44:	e7ed      	b.n	8005d22 <_free_r+0x22>
 8005d46:	461a      	mov	r2, r3
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	b10b      	cbz	r3, 8005d50 <_free_r+0x50>
 8005d4c:	42a3      	cmp	r3, r4
 8005d4e:	d9fa      	bls.n	8005d46 <_free_r+0x46>
 8005d50:	6811      	ldr	r1, [r2, #0]
 8005d52:	1855      	adds	r5, r2, r1
 8005d54:	42a5      	cmp	r5, r4
 8005d56:	d10b      	bne.n	8005d70 <_free_r+0x70>
 8005d58:	6824      	ldr	r4, [r4, #0]
 8005d5a:	4421      	add	r1, r4
 8005d5c:	1854      	adds	r4, r2, r1
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	6011      	str	r1, [r2, #0]
 8005d62:	d1e0      	bne.n	8005d26 <_free_r+0x26>
 8005d64:	681c      	ldr	r4, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	6053      	str	r3, [r2, #4]
 8005d6a:	4421      	add	r1, r4
 8005d6c:	6011      	str	r1, [r2, #0]
 8005d6e:	e7da      	b.n	8005d26 <_free_r+0x26>
 8005d70:	d902      	bls.n	8005d78 <_free_r+0x78>
 8005d72:	230c      	movs	r3, #12
 8005d74:	6003      	str	r3, [r0, #0]
 8005d76:	e7d6      	b.n	8005d26 <_free_r+0x26>
 8005d78:	6825      	ldr	r5, [r4, #0]
 8005d7a:	1961      	adds	r1, r4, r5
 8005d7c:	428b      	cmp	r3, r1
 8005d7e:	bf04      	itt	eq
 8005d80:	6819      	ldreq	r1, [r3, #0]
 8005d82:	685b      	ldreq	r3, [r3, #4]
 8005d84:	6063      	str	r3, [r4, #4]
 8005d86:	bf04      	itt	eq
 8005d88:	1949      	addeq	r1, r1, r5
 8005d8a:	6021      	streq	r1, [r4, #0]
 8005d8c:	6054      	str	r4, [r2, #4]
 8005d8e:	e7ca      	b.n	8005d26 <_free_r+0x26>
 8005d90:	b003      	add	sp, #12
 8005d92:	bd30      	pop	{r4, r5, pc}
 8005d94:	24000190 	.word	0x24000190

08005d98 <sbrk_aligned>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4e0e      	ldr	r6, [pc, #56]	; (8005dd4 <sbrk_aligned+0x3c>)
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	6831      	ldr	r1, [r6, #0]
 8005da0:	4605      	mov	r5, r0
 8005da2:	b911      	cbnz	r1, 8005daa <sbrk_aligned+0x12>
 8005da4:	f000 f8bc 	bl	8005f20 <_sbrk_r>
 8005da8:	6030      	str	r0, [r6, #0]
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 f8b7 	bl	8005f20 <_sbrk_r>
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	d00a      	beq.n	8005dcc <sbrk_aligned+0x34>
 8005db6:	1cc4      	adds	r4, r0, #3
 8005db8:	f024 0403 	bic.w	r4, r4, #3
 8005dbc:	42a0      	cmp	r0, r4
 8005dbe:	d007      	beq.n	8005dd0 <sbrk_aligned+0x38>
 8005dc0:	1a21      	subs	r1, r4, r0
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 f8ac 	bl	8005f20 <_sbrk_r>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d101      	bne.n	8005dd0 <sbrk_aligned+0x38>
 8005dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	24000194 	.word	0x24000194

08005dd8 <_malloc_r>:
 8005dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	1ccd      	adds	r5, r1, #3
 8005dde:	f025 0503 	bic.w	r5, r5, #3
 8005de2:	3508      	adds	r5, #8
 8005de4:	2d0c      	cmp	r5, #12
 8005de6:	bf38      	it	cc
 8005de8:	250c      	movcc	r5, #12
 8005dea:	2d00      	cmp	r5, #0
 8005dec:	4607      	mov	r7, r0
 8005dee:	db01      	blt.n	8005df4 <_malloc_r+0x1c>
 8005df0:	42a9      	cmp	r1, r5
 8005df2:	d905      	bls.n	8005e00 <_malloc_r+0x28>
 8005df4:	230c      	movs	r3, #12
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	2600      	movs	r6, #0
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	4e2e      	ldr	r6, [pc, #184]	; (8005ebc <_malloc_r+0xe4>)
 8005e02:	f000 f89d 	bl	8005f40 <__malloc_lock>
 8005e06:	6833      	ldr	r3, [r6, #0]
 8005e08:	461c      	mov	r4, r3
 8005e0a:	bb34      	cbnz	r4, 8005e5a <_malloc_r+0x82>
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ffc2 	bl	8005d98 <sbrk_aligned>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	4604      	mov	r4, r0
 8005e18:	d14d      	bne.n	8005eb6 <_malloc_r+0xde>
 8005e1a:	6834      	ldr	r4, [r6, #0]
 8005e1c:	4626      	mov	r6, r4
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	d140      	bne.n	8005ea4 <_malloc_r+0xcc>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	4631      	mov	r1, r6
 8005e26:	4638      	mov	r0, r7
 8005e28:	eb04 0803 	add.w	r8, r4, r3
 8005e2c:	f000 f878 	bl	8005f20 <_sbrk_r>
 8005e30:	4580      	cmp	r8, r0
 8005e32:	d13a      	bne.n	8005eaa <_malloc_r+0xd2>
 8005e34:	6821      	ldr	r1, [r4, #0]
 8005e36:	3503      	adds	r5, #3
 8005e38:	1a6d      	subs	r5, r5, r1
 8005e3a:	f025 0503 	bic.w	r5, r5, #3
 8005e3e:	3508      	adds	r5, #8
 8005e40:	2d0c      	cmp	r5, #12
 8005e42:	bf38      	it	cc
 8005e44:	250c      	movcc	r5, #12
 8005e46:	4629      	mov	r1, r5
 8005e48:	4638      	mov	r0, r7
 8005e4a:	f7ff ffa5 	bl	8005d98 <sbrk_aligned>
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d02b      	beq.n	8005eaa <_malloc_r+0xd2>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	442b      	add	r3, r5
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	e00e      	b.n	8005e78 <_malloc_r+0xa0>
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	1b52      	subs	r2, r2, r5
 8005e5e:	d41e      	bmi.n	8005e9e <_malloc_r+0xc6>
 8005e60:	2a0b      	cmp	r2, #11
 8005e62:	d916      	bls.n	8005e92 <_malloc_r+0xba>
 8005e64:	1961      	adds	r1, r4, r5
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6025      	str	r5, [r4, #0]
 8005e6a:	bf18      	it	ne
 8005e6c:	6059      	strne	r1, [r3, #4]
 8005e6e:	6863      	ldr	r3, [r4, #4]
 8005e70:	bf08      	it	eq
 8005e72:	6031      	streq	r1, [r6, #0]
 8005e74:	5162      	str	r2, [r4, r5]
 8005e76:	604b      	str	r3, [r1, #4]
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f104 060b 	add.w	r6, r4, #11
 8005e7e:	f000 f865 	bl	8005f4c <__malloc_unlock>
 8005e82:	f026 0607 	bic.w	r6, r6, #7
 8005e86:	1d23      	adds	r3, r4, #4
 8005e88:	1af2      	subs	r2, r6, r3
 8005e8a:	d0b6      	beq.n	8005dfa <_malloc_r+0x22>
 8005e8c:	1b9b      	subs	r3, r3, r6
 8005e8e:	50a3      	str	r3, [r4, r2]
 8005e90:	e7b3      	b.n	8005dfa <_malloc_r+0x22>
 8005e92:	6862      	ldr	r2, [r4, #4]
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	bf0c      	ite	eq
 8005e98:	6032      	streq	r2, [r6, #0]
 8005e9a:	605a      	strne	r2, [r3, #4]
 8005e9c:	e7ec      	b.n	8005e78 <_malloc_r+0xa0>
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	6864      	ldr	r4, [r4, #4]
 8005ea2:	e7b2      	b.n	8005e0a <_malloc_r+0x32>
 8005ea4:	4634      	mov	r4, r6
 8005ea6:	6876      	ldr	r6, [r6, #4]
 8005ea8:	e7b9      	b.n	8005e1e <_malloc_r+0x46>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	603b      	str	r3, [r7, #0]
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f000 f84c 	bl	8005f4c <__malloc_unlock>
 8005eb4:	e7a1      	b.n	8005dfa <_malloc_r+0x22>
 8005eb6:	6025      	str	r5, [r4, #0]
 8005eb8:	e7de      	b.n	8005e78 <_malloc_r+0xa0>
 8005eba:	bf00      	nop
 8005ebc:	24000190 	.word	0x24000190

08005ec0 <_realloc_r>:
 8005ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec4:	4680      	mov	r8, r0
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	460e      	mov	r6, r1
 8005eca:	b921      	cbnz	r1, 8005ed6 <_realloc_r+0x16>
 8005ecc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	f7ff bf81 	b.w	8005dd8 <_malloc_r>
 8005ed6:	b92a      	cbnz	r2, 8005ee4 <_realloc_r+0x24>
 8005ed8:	f7ff ff12 	bl	8005d00 <_free_r>
 8005edc:	4625      	mov	r5, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ee4:	f000 f838 	bl	8005f58 <_malloc_usable_size_r>
 8005ee8:	4284      	cmp	r4, r0
 8005eea:	4607      	mov	r7, r0
 8005eec:	d802      	bhi.n	8005ef4 <_realloc_r+0x34>
 8005eee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ef2:	d812      	bhi.n	8005f1a <_realloc_r+0x5a>
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	f7ff ff6e 	bl	8005dd8 <_malloc_r>
 8005efc:	4605      	mov	r5, r0
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d0ed      	beq.n	8005ede <_realloc_r+0x1e>
 8005f02:	42bc      	cmp	r4, r7
 8005f04:	4622      	mov	r2, r4
 8005f06:	4631      	mov	r1, r6
 8005f08:	bf28      	it	cs
 8005f0a:	463a      	movcs	r2, r7
 8005f0c:	f7ff fed0 	bl	8005cb0 <memcpy>
 8005f10:	4631      	mov	r1, r6
 8005f12:	4640      	mov	r0, r8
 8005f14:	f7ff fef4 	bl	8005d00 <_free_r>
 8005f18:	e7e1      	b.n	8005ede <_realloc_r+0x1e>
 8005f1a:	4635      	mov	r5, r6
 8005f1c:	e7df      	b.n	8005ede <_realloc_r+0x1e>
	...

08005f20 <_sbrk_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4d06      	ldr	r5, [pc, #24]	; (8005f3c <_sbrk_r+0x1c>)
 8005f24:	2300      	movs	r3, #0
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fa ff06 	bl	8000d3c <_sbrk>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_sbrk_r+0x1a>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_sbrk_r+0x1a>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	24000198 	.word	0x24000198

08005f40 <__malloc_lock>:
 8005f40:	4801      	ldr	r0, [pc, #4]	; (8005f48 <__malloc_lock+0x8>)
 8005f42:	f000 b811 	b.w	8005f68 <__retarget_lock_acquire_recursive>
 8005f46:	bf00      	nop
 8005f48:	2400019c 	.word	0x2400019c

08005f4c <__malloc_unlock>:
 8005f4c:	4801      	ldr	r0, [pc, #4]	; (8005f54 <__malloc_unlock+0x8>)
 8005f4e:	f000 b80c 	b.w	8005f6a <__retarget_lock_release_recursive>
 8005f52:	bf00      	nop
 8005f54:	2400019c 	.word	0x2400019c

08005f58 <_malloc_usable_size_r>:
 8005f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f5c:	1f18      	subs	r0, r3, #4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bfbc      	itt	lt
 8005f62:	580b      	ldrlt	r3, [r1, r0]
 8005f64:	18c0      	addlt	r0, r0, r3
 8005f66:	4770      	bx	lr

08005f68 <__retarget_lock_acquire_recursive>:
 8005f68:	4770      	bx	lr

08005f6a <__retarget_lock_release_recursive>:
 8005f6a:	4770      	bx	lr

08005f6c <_init>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr

08005f78 <_fini>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr
